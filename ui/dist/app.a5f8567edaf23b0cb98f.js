/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 333);
/******/ })
/************************************************************************/
/******/ ({

/***/ 14:
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, module) {/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.11';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });

        return result;
      }

      if (isMap(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });

        return result;
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        if (isObject(srcValue)) {
          stack || (stack = new Stack);
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key),
          srcValue = safeGet(source, key),
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      var index = -1;
      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array == null ? 0 : array.length,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return new Ctor;

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return new Ctor;

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Gets the value at `key`, unless `key` is "__proto__".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function safeGet(object, key) {
      if (key == '__proto__') {
        return;
      }

      return object[key];
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;

        return maxing
          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
          : timeWaiting;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined ||
              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      var sourceURL = '//# sourceURL=' +
        ('sourceURL' in options
          ? options.sourceURL
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrim, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimEnd, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = (lodashFunc.name + ''),
            names = realNames[key] || (realNames[key] = []);

        names.push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function() {
      return _;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else if (freeModule) {
    // Export for Node.js.
    (freeModule.exports = _)._ = _;
    // Export for CommonJS support.
    freeExports._ = _;
  }
  else {
    // Export to the global object.
    root._ = _;
  }
}.call(this));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(23), __webpack_require__(24)(module)))

/***/ }),

/***/ 222:
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function($) {/*This file contains the controllers for the Accounting module
**Accounting Controller -
**Billing Controller - has scopes that check what the active tab is and modifies it behavior on that tab
**
**
**This code was originally copied from the Cell Therapy Controller - to have a base structure and is being added
**      to or modified to meed the needs of Billing
**
*/

//Start of testing for controller for accounting:
//Coping the Cell Therapy Controllers and changing them to accounting
//This is main controller for main accounting pages
// With Coping from Cell Therapy controller, I am adding code from Facilities controllers


(function () {
    'use strict';

    angular.module('app.accounting').controller('AccountingController', AccountingController);
    AccountingController.$inject = ['$scope', '$state', 'Global', 'SiHttpUtil'];

    function AccountingController($scope, $state, Global, SiHttpUtil) {
        $scope.global = Global;
        $scope.tableState = {};

        // Fixes the angular chosen off-by-one error
        $scope.$watch(function () {
            return $(".chosen-select option").length;
        }, function (newvalue, oldvalue) {
            if (newvalue !== oldvalue) {
                $(".chosen-select").trigger("chosen:updated");
            }
        });

        $scope.tableState.currentTable = "";
        $scope.switchTable = function () {
            console.log("table:", $scope.tableState.currentTable);
            console.log("table");
            if ($scope.tableState.currentTable) {
                $state.go("app.accounting." + $scope.tableState.currentTable);
            }
        };

        $scope.UserHash = null;
        $scope.ActiveUserHash = null;
        $scope.ActiveUserList = null;
        SiHttpUtil.CacheUserHash().then(function (UserHash) {
            $scope.UserHash = UserHash.complete;
            $scope.ActiveUserHash = UserHash.active;
            $scope.ActiveUserList = UserHash.activeList;
        });

        $scope.m = {};
    };
})();

//Accounting
//Project Billing Controller
(function () {
    'use strict';

    angular.module('app.accounting').controller('accBillingController', accBillingController);

    accBillingController.$inject = ['$scope', 'SiHttpUtil', 'DTOptionsBuilder', 'DTColumnBuilder', 'DTColumnDefBuilder', 'SiUtil', '$http', 'Global', '$stateParams', '$timeout'];

    function accBillingController($scope, SiHttpUtil, DTOptionsBuilder, DTColumnBuilder, DTColumnDefBuilder, SiUtil, $http, Global, $stateParams, $timeout) {
        // Main model.
        //start of origninal controller for Billing
        $scope.m = {
            getDateTime: SiUtil.getDateTime
        };

        $scope.m.AccountingStatements = {
            DtInstCallback: inst => {
                $scope.m.AccountingStatements.DtInst = inst;
            },
            dtColumns: [],
            tableData: [],
            initData: () => {
                SiHttpUtil.FetchTableEntries('AccountingStatements').then(resp => {
                    $scope.m.AccountingStatements.tableData = resp.records;
                    if ($scope.m.AccountingStatements.tableData && $scope.m.AccountingStatements.tableData.length > 0) {
                        if ($scope.m.AccountingStatements.dtColumns.length == 0) {
                            SiHttpUtil.initDtColumns($scope.m.AccountingStatements.dtColumns, $scope.m.AccountingStatements.tableData, colName => SiHttpUtil.omitColumnForTable('AccountingStatements', colName), colName => SiHttpUtil.dbColumnTranslator('AccountingStatements', colName));
                        }
                        $scope.m.AccountingStatements.dtColDefs = [];
                        $scope.m.AccountingStatements.dtOptions = SiHttpUtil.initDtOptions($scope.m.AccountingStatements.dtColumns, $scope.m.AccountingStatements.tableData, $scope.m.AccountingStatements.rowCallback, function () {
                            $scope.m.AccountingStatements.dataReady = true;
                            resolve($scope.m.AccountingStatements.tableData);
                        }).withOption('order', [['0', 'desc']]);
                    }
                });
            }
        };
        $scope.m.BoaStatements = {
            DtInstCallback: inst => {
                $scope.m.BoaStatements.DtInst = inst;
            },
            dtColumns: [],
            tableData: [],

            initData: () => {
                SiHttpUtil.FetchTableEntries('BoaStatements').then(resp => {
                    $scope.m.BoaStatements.tableData = resp.records;
                    if ($scope.m.BoaStatements.tableData && $scope.m.BoaStatements.tableData.length > 0) {
                        if ($scope.m.BoaStatements.dtColumns.length == 0) {
                            SiHttpUtil.initDtColumns($scope.m.BoaStatements.dtColumns, $scope.m.BoaStatements.tableData, colName => SiHttpUtil.omitColumnForTable('BoaStatements', colName), colName => SiHttpUtil.dbColumnTranslator('BoaStatements', colName));
                        }
                        $scope.m.BoaStatements.dtColDefs = [];
                        $scope.m.BoaStatements.dtOptions = SiHttpUtil.initDtOptions($scope.m.BoaStatements.dtColumns, $scope.m.BoaStatements.tableData, $scope.m.BoaStatements.rowCallback, function () {
                            $scope.m.BoaStatements.dataReady = true;
                            resolve($scope.m.BoaStatements.tableData);
                        }).withOption('order', [['0', 'desc']]);
                    }
                });
            },
            RefreshData: () => {
                if ($scope.m.DtInstCallback) {
                    if ($scope.m.BoaStatements.DtInst) {
                        $scope.m.activeTab = "BoaStatements";
                        $scope.m.BoaStatements.DtInst.changeData($scope.m.BoaStatements.initData());
                        $scope.m.dataReady = true;
                        $scope.$digest();
                    } else {
                        $scope.m.activeTab = "BoaStatements";
                        $scope.m.initData().then(function () {
                            $scope.m.dataReady = true;
                            $scope.$digest();
                        });
                    }
                }
            },
            viewForm: {
                CancelTab: () => {
                    $scope.m.activeTab = "BoaStatements";
                    $scope.m.BoaStatements.viewForm.show = false;
                    $scope.m.BoaStatements.RefreshData();
                }
            },
            data: {
                toAdd: []
            },
            ui: {},
            submitted: false,

            upload: () => {
                $scope.m.activeTab = "BoaStatementsImportTab";
                $scope.m.BoaStatements.viewForm.show = true;
            }
        };

        $scope.m.ProcurifyStatements = {
            DtInstCallback: inst => {
                $scope.m.ProcurifyStatements.DtInst = inst;
            },
            dtColumns: [],
            tableData: [],
            //Different tabs associated with Procurify - Main table & Upload
            initData: () => {
                SiHttpUtil.FetchTableEntries('ProcurifyStatements').then(resp => {
                    $scope.m.ProcurifyStatements.tableData = resp.records;
                    if ($scope.m.ProcurifyStatements.tableData && $scope.m.ProcurifyStatements.tableData.length > 0) {
                        if ($scope.m.ProcurifyStatements.dtColumns.length == 0) {
                            SiHttpUtil.initDtColumns($scope.m.ProcurifyStatements.dtColumns, $scope.m.ProcurifyStatements.tableData, colName => SiHttpUtil.omitColumnForTable('ProcurifyStatements', colName), colName => SiHttpUtil.dbColumnTranslator('ProcurifyStatements', colName));
                        }
                        $scope.m.ProcurifyStatements.dtColDefs = [];
                        $scope.m.ProcurifyStatements.dtOptions = SiHttpUtil.initDtOptions($scope.m.ProcurifyStatements.dtColumns, $scope.m.ProcurifyStatements.tableData, $scope.m.ProcurifyStatements.rowCallback, function () {
                            $scope.m.ProcurifyStatements.dataReady = true;
                            resolve($scope.m.ProcurifyStatements.tableData);
                        }).withOption('order', [['0', 'desc']]);
                    }
                });
            },
            RefreshData: () => {
                if ($scope.m.DtInstCallback) {
                    if ($scope.m.ProcurifyStatements.DtInst) {
                        $scope.m.activeTab = "ProcurifyStatements";
                        $scope.m.ProcurifyStatements.DtInst.changeData($scope.m.ProcurifyStatements.initData());
                        $scope.m.dataReady = true;
                        $scope.$digest();
                    } else {
                        $scope.m.activeTab = "ProcurifyStatements";
                        $scope.m.initData().then(function () {
                            $scope.m.dataReady = true;
                            $scope.$digest();
                        });
                    }
                }
            },
            viewForm: {
                CancelTab: () => {
                    $scope.m.activeTab = "ProcurifyStatements";
                    $scope.m.ProcurifyStatements.viewForm.show = false;
                    $scope.m.ProcurifyStatements.RefreshData();
                }
            },
            ui: {},
            submitted: false,

            upload: () => {
                $scope.m.activeTab = "ProcurifyStatementsImportTab";
                $scope.m.ProcurifyStatements.viewForm.show = true;
            } //end of Procurify Table

        };$scope.m.Import = {
            dataBOA: {
                lotsToAdd: []
            },
            dataProcurify: {
                lotsToAdd: []
            },
            ui: {},
            submitted: false,

            ResetTabBOA: function () {
                SiHttpUtil.ResetForm($scope.m.Import);
                $scope.m.Import.dataBOA.lotsToAdd = [];
            },
            dpOpenBOA: function ($event, input) {
                $event.preventDefault();
                $event.stopPropagation();
                input.opened = !input.opened;
            },
            parseCSVBOA: function () {
                //console.log("do i get here");
                var formData = new FormData();
                formData.append('file', document.getElementById('fileBOA').files[0]);
                SiHttpUtil.POSTRequest(SiHttpUtil.helperAPIUrl + "parseBoaStatement/", formData).then(function (resp) {
                    SiHttpUtil.NotifyOk("Bank of America Statement Uploaded Successfully");
                    var curr;
                    console.log(resp);
                    for (let i = 0; i < resp.length; i++) {
                        const curr = resp[i];
                        $scope.m.Import.dataBOA.lotsToAdd.push({
                            PurchaseDate: curr.PurchaseDate,
                            Description: curr.Description,
                            Amount: curr.Amount,
                            Department: curr.Department,
                            ItemType: curr.ItemType,
                            PONumber: curr.PONumber
                        });
                        console.log($scope.m.Import.dataBOA.lotsToAdd);
                    }
                    $scope.m.Import.SubmitTabBOA();
                    $scope.m.ShowImportBtn = false;
                }, function (err) {
                    SiHttpUtil.NotifyOperationErr("BOA CSV Parse Error");
                    $scope.m.ShowImportBtn = true;
                });
            },
            SubmitTabBOA: function () {
                $scope.m.Import.submitted = true;
                if (!$scope.m.Import.ui.validate.$valid) {
                    //    console.error($scope.m.BulkLotCreate.ui.validate);
                    return;
                }

                var newEntries = [];
                for (var i = 0; i < $scope.m.Import.dataBOA.lotsToAdd.length; i++) {
                    const temp = {};
                    temp.PurchaseDate = $scope.m.Import.dataBOA.lotsToAdd[i].PurchaseDate, temp.Description = $scope.m.Import.dataBOA.lotsToAdd[i].Description, temp.Amount = $scope.m.Import.dataBOA.lotsToAdd[i].Amount, temp.Department = $scope.m.Import.dataBOA.lotsToAdd[i].Department, temp.ItemType = $scope.m.Import.dataBOA.lotsToAdd[i].ItemType, temp.PONumber = $scope.m.Import.dataBOA.lotsToAdd[i].PONumber;

                    newEntries.push(temp);
                }

                var toCreate = {
                    tableName: "BoaStatements",
                    list: newEntries
                };

                SiHttpUtil.CreateTableEntries(toCreate).then(function (resp) {
                    if (resp.status == 200) {
                        $scope.m.Import.ResetTab();
                        //$scope.m.activeTab = "ViewAllTab";
                        $scope.m.RefreshData();
                    }
                });
            },

            addEntryProcurify: function () {
                $scope.m.Import.dataProcurify.lotsToAdd.push({});
                //console.log("addEntry: " + $scope.m.BulkLotCreate.data.lotsToAdd)
            },
            removeEntryProcurify: function (index) {
                $scope.m.Import.dataProcurify.lotsToAdd.splice(index, 1);
            },
            ResetTabProcurify: function () {
                SiHttpUtil.ResetForm($scope.m.Import);
                $scope.m.Import.dataProcurify.lotsToAdd = [];
            },
            dpOpenProcurify: function ($event, input) {
                $event.preventDefault();
                $event.stopPropagation();
                input.opened = !input.opened;
            },
            addEntryProcurify: function () {
                $scope.m.Import.dataProcurify.lotsToAdd.push({});
                //console.log("addEntry: " + $scope.m.BulkLotCreate.data.lotsToAdd)
            },
            removeEntryProcurify: function (index) {
                $scope.m.Import.dataProcurify.lotsToAdd.splice(index, 1);
            },
            parseCSVprocurify: function () {
                //console.log("do i get here");
                var formData = new FormData();
                formData.append('file', document.getElementById('fileProcurify').files[0]);
                SiHttpUtil.POSTRequest(SiHttpUtil.helperAPIUrl + "parseProcurifyStatement/", formData).then(function (resp) {
                    SiHttpUtil.NotifyOk("Procurify Statement Uploaded Successfully");
                    console.log(resp);
                    var curr;
                    for (let i = 0; i < resp.length; i++) {
                        const curr = resp[i];
                        $scope.m.Import.dataProcurify.lotsToAdd.push({
                            OrderID: curr.OrderID,
                            LineNumber: curr.LineNumber,
                            Requester: curr.Requester,
                            SubmittedDate: curr.SubmittedDate,
                            LastModified: curr.ArchiveRecord,
                            RecievedDate: curr.Comment,
                            POID: curr.POID,
                            PurchasedDate: curr.PurchasedDate,
                            ApprovalDate: curr.ApprovalDate,
                            Approver: curr.Approver,
                            DueDate: curr.DueDate,
                            InvoiceDate: curr.InvoiceDate,
                            Vendor: curr.Vendor,
                            Item: curr.Item,
                            SKU: curr.SKU,
                            Quantity: curr.Quantity,
                            Unit: curr.Unit,
                            UnitCost: curr.UnitCost,
                            Currency: curr.Currency,
                            LineCost: curr.LineCost,
                            Status: curr.Status,
                            Location: curr.Location,
                            LocationID: curr.LocationID,
                            Department: curr.Department,
                            DepartmentID: curr.DepartmentID,
                            AccountCode: curr.AccountCode,
                            AccountDescription: curr.AccountDescription,
                            Note: curr.Note,
                            External_ID: curr.External_ID,
                            Project: curr.Project,
                            AdditionalProjects: curr.AdditionalProjects
                        });
                        console.log($scope.m.Import.dataProcurify.lotsToAdd);
                    }
                    $scope.m.Import.SubmitTabProcurify();
                    $scope.m.ShowImportBtn = false;
                }, function (err) {
                    SiHttpUtil.NotifyOperationErr("Procurify Statement CSV Parse Error");
                    $scope.m.ShowImportBtn = true;
                });
            },
            SubmitTabProcurify: function () {
                $scope.m.Import.submitted = true;
                if (!$scope.m.Import.ui.validate.$valid) {
                    //    console.error($scope.m.BulkLotCreate.ui.validate);
                    return;
                }

                var newEntries = [];
                for (var i = 0; i < $scope.m.Import.dataProcurify.lotsToAdd.length; i++) {
                    const temp = {};
                    temp.OrderID = $scope.m.Import.dataProcurify.lotsToAdd[i].OrderID, temp.LineNumber = $scope.m.Import.dataProcurify.lotsToAdd[i].LineNumber, temp.Requester = $scope.m.Import.dataProcurify.lotsToAdd[i].Requester, temp.SubmittedDate = $scope.m.Import.dataProcurify.lotsToAdd[i].SubmittedDate, temp.LastModified = $scope.m.Import.dataProcurify.lotsToAdd[i].LastModified, temp.RecievedDate = $scope.m.Import.dataProcurify.lotsToAdd[i].RecievedDate, temp.POID = $scope.m.Import.dataProcurify.lotsToAdd[i].POID, temp.PurchasedDate = $scope.m.Import.dataProcurify.lotsToAdd[i].PurchasedDate, temp.ApprovalDate = $scope.m.Import.dataProcurify.lotsToAdd[i].ApprovalDate, temp.Approver = $scope.m.Import.dataProcurify.lotsToAdd[i].Approver, temp.DueDate = $scope.m.Import.dataProcurify.lotsToAdd[i].DueDate, temp.InvoiceDate = $scope.m.Import.dataProcurify.lotsToAdd[i].InvoiceDate, temp.Vendor = $scope.m.Import.dataProcurify.lotsToAdd[i].Vendor, temp.Item = $scope.m.Import.dataProcurify.lotsToAdd[i].Item, temp.SKU = $scope.m.Import.dataProcurify.lotsToAdd[i].SKU, temp.Quantity = $scope.m.Import.dataProcurify.lotsToAdd[i].Quantity, temp.Uni = $scope.m.Import.dataProcurify.lotsToAdd[i].Unit, temp.UnitCost = $scope.m.Import.dataProcurify.lotsToAdd[i].UnitCost, temp.Currency = $scope.m.Import.dataProcurify.lotsToAdd[i].Currency, temp.LineCost = $scope.m.Import.dataProcurify.lotsToAdd[i].LineCost, temp.Status = $scope.m.Import.dataProcurify.lotsToAdd[i].Status, temp.Location = $scope.m.Import.dataProcurify.lotsToAdd[i].Location, temp.LocationID = $scope.m.Import.dataProcurify.lotsToAdd[i].LocationID, temp.Department = $scope.m.Import.dataProcurify.lotsToAdd[i].Department, temp.DepartmentID = $scope.m.Import.dataProcurify.lotsToAdd[i].DepartmentID, temp.AccountCode = $scope.m.Import.dataProcurify.lotsToAdd[i].AccountCode, temp.AccountDescription = $scope.m.Import.dataProcurify.lotsToAdd[i].AccountDescription, temp.Note = $scope.m.Import.dataProcurify.lotsToAdd[i].Note, temp.External_ID = $scope.m.Import.dataProcurify.lotsToAdd[i].External_ID, temp.Project = $scope.m.Import.dataProcurify.lotsToAdd[i].Project, temp.AdditionalProjects = $scope.m.Import.dataProcurify.lotsToAdd[i].AdditionalProjects;

                    newEntries.push(temp);
                }

                var toCreate = {
                    tableName: "ProcurifyStatements",
                    list: newEntries
                };

                SiHttpUtil.CreateTableEntries(toCreate).then(function (resp) {
                    if (resp.status == 200) {
                        $scope.m.Import.ResetTab();
                        //$scope.m.activeTab = "ViewAllTab";
                        $scope.m.RefreshData();
                    }
                });
            }
        };

        $scope.m.DtInstCallback = function (inst) {
            console.log("dt:", inst);
            $scope.m.DtInst = inst;
        };
        SiHttpUtil.InitRowClick($scope);
        //$scope.m.InitHandler = () => SiHttpUtil.InitJqueryImportCSVChangeHandler($scope);

        $scope.m.dtColumns = [];

        SiHttpUtil.InitRowClick($scope);
        $scope.m.InitBoaHandler = () => SiHttpUtil.InitJqueryImportCSVChangeHandler($scope, 'fileBOA');
        $scope.m.InitProcurifyHandler = () => SiHttpUtil.InitJqueryImportCSVChangeHandler($scope, 'fileProcurify');

        $scope.m.AccountingStatements.initData();
        SiHttpUtil.InitRowClick($scope, 'BoaStatements');
        SiHttpUtil.InitRowClick($scope, 'ProcurifyStatements');
    } //end of accBilling Controller
})();

//Accounting
//Project Staffing Controller
(function () {
    'use strict';

    angular.module('app.accounting').controller('ProjectStaffing', ProjectStaffing);

    ProjectStaffing.$inject = ['$scope', 'SiHttpUtil', 'DTOptionsBuilder', 'DTColumnBuilder', 'DTColumnDefBuilder', 'SiUtil', '$http', 'Global', '$stateParams', '$timeout'];

    function ProjectStaffing($scope, SiHttpUtil, DTOptionsBuilder, DTColumnBuilder, DTColumnDefBuilder, SiUtil, $http, Global, $stateParams, $timeout) {
        // Main model.
        $scope.global = Global;
        $scope.m = {
            tableName: "TimePerProject",
            activeTab: "ViewAllTab",
            tableData: null,
            TimeListToAdd: []
        };

        //$scope.tableState.currentTable = $scope.m.tableName;
        $scope.op = $stateParams.op;
        $scope.id = $stateParams.id;

        $scope.m.RefreshData = () => {
            if ($scope.m.DtInstCallback) {
                if ($scope.m.DtInst) {
                    $scope.m.DtInst.changeData($scope.m.LoadDataList());
                } else {
                    $scope.m.LoadDataList();
                }
            }
        };

        SiHttpUtil.InitRowClick($scope);

        $scope.m.timeCategory = {
            includeProject: false,
            includeAdmin: false
        };

        $scope.m.onStatusChange = function () {
            var table = $('#TimePerProject').DataTable();
            var val = [];
            if ($scope.m.timeCategory.includeProject) {
                val.push('Project');
            }
            if ($scope.m.timeCategory.includeAdmin) {
                val.push('Administration');
            }
            table.columns(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'ProjectID')) // Changed because of reorder function
            .search(val.join('|'), true, false).draw();
        };
        $scope.m.dtColumns = [];

        $scope.m.LoadDataList = function () {
            return SiHttpUtil.FetchTableEntries($scope.m.tableName).then(function (resp) {
                return new Promise(function (resolve, reject) {
                    $scope.m.tableData = resp.records;
                    if (resp.enums) {
                        var enumList = JSON.parse(resp.enums);
                    }
                    if ($scope.m.tableData && $scope.m.tableData.length > 0) {
                        if ($scope.m.dtColumns.length === 0) {
                            SiHttpUtil.initDtColumns($scope.m.dtColumns, $scope.m.tableData, colName => SiHttpUtil.omitColumnForTable($scope.m.tableName, colName), colName => SiHttpUtil.dbColumnTranslator($scope.m.tableName, colName), colName => SiHttpUtil.hideColumnForTable($scope.m.tableName, colName));
                        }

                        $scope.m.dtColDefs = [DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'ProjectID')).renderWith( // Operator.
                        SiUtil.ColDisplayers.GetHashConvertDisplayer($scope.m.ProjectDisplayData.Hash)).withOption('type', 'natural').withOption('defaultContent', ''), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'PayPeriodID')).renderWith( // Operator.
                        SiUtil.ColDisplayers.GetHashConvertDisplayer($scope.m.PayPeriodsDisplayData.Hash)).withOption('type', 'natural').withOption('defaultContent', ''), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'TimeCat')).renderWith( // Operator.
                        SiUtil.ColDisplayers.GetHashConvertDisplayer($scope.m.TimeSpentCategoriesDisplayData.Hash)).withOption('type', 'natural').withOption('defaultContent', ''), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'createdBy')).renderWith( //createdBy
                        SiUtil.ColDisplayers.GetHashConvertDisplayer($scope.UserHash)), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'createdAt')).renderWith( //CreatedAt.
                        SiUtil.ColDisplayers.ShortDateDisplayer)];
                        $scope.m.dtOptions = SiHttpUtil.initDtOptions($scope.m.dtColumns, $scope.m.tableData, $scope.m.rowCallback, function () {
                            resolve($scope.m.tableData);
                            $scope.m.dataReady = true;
                            if ($scope.op == "view" && $scope.id) {
                                var records = $scope.m.tableData;
                                for (var i = 0; i < records.length; i++) {
                                    if (records[i].id == $scope.id) {
                                        $scope.m.currentRowData = records[i];
                                        break;
                                    }
                                    $scope.m.viewDetail();
                                }
                                $scope.m.viewDetail();
                            }
                        }).withOption('order', [['0', 'desc']]);
                    } else {
                        resolve($scope.m.tableData);
                    }
                });
            });
        };
        var LoadTimeSpentCategoriesList = SiHttpUtil.FetchIdNameMapping('TimeSpentCategories').then(function (resp) {
            $scope.m.TimeSpentCategoriesList = resp;
            $scope.m.TimeSpentCategoriesDisplayData = SiHttpUtil.GetDependencyList($scope.m.TimeSpentCategoriesList);
            $scope.m.TimeSpentCategoriesListReady = true;
        });
        var LoadProjectList = SiHttpUtil.FetchIdNameMapping('project').then(function (resp) {
            $scope.m.ProjectList = resp;
            $scope.m.ProjectDisplayData = SiHttpUtil.GetDependencyDisplayItemList($scope.m.ProjectList);
            $scope.m.ProjectListReady = true;
        });
        var LoadPayPeriodsList = SiHttpUtil.FetchIdNameMapping('PayPeriods').then(function (resp) {
            $scope.m.PayPeriodsList = resp;
            $scope.m.PayPeriodsDisplayData = SiHttpUtil.GetDependencyDisplayItemList($scope.m.PayPeriodsList);
            $scope.m.PayPeriodsListReady = true;
        });

        var deps = []; // Dependencies.
        deps.push(LoadTimeSpentCategoriesList);
        deps.push(LoadProjectList);
        deps.push(LoadPayPeriodsList);
        Promise.all(deps).then(values => {
            $scope.m.LoadDataList();
        });
        $scope.m.LoadDataList();

        $scope.m.BulkLotCreate = {
            data: {
                lotsToAdd: []
            },
            ui: {},
            submitted: false,

            ResetTab: function () {
                SiHttpUtil.ResetForm($scope.m.BulkLotCreate);
                $scope.m.BulkLotCreate.data.lotsToAdd = [];
            },
            copyData: function (column) {
                var len = $scope.m.BulkLotCreate.data.lotsToAdd.length;
                var entry = $scope.m.BulkLotCreate.data.lotsToAdd[0][column];
                for (var i = 0; i < len; i++) {
                    $scope.m.BulkLotCreate.data.lotsToAdd[i][column] = entry;
                }
            },
            dpOpen: function ($event, input) {
                $event.preventDefault();
                $event.stopPropagation();
                input.opened = !input.opened;
            },
            addEntry: function () {
                $scope.m.BulkLotCreate.data.lotsToAdd.push({});
                //console.log("addEntry: " + $scope.m.BulkLotCreate.data.lotsToAdd)
            },
            removeEntry: function (index) {
                $scope.m.BulkLotCreate.data.lotsToAdd.splice(index, 1);
            },

            parseCSV: function () {
                //console.log("do i get here");
                var formData = new FormData();
                formData.append('file', document.getElementById('file').files[0]);
                SiHttpUtil.POSTRequest(SiHttpUtil.helperAPIUrl + "parsePayPeriodData/", formData).then(function (resp) {
                    SiHttpUtil.NotifyOk("Please review data changes");
                    var curr;
                    for (let i = 0; i < resp.length; i++) {
                        const curr = resp[i];
                        $scope.m.BulkLotCreate.data.lotsToAdd.push({
                            name: curr.name,
                            endDate: curr.endDate
                        });
                        console.log($scope.m.BulkLotCreate.data.lotsToAdd);
                    }

                    $scope.m.ShowImportBtn = false;
                    console.log("Parse: Does it get here?");
                }, function (err) {
                    SiHttpUtil.NotifyOperationErr("CSV Parse Error");
                    $scope.m.ShowImportBtn = true;
                });
            },
            SubmitTab: function () {
                $scope.m.BulkLotCreate.submitted = true;
                if (!$scope.m.BulkLotCreate.ui.validate.$valid) {
                    //    console.error($scope.m.BulkLotCreate.ui.validate);
                    return;
                }

                var newEntries = [];
                for (var i = 0; i < $scope.m.BulkLotCreate.data.lotsToAdd.length; i++) {
                    const temp = {};
                    //console.log($scope.m.BulkLotCreate.data.lotsToAdd[i].name);
                    temp.name = $scope.m.BulkLotCreate.data.lotsToAdd[i].name;
                    temp.endDate = $scope.m.BulkLotCreate.data.lotsToAdd[i].endDate;

                    newEntries.push(temp);
                }

                var toCreate = {
                    tableName: "PayPeriods",
                    list: newEntries
                };

                SiHttpUtil.CreateTableEntries(toCreate).then(function (resp) {
                    if (resp.status == 200) {
                        $scope.m.BulkLotCreate.ResetTab();
                        $scope.m.activeTab = "ViewAllTab";
                        $scope.m.RefreshData();
                    }
                });
            }
        };

        $scope.m.InitHandler = () => SiHttpUtil.InitJqueryImportCSVChangeHandler($scope);
    }
})();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),

/***/ 223:
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(_, $, jQuery) {/*!
 *
 * SystImmune LIMS
 * Angle Version: 3.0.0
 *
 */
(function () {
    'use strict';

    angular.module('angle', ['app.core', 'app.routes', 'app.sidebar', 'app.preloader', 'app.loadingbar', 'app.translate', 'app.settings', 'app.dashboard', 'app.icons', 'app.notify', 'app.elements', 'app.locale', 'app.pages', 'app.utils', 'systimu', 'app.research', 'app.ade', 'app.io', 'app.ct', 'app.pd', 'app.project', 'app.facilities', 'app.tools', 'app.accounting', 'app.TimePerProject', 'app.PayPeriod', 'app.Inventory']);
})();
(function () {
    'use strict';

    angular.module('app.colors', []);
})();
(function () {
    'use strict';

    angular.module('app.core', ['ngAnimate', 'ngStorage', 'ngCookies', 'ngDialog', 'pascalprecht.translate', 'ui.bootstrap', 'ui.router', 'permission', 'permission.ui', 'oc.lazyLoad', 'cfp.loadingBar', 'ngSanitize', 'ngResource', 'tmh.dynamicLocale', 'angular.validators', 'datatables', 'datatables.buttons', 'datatables.colreorder', 'localytics.directives', 'chart.js', 'angular-loading-bar', 'angularBootstrapNavTree', 'xeditable', 'angularplasmid', 'angular-fullcalendar']);
})();
(function () {
    'use strict';

    angular.module('app.dashboard', []);
})();
(function () {
    'use strict';

    angular.module('app.elements', []);
})();
(function () {
    'use strict';

    angular.module('app.icons', []);
})();
(function () {
    'use strict';

    angular.module('app.lazyload', []);
})();
(function () {
    'use strict';

    angular.module('app.loadingbar', []);
})();
(function () {
    'use strict';

    angular.module('app.locale', []);
})();
(function () {
    'use strict';

    angular.module('app.notify', []);
})();
(function () {
    'use strict';

    angular.module('app.pages', []);
})();
(function () {
    'use strict';

    angular.module('app.preloader', []);
})();
(function () {
    'use strict';

    angular.module('app.settings', []);
})();
(function () {
    'use strict';

    angular.module('app.routes', ['app.lazyload']);
})();
(function () {
    'use strict';

    angular.module('app.translate', []);
})();
(function () {
    'use strict';

    angular.module('app.utils', ['app.colors']);
})();
(function () {
    'use strict';

    angular.module('app.sidebar', []);
})();
(function () {
    'use strict';

    angular.module('systimu', ['ui.bootstrap']);
})();
(function () {
    'use strict';

    angular.module('app.research', []);
})();
(function () {
    'use strict';

    angular.module('app.ade', []);
})();
(function () {
    'use strict';

    angular.module('app.io', []);
})();
(function () {
    'use strict';

    angular.module('app.ct', []);
})();
(function () {
    'use strict';

    angular.module('app.pd', []);
})();
(function () {
    'use strict';

    angular.module('app.project', []);
})();
(function () {
    'use strict';

    angular.module('app.facilities', []);
})();
(function () {
    'use strict';

    angular.module('app.tools', []);
})();
(function () {
    'use strict';

    angular.module('app.accounting', []);
})();
(function () {
    'use strict';

    angular.module('app.TimePerProject', []);
})();
(function () {
    'use strict';

    angular.module('app.email', []);
})();
(function () {
    'use strict';

    angular.module('app.Inventory', []);
})();
(function () {
    'use strict';

    angular.module('app.PayPeriod', []);
})();
(function () {
    'use strict';

    angular.module('app.colors').constant('APP_COLORS', {
        'primary': '#5d9cec',
        'success': '#27c24c',
        'info': '#23b7e5',
        'warning': '#ff902b',
        'danger': '#f05050',
        'inverse': '#131e26',
        'green': '#37bc9b',
        'pink': '#f532e5',
        'purple': '#7266ba',
        'dark': '#3a3f51',
        'yellow': '#fad732',
        'gray-darker': '#232735',
        'gray-dark': '#3a3f51',
        'gray': '#dde6e9',
        'gray-light': '#e4eaec',
        'gray-lighter': '#edf1f2'
    });
})();
/**=========================================================
* Module: colors.js
* Services to retrieve global colors
=========================================================*/
(function () {
    'use strict';

    angular.module('app.colors').service('Colors', Colors);
    Colors.$inject = ['APP_COLORS'];

    function Colors(APP_COLORS) {
        this.byName = byName;
        ////////////////
        function byName(name) {
            return APP_COLORS[name] || '#fff';
        }
    }
})();
(function () {
    'use strict';

    angular.module('app.core').config(coreConfig);
    coreConfig.$inject = ['$controllerProvider', '$compileProvider', '$filterProvider', '$provide', '$permissionProvider'];

    function coreConfig($controllerProvider, $compileProvider, $filterProvider, $provide, $permissionProvider) {
        const core = angular.module('app.core');
        // registering components after bootstrap
        $compileProvider.aHrefSanitizationWhitelist(/^\s*(https?|geneious|onenote|mailto|file):/);
        core.controller = $controllerProvider.register;
        core.directive = $compileProvider.directive;
        core.filter = $filterProvider.register;
        core.factory = $provide.factory;
        core.service = $provide.service;
        core.constant = $provide.constant;
        core.value = $provide.value;
        $permissionProvider.suppressUndefinedPermissionWarning(true);
    }
})();
/**=========================================================
* Module: constants.js
* Define constants to inject across the application
=========================================================*/
(function () {
    'use strict';

    angular.module('app.core').constant('APP_MEDIAQUERY', {
        'desktopLG': 1200,
        'desktop': 992,
        'tablet': 768,
        'mobile': 480
    });
})();
(function () {
    'use strict';

    angular.module('app.core').run(appRun);
    appRun.$inject = ['$rootScope', '$state', '$stateParams', '$window', 'Colors', 'PermPermissionStore', '$transitions', 'Global', 'AuthenticationService', '$urlRouter'];

    function appRun($rootScope, $state, $stateParams, $window, Colors, PermPermissionStore, $transitions, Global, AuthenticationService, $urlRouter) {
        // function appRun($rootScope, $state, $stateParams, $window, $templateCache, Colors) {
        // Set reference to access them from any scope
        $rootScope.$state = $state;
        $rootScope.$stateParams = $stateParams;
        $rootScope.$storage = $window.localStorage;
        $rootScope.colorByName = Colors.byName;
        $rootScope.gatewayUrl = Global.gateway;
        // cancel click event easily
        $rootScope.cancel = function ($event) {
            $event.stopPropagation();
        };
        // stateChange deprecated
        // Hook not found
        // $rootScope.$on('$stateNotFound',
        //     function (event, unfoundState /*, fromState, fromParams*/) {
        //         console.log(unfoundState.to); // "lazy.state"
        //         console.log(unfoundState.toParams); // {a:1, b:2}
        //         console.log(unfoundState.options); // {inherit:false} + default options
        //     });
        // // Hook error
        // $rootScope.$on('$stateChangeError',
        //     function (event, toState, toParams, fromState, fromParams, error) {
        //         console.log(error);
        //     });
        // $rootScope.$on('$stateChangeSuccess',
        //     function (event, toState, toParams, fromState, fromParams) {
        //         $window.scrollTo(0, 0);
        //         $rootScope.currTitle = $state.current.title;
        //         // Attach prev state.
        //         // console.log("saving prev state:", fromState.name);
        //         $rootScope.prevState = fromState.name;
        //     });
        //////////////////////////////////////////

        // updated in ui-router 1.0, use transitions API
        $transitions.onError({}, function ($transition) {
            console.log($transition.error());
        });
        $transitions.onSuccess({}, function ($transition) {
            $window.scrollTo(0, 0);
            $rootScope.pageTitle = "SystImmune LIMS - " + $state.current.title;
            $rootScope.prevState = $transition.$from().name;
        });
        // Permissions setup
        // Get from session output
        AuthenticationService.CacheUser().then(() => {
            PermPermissionStore.definePermission('isAuthenticated', function () {
                return Global.authenticated;
            });
            PermPermissionStore.defineManyPermissions(Global.permissions, permissionName => {
                return _.includes(Global.permissions, permissionName);
            });
            // Start loading router after permissions have been set up
            $urlRouter.sync();
            $urlRouter.listen();
        });
    }
})();
(function () {
    'use strict';

    angular.module('systimu').factory('AuthenticationService', ['$http', 'Global', '$urlRouter', function ($http, Global, $urlRouter) {
        let cached = false;
        return {
            CacheUser: CacheUser
        };

        function CacheUser() {
            if (cached) {
                return Promise.resolve();
            }
            return $http.get(Global.gateway + '/status').then(details => {
                if (details && details.status === 200) {
                    Global.user = details.data.user;
                    Global.permissions = details.data.permissions;
                    Global.preferences = details.data.user.UserPreference || {};
                    Global.server = details.data.info.hostname;
                    Global.env = details.data.info.env;
                    Global.helperAPI = details.data.info.helperAPI;
                    Global.authenticated = true;
                    cached = false;
                }
                return Promise.resolve();
            }, () => {
                $urlRouter.sync();
                $urlRouter.listen();
                return Promise.reject();
            });
        }
    }]);
})();
(function () {
    'use strict';

    angular.module('systimu').factory('PermissionService', ['PermPermissionStore', function (PermPermissionStore) {
        return {
            checkPermission: checkPermission
        };

        function checkPermission(perm) {
            return PermPermissionStore.getPermissionDefinition(perm);
        }
    }]);
})();
/**=========================================================
* Module: skycons.js
* Include any animated weather icon from Skycons
=========================================================*/
(function () {
    'use strict';

    angular.module('app.icons').directive('skycon', skycon);

    function skycon() {
        const directive = {
            link: link,
            restrict: 'A'
        };
        return directive;

        function link(scope, element, attrs) {
            const skycons = new Skycons({ 'color': attrs.color || 'white' });
            element.html('<canvas width="' + attrs.width + '" height="' + attrs.height + '"></canvas>');
            skycons.add(element.children()[0], attrs.skycon);
            skycons.play();
        }
    }
})();
(function () {
    'use strict';

    angular.module('app.lazyload').config(lazyloadConfig);
    lazyloadConfig.$inject = ['$ocLazyLoadProvider', 'APP_REQUIRES'];

    function lazyloadConfig($ocLazyLoadProvider, APP_REQUIRES) {
        // Lazy Load modules configuration
        $ocLazyLoadProvider.config({
            debug: false,
            events: true,
            modules: APP_REQUIRES.modules
        });
    }
})();
(function () {
    'use strict';

    angular.module('app.lazyload').constant('APP_REQUIRES', {
        // jQuery based and standalone scripts
        scripts: {
            'whirl': ['vendor/whirl/dist/whirl.css'],
            'classyloader': ['vendor/jquery-classyloader/js/jquery.classyloader.min.js'],
            'animo': ['vendor/animo.js/animo.js'],
            'fastclick': ['vendor/fastclick/lib/fastclick.js'],
            'modernizr': ['vendor/modernizr/modernizr.js'],
            'animate': ['vendor/animate.css/animate.min.css'],
            'skycons': ['vendor/skycons/skycons.js'],
            'icons': ['vendor/fontawesome/css/fontawesome-all.min.css', 'vendor/simple-line-icons/css/simple-line-icons.css'],
            'weather-icons': ['vendor/weather-icons/css/weather-icons.min.css'],
            'sparklines': ['vendor/sparklines/jquery.sparkline.min.js'],
            'wysiwyg': ['vendor/bootstrap-wysiwyg/bootstrap-wysiwyg.js', 'vendor/bootstrap-wysiwyg/external/jquery.hotkeys.js'],
            'slimscroll': ['vendor/slimScroll/jquery.slimscroll.min.js'],
            'screenfull': ['vendor/screenfull/dist/screenfull.js'],
            'vector-map': ['vendor/ika.jvectormap/jquery-jvectormap-1.2.2.min.js', 'vendor/ika.jvectormap/jquery-jvectormap-1.2.2.css'],
            'vector-map-maps': ['vendor/ika.jvectormap/jquery-jvectormap-world-mill-en.js', 'vendor/ika.jvectormap/jquery-jvectormap-us-mill-en.js'],
            'flot-chart': ['vendor/Flot/jquery.flot.js'],
            'flot-chart-plugins': ['vendor/flot.tooltip/js/jquery.flot.tooltip.min.js', 'vendor/Flot/jquery.flot.resize.js', 'vendor/Flot/jquery.flot.pie.js', 'vendor/Flot/jquery.flot.time.js', 'vendor/Flot/jquery.flot.categories.js', 'vendor/flot-spline/js/jquery.flot.spline.min.js'],
            // jquery core and widgets
            'jquery-ui': ['vendor/jquery-ui/ui/core.js', 'vendor/jquery-ui/ui/widget.js'],
            // loads only jquery required modules and touch support
            'jquery-ui-widgets': ['vendor/jquery-ui/ui/core.js', 'vendor/jquery-ui/ui/widget.js', 'vendor/jquery-ui/ui/mouse.js', 'vendor/jquery-ui/ui/draggable.js', 'vendor/jquery-ui/ui/droppable.js', 'vendor/jquery-ui/ui/sortable.js', 'vendor/jqueryui-touch-punch/jquery.ui.touch-punch.min.js'],
            'moment': ['vendor/moment/min/moment-with-locales.min.js'],
            'inputmask': ['vendor/jquery.inputmask/dist/jquery.inputmask.bundle.min.js'],
            'codemirror': ['vendor/codemirror/lib/codemirror.js', 'vendor/codemirror/lib/codemirror.css'],
            // modes for common web files
            'codemirror-modes-web': ['vendor/codemirror/mode/javascript/javascript.js', 'vendor/codemirror/mode/xml/xml.js', 'vendor/codemirror/mode/htmlmixed/htmlmixed.js', 'vendor/codemirror/mode/css/css.js'],
            'codemirror-modes-sql': ['vendor/codemirror/mode/sql/sql.js'],
            'taginput': ['vendor/bootstrap-tagsinput/dist/bootstrap-tagsinput.css', 'vendor/bootstrap-tagsinput/dist/bootstrap-tagsinput.min.js'],
            'filestyle': ['vendor/bootstrap-filestyle/src/bootstrap-filestyle.js'],
            'sequence-viewer': ['lib/sequence-viewer/dist/sequence-viewer.min.js'],
            'parsley': ['vendor/parsleyjs/dist/parsley.min.js'],
            'fullcalendar': [
                // 'lib/moment/min/moment.min.js',
                // 'lib/fullcalendar/dist/fullcalendar.js',
                // 'lib/fullcalendar/dist/fullcalendar.css',
                // 'lib/fullcalendar-scheduler/dist/scheduler.min.css',
                // 'lib/fullcalendar-scheduler/dist/scheduler.js'
            ],
            'gcal': ['vendor/fullcalendar/dist/gcal.js'],
            'morris': ['vendor/raphael/raphael.js', 'vendor/morris.js/morris.js', 'vendor/morris.js/morris.css'],
            'loaders.css': ['vendor/loaders.css/loaders.css'],
            'spinkit': ['vendor/spinkit/css/spinkit.css'],
            'svg-pan-zoom': ['vendor/svg-pan-zoom/svg-pan-zoom.min.js']
        },
        // Angular based script (use the right module name)
        modules: [{
            name: 'toaster',
            files: ['vendor/angularjs-toaster/toaster.js', 'vendor/angularjs-toaster/toaster.css']
        }, {
            name: 'ngWig',
            files: ['vendor/ngWig/dist/ng-wig.min.js']
        }, {
            name: 'ngTable',
            files: ['vendor/ng-table/dist/ng-table.min.js', 'vendor/ng-table/dist/ng-table.min.css']
        }, {
            name: 'ngTableExport',
            files: ['vendor/ng-table-export/ng-table-export.js']
        }, {
            name: 'htmlSortable',
            files: ['vendor/html.sortable/dist/html.sortable.js', 'vendor/html.sortable/dist/html.sortable.angular.js']
        }, {
            name: 'angularFileUpload',
            files: ['vendor/angular-file-upload/angular-file-upload.js']
        }, {
            name: 'ngImgCrop',
            files: ['vendor/ng-img-crop/compile/unminified/ng-img-crop.js', 'vendor/ng-img-crop/compile/unminified/ng-img-crop.css']
        }, {
            name: 'ui.select',
            files: ['vendor/angular-ui-select/dist/select.js', 'vendor/angular-ui-select/dist/select.css']
        }, {
            name: 'ui.sortable',
            files: ['vendor/angular-ui-sortable/jquery-ui.min.css', 'vendor/angular-ui-sortable/jquery-ui.min.js', 'vendor/angular-ui-sortable/sortable.min.js']
        }, {
            name: 'ui.codemirror',
            files: ['vendor/angular-ui-codemirror/ui-codemirror.js']
        }, {
            name: 'angular-carousel',
            files: ['vendor/angular-carousel/dist/angular-carousel.css', 'vendor/angular-carousel/dist/angular-carousel.js']
        }, {
            name: 'ngGrid',
            files: ['vendor/ng-grid/build/ng-grid.min.js', 'vendor/ng-grid/ng-grid.css']
        }, {
            name: 'infinite-scroll',
            files: ['vendor/ngInfiniteScroll/build/ng-infinite-scroll.js']
        }, {
            name: 'ui.bootstrap-slider',
            files: ['vendor/seiyria-bootstrap-slider/dist/bootstrap-slider.min.js', 'vendor/seiyria-bootstrap-slider/dist/css/bootstrap-slider.min.css', 'vendor/angular-bootstrap-slider/slider.js']
        }, {
            name: 'ui.grid',
            files: ['vendor/angular-ui-grid/ui-grid.min.css', 'vendor/angular-ui-grid/ui-grid.min.js']
        }, {
            name: 'textAngular',
            files: ['vendor/textAngular/dist/textAngular.css', 'vendor/textAngular/dist/textAngular-rangy.min.js', 'vendor/textAngular/dist/textAngular-sanitize.js', 'vendor/textAngular/src/globals.js', 'vendor/textAngular/src/factories.js', 'vendor/textAngular/src/DOM.js', 'vendor/textAngular/src/validators.js', 'vendor/textAngular/src/taBind.js', 'vendor/textAngular/src/main.js', 'vendor/textAngular/dist/textAngularSetup.js'],
            serie: true
        }, {
            name: 'angular-rickshaw',
            files: ['vendor/d3/d3.min.js', 'vendor/rickshaw/rickshaw.js', 'vendor/rickshaw/rickshaw.min.css', 'vendor/angular-rickshaw/rickshaw.js'],
            serie: true
        }, {
            name: 'chartjs',
            files: ['vendor/Chart.js/Chart.min.js', 'vendor/Chart.js/angular-chart.min.js'],
            serie: true
        }, {
            name: 'angular-chartist',
            files: ['vendor/chartist/dist/chartist.min.css', 'vendor/chartist/dist/chartist.js', 'vendor/angular-chartist.js/dist/angular-chartist.js'],
            serie: true
        }, {
            name: 'ui.map',
            files: ['vendor/angular-ui-map/ui-map.js']
        }, {
            name: 'dndLists',
            files: ['vendor/angular-drag-and-drop-lists/dist/angular-drag-and-drop-lists.js']
        }, {
            name: 'angular-jqcloud',
            files: ['vendor/jqcloud2/dist/jqcloud.css', 'vendor/jqcloud2/dist/jqcloud.js', 'vendor/angular-jqcloud/angular-jqcloud.js']
        }, {
            name: 'angularGrid',
            files: ['vendor/ag-grid/dist/angular-grid.css', 'vendor/ag-grid/dist/angular-grid.js', 'vendor/ag-grid/dist/theme-dark.css', 'vendor/ag-grid/dist/theme-fresh.css']
        }, {
            name: 'ng-nestable',
            files: ['vendor/ng-nestable/src/angular-nestable.js', 'vendor/nestable/jquery.nestable.js']
        }, {
            name: 'akoenig.deckgrid',
            files: ['vendor/angular-deckgrid/angular-deckgrid.js']
        }, {
            name: 'oitozero.ngSweetAlert',
            files: ['vendor/sweetalert/dist/sweetalert.css', 'vendor/sweetalert/dist/sweetalert.min.js', 'vendor/angular-sweetalert/SweetAlert.js']
        }, {
            name: 'bm.bsTour',
            files: ['vendor/bootstrap-tour/build/css/bootstrap-tour.css', 'vendor/bootstrap-tour/build/js/bootstrap-tour-standalone.js', 'vendor/angular-bootstrap-tour/dist/angular-bootstrap-tour.js'],
            serie: true
        }]
    });
})();
(function () {
    'use strict';

    angular.module('app.loadingbar').config(loadingbarConfig);
    loadingbarConfig.$inject = ['cfpLoadingBarProvider'];

    function loadingbarConfig(cfpLoadingBarProvider) {
        cfpLoadingBarProvider.includeBar = true;
        cfpLoadingBarProvider.includeSpinner = false;
        cfpLoadingBarProvider.latencyThreshold = 500;
        cfpLoadingBarProvider.parentSelector = '.wrapper > section';
    }
})();
(function () {
    'use strict';

    angular.module('app.loadingbar').run(loadingbarRun);
    loadingbarRun.$inject = ['$rootScope', '$timeout', 'cfpLoadingBar'];

    function loadingbarRun($rootScope, $timeout, cfpLoadingBar) {
        // Loading bar transition
        // -----------------------------------
        let thBar;
        $rootScope.$on('$stateChangeStart', function () {
            if ($('.wrapper > section').length) {
                // check if bar container exists
                thBar = $timeout(function () {
                    cfpLoadingBar.start();
                }, 5); // sets a latency Threshold
            }
        });
        $rootScope.$on('$stateChangeSuccess', function (event) {
            event.targetScope.$watch('$viewContentLoaded', function () {
                $timeout(function () {
                    $timeout.cancel(thBar);
                    cfpLoadingBar.complete();
                }, 40);
            });
        });
    }
})();
(function () {
    'use strict';

    angular.module('app.locale').config(localeConfig);
    localeConfig.$inject = ['tmhDynamicLocaleProvider'];

    function localeConfig(tmhDynamicLocaleProvider) {
        tmhDynamicLocaleProvider.localeLocationPattern('vendor/angular-i18n/angular-locale_{{locale}}.js');
    }
})();
/**=========================================================
* Module: locale.js
* Demo for locale settings
=========================================================*/
(function () {
    'use strict';

    angular.module('app.locale').controller('LocalizationController', LocalizationController);
    LocalizationController.$inject = ['$rootScope', 'tmhDynamicLocale', '$locale'];

    function LocalizationController($rootScope, tmhDynamicLocale, $locale) {
        activate();
        ////////////////
        function activate() {
            $rootScope.availableLocales = {
                'en': 'English',
                'es': 'Spanish',
                'de': 'German',
                'fr': 'French',
                'ar': 'Arabic',
                'ja': 'Japanese',
                'ko': 'Korean',
                'zh': 'Chinese'
            };
            $rootScope.model = { selectedLocale: 'en' };
            $rootScope.$locale = $locale;
            $rootScope.changeLocale = tmhDynamicLocale.set;
        }
    }
})();
/**=========================================================
* Module: notify.js
* Directive for notify plugin
=========================================================*/
(function () {
    'use strict';

    angular.module('app.notify').directive('notify', notify);
    notify.$inject = ['Notify'];

    function notify(Notify) {
        const directive = {
            link: link,
            restrict: 'A',
            scope: {
                options: '=',
                message: '='
            }
        };
        return directive;

        function link(scope, element) {
            element.on('click', function (e) {
                e.preventDefault();
                Notify.alert(scope.message, scope.options);
            });
        }
    }
})();
/**=========================================================
* Module: notify.js
* Create a notifications that fade out automatically.
* Based on Notify addon from UIKit (http://getuikit.com/docs/addons_notify.html)
=========================================================*/
(function () {
    'use strict';

    angular.module('app.notify').service('Notify', Notify);
    Notify.$inject = ['$timeout'];

    function Notify($timeout) {
        this.alert = notifyAlert;
        ////////////////
        function notifyAlert(msg, opts) {
            if (msg) {
                $timeout(function () {
                    $.notify(msg, opts || {});
                });
            }
        }
    }
})();
/**
 * Notify Addon definition as jQuery plugin
 * Adapted version to work with Bootstrap classes
 * More information http://getuikit.com/docs/addons_notify.html
 */
(function ($) {
    'use strict';

    const containers = {},
          messages = {},
          notify = function (options) {
        if ($.type(options) === 'string') {
            options = { message: options };
        }
        if (arguments[1]) {
            options = $.extend(options, $.type(arguments[1]) === 'string' ? { status: arguments[1] } : arguments[1]);
        }
        return new Message(options).show();
    },
          closeAll = function (group, instantly) {
        let id;
        for (id in messages) {
            if (messages.hasOwnProperty(id)) {
                if (group && group === messages[id].group) {
                    messages[id].close(instantly);
                } else {
                    messages[id].close(instantly);
                }
            }
        }
    };
    var Message = function (options) {
        // var $this = this;
        this.options = $.extend({}, Message.defaults, options);
        this.uuid = 'ID' + new Date().getTime() + 'RAND' + Math.ceil(Math.random() * 100000);
        this.element = $([
        // @geedmo: alert-dismissable enables bs close icon
        '<div class="uk-notify-message alert-dismissable">', '<a class="close">&times;</a>', '<div>' + this.options.message + '</div>', '</div>'].join('')).data('notifyMessage', this);
        // status
        if (this.options.status) {
            this.element.addClass('alert alert-' + this.options.status);
            this.currentstatus = this.options.status;
        }
        this.group = this.options.group;
        messages[this.uuid] = this;
        if (!containers[this.options.pos]) {
            containers[this.options.pos] = $('<div class="uk-notify uk-notify-' + this.options.pos + '"></div>').appendTo('body').on('click', '.uk-notify-message', function () {
                $(this).data('notifyMessage').close();
            });
        }
    };
    $.extend(Message.prototype, {
        uuid: false,
        element: false,
        timout: false,
        currentstatus: '',
        group: false,
        show: function () {
            if (this.element.is(':visible')) {
                return;
            }
            var $this = this;
            containers[this.options.pos].show().prepend(this.element);
            var marginbottom = parseInt(this.element.css('margin-bottom'), 10);
            this.element.css({
                'opacity': 0,
                'margin-top': -1 * this.element.outerHeight(),
                'margin-bottom': 0
            }).animate({ 'opacity': 1, 'margin-top': 0, 'margin-bottom': marginbottom }, function () {
                if ($this.options.timeout) {
                    var closefn = function () {
                        $this.close();
                    };
                    $this.timeout = setTimeout(closefn, $this.options.timeout);
                    $this.element.hover(function () {
                        clearTimeout($this.timeout);
                    }, function () {
                        $this.timeout = setTimeout(closefn, $this.options.timeout);
                    });
                }
            });
            return this;
        },
        close: function (instantly) {
            const $this = this,
                  finalize = function () {
                $this.element.remove();
                if (!containers[$this.options.pos].children().length) {
                    containers[$this.options.pos].hide();
                }
                delete messages[$this.uuid];
            };
            if (this.timeout) {
                clearTimeout(this.timeout);
            }
            if (instantly) {
                finalize();
            } else {
                this.element.animate({
                    'opacity': 0,
                    'margin-top': -1 * this.element.outerHeight(),
                    'margin-bottom': 0
                }, function () {
                    finalize();
                });
            }
        },
        content: function (html) {
            const container = this.element.find('>div');
            if (!html) {
                return container.html();
            }
            container.html(html);
            return this;
        },
        status: function (status) {
            if (!status) {
                return this.currentstatus;
            }
            this.element.removeClass('alert alert-' + this.currentstatus).addClass('alert alert-' + status);
            this.currentstatus = status;
            return this;
        }
    });
    Message.defaults = {
        message: '',
        status: 'normal',
        timeout: 5000,
        group: null,
        pos: 'top-center'
    };
    $.notify = notify;
    $.notify.message = Message;
    $.notify.closeAll = closeAll;
    return notify;
})(jQuery);
// Disable preloader to make it seem faster
// (function () {
//     'use strict';
//     angular
//         .module('app.preloader')
//         .directive('preloader', preloader);
//     preloader.$inject = ['$animate', '$timeout', '$q'];

//     function preloader($animate, $timeout, $q) {
//         var directive = {
//             restrict: 'EAC',
//             template: '<div class="preloader-progress">' +
//             '<div class="preloader-progress-bar" ' +
//             'ng-style="{width: loadCounter + \'%\'}"></div>' +
//             '</div>',
//             link: link
//         };
//         return directive;
//         ///////
//         function link(scope, el) {
//             scope.loadCounter = 0;
//             var counter = 0,
//                 timeout;
//             // disables scrollbar
//             angular.element('body').css('overflow', 'hidden');
//             // ensure class is present for styling
//             el.addClass('preloader');
//             appReady().then(endCounter);
//             timeout = $timeout(startCounter);
//             ///////
//             function startCounter() {
//                 var remaining = 100 - counter;
//                 counter = counter + (0.015 * Math.pow(1 - Math.sqrt(remaining), 2));
//                 scope.loadCounter = parseInt(counter, 10);
//                 timeout = $timeout(startCounter, 20);
//             }

//             function endCounter() {
//                 $timeout.cancel(timeout);
//                 scope.loadCounter = 100;
//                 $timeout(function () {
//                     // animate preloader hiding
//                     $animate.addClass(el, 'preloader-hidden');
//                     // retore scrollbar
//                     angular.element('body').css('overflow', '');
//                 }, 300);
//             }

//             function appReady() {
//                 var deferred = $q.defer();
//                 var viewsLoaded = 0;
//                 var off = scope.$on('$viewContentLoaded', function () {
//                     viewsLoaded++;
//                     if (viewsLoaded === 2) {
//                         // with resolve this fires only once
//                         $timeout(function () {
//                             deferred.resolve();
//                         }, 10);
//                         off();
//                     }
//                 });
//                 return deferred.promise;
//             }
//         }
//     }
// })();
(function () {
    'use strict';

    angular.module('app.settings').run(settingsRun);
    settingsRun.$inject = ['$rootScope', 'Global', '$localStorage'];

    function settingsRun($rootScope, Global, $localStorage) {
        // Global Settings
        // -----------------------------------
        const intro = 'SystImmune LIMS';
        const version = '1';
        $rootScope.app = {
            name: intro,
            fullName: intro + ' v' + version,
            global: Global,
            description: 'Laboratory Information Management System',
            year: new Date().getFullYear(),
            layout: {
                isFixed: true,
                isCollapsed: false,
                isBoxed: false,
                isRTL: false,
                horizontal: false,
                isFloat: false,
                asideHover: false,
                theme: null,
                isCollapsedText: false,
                tableRows: 10
            },
            useFullLayout: false,
            hiddenFooter: false,
            offsidebarOpen: false,
            asideToggled: false,
            viewAnimation: 'ng-fadeInUp'
        };
        // Setup the layout mode
        $rootScope.app.layout.horizontal = $rootScope.$stateParams.layout === 'app-h';
        // Restore layout settings
        if (angular.isDefined($localStorage.layout)) {
            $rootScope.app.layout = $localStorage.layout;
        } else {
            $localStorage.layout = $rootScope.app.layout;
        }
        $rootScope.$watch('app.layout', function () {
            $localStorage.layout = $rootScope.app.layout;
        }, true);
        // Close submenu when sidebar change from collapsed to normal
        $rootScope.$watch('app.layout.isCollapsed', function (newValue) {
            if (newValue === false) {
                $rootScope.$broadcast('closeSidebarMenu');
            }
        });
    }
})();
/**=========================================================
* Module: helpers.js
* Provides helper functions for routes definition
=========================================================*/
(function () {
    'use strict';

    angular.module('app.routes').provider('RouteHelpers', RouteHelpersProvider);
    RouteHelpersProvider.$inject = ['APP_REQUIRES'];

    function RouteHelpersProvider(APP_REQUIRES) {
        /* jshint validthis:true */
        return {
            // provider access level
            basepath: basepath,
            resolveFor: resolveFor,
            // controller access level
            $get: function () {
                return {
                    basepath: basepath,
                    resolveFor: resolveFor
                };
            }
        };
        // Set here the base of the relative path
        // for all app views
        function basepath(uri) {
            return 'app/views/' + uri;
        }
        // Generates a resolve object by passing script names
        // previously configured in constant.APP_REQUIRES
        function resolveFor() {
            const _args = arguments;
            return {
                deps: ['$ocLazyLoad', '$q', function ($ocLL, $q) {
                    // This code will parallel load the dependancies
                    // var deps = []; // empty promise
                    // for (var i = 0, len = _args.length; i < len; i++) {
                    //     deps.push(getRequired(_args[i]));
                    // }
                    // return $ocLL.load(deps);
                    //
                    // Creates a promise chain for each argument
                    let promise = $q.when(1); // empty promise
                    let i = 0,
                        len = _args.length;
                    for (; i < len; i++) {
                        promise = andThen(_args[i]);
                    }
                    return promise;
                    // creates promise to chain dynamically
                    function andThen(_arg) {
                        // also support a function that returns a promise
                        if (typeof _arg === 'function') {
                            return promise.then(_arg);
                        }
                        return promise.then(function () {
                            // if is a module, pass the name. If not, pass the array
                            let whatToLoad = getRequired(_arg);
                            // simple error check
                            if (!whatToLoad) {
                                return $.error('Route resolve: Bad resource name [' + _arg + ']');
                            }
                            // finally, return a promise
                            return $ocLL.load(whatToLoad);
                        });
                    }
                    // check and returns required data
                    // analyze module items with the form [name: '', files: []]
                    // and also simple array of script files (for not angular js)
                    function getRequired(name) {
                        if (APP_REQUIRES.modules) {
                            for (let m in APP_REQUIRES.modules) {
                                if (APP_REQUIRES.modules[m].name && APP_REQUIRES.modules[m].name === name) {
                                    return APP_REQUIRES.modules[m];
                                }
                            }
                        }
                        return APP_REQUIRES.scripts && APP_REQUIRES.scripts[name];
                    }
                }]
            };
        } // resolveFor
    }
})();
/**=========================================================
* Module: config.js
* App routes and resources configuration
=========================================================*/
(function () {
    'use strict';

    angular.module('app.routes').config(routesConfig);
    routesConfig.$inject = ['$stateProvider', '$locationProvider', '$urlRouterProvider', '$urlMatcherFactoryProvider', 'RouteHelpersProvider'];

    function routesConfig($stateProvider, $locationProvider, $urlRouterProvider, $urlMatcherFactoryProvider, helper) {
        $urlMatcherFactoryProvider.strictMode(false);
        // Set the following to true to enable the HTML5 Mode
        // You may have to set <base> tag in index and a routing configuration in your server
        $locationProvider.html5Mode(false);
        $urlRouterProvider.otherwise('/');
        $urlRouterProvider.deferIntercept();
        //
        // Application Routes
        // -----------------------------------
        $stateProvider.state('home', {
            url: '/',
            title: 'Home',
            controller: 'HomeController',
            templateUrl: 'app/pages/home.html',
            resolve: helper.resolveFor()
        }).state('app', {
            url: '/app',
            abstract: true,
            templateUrl: helper.basepath('app.html'),
            resolve: helper.resolveFor('fastclick', 'animo', 'filestyle'),
            data: {
                permissions: {
                    only: 'isAuthenticated',
                    redirectTo: 'home'
                }
            }
        }).state('app.home', {
            url: '/home',
            title: 'Home',
            controller: 'LandingHomeController',
            templateUrl: helper.basepath('home.html'),
            resolve: helper.resolveFor()
        }).state('app.facilities.scheduling', {
            url: '/scheduling',
            title: 'Equipment Scheduling',
            controller: 'SchedulingController',
            templateUrl: helper.basepath('partials/scheduling.html'),
            resolve: helper.resolveFor('fullcalendar'),
            data: {
                permissions: {
                    only: ['readScheduling', 'adminScheduling'],
                    redirectTo: 'page.permissionDenied'
                }
            }
        }).state('app.TimePerProject', {
            url: '/time',
            title: 'Time Per Project',
            controller: 'TimeProjectController',

            templateUrl: helper.basepath('partials/TimePerProject.html'),
            resolve: helper.resolveFor() //,
            //data: {
            //    permissions: {
            //        //only: ['readScheduling', 'adminScheduling'],
            //        //redirectTo: 'page.permissionDenied'
            //    }
            //}
        }).state('app.email', {
            url: '/email',
            title: 'Email',
            controller: 'EmailController',
            templateUrl: helper.basepath('email.html'),
            resolve: helper.resolveFor()

        }).state('app.Inventory', {
            url: '/inventory',
            title: 'Inventory',
            controller: 'InventoryController',

            templateUrl: helper.basepath('partials/Inventory.html'),
            resolve: helper.resolveFor() //,
            //data: {
            //    permissions: {
            //        //only: ['readScheduling', 'adminScheduling'],
            //        //redirectTo: 'page.permissionDenied'
            //    }
            //}
        }).state('app.research', {
            url: '/research',
            title: 'Research',
            controller: 'ResearchController',
            templateUrl: helper.basepath('research.html'),
            resolve: helper.resolveFor(),
            data: {
                permissions: {
                    only: ['readResearch', 'adminResearch', 'readPurification'],
                    redirectTo: 'page.permissionDenied'
                }
            }
        }).state('app.research.proteinSummary', {
            url: '/proteinSummary?op&id',
            title: 'Protein Summary',
            params: {
                op: { dynamic: true },
                id: { dynamic: true }
            },
            controller: 'ProteinSummaryController',
            templateUrl: helper.basepath('partials/proteinSummary.html'),
            resolve: helper.resolveFor(),
            data: {
                permissions: {
                    only: ['readResearch', 'adminResearch'],
                    redirectTo: 'page.permissionDenied'
                }
            }
        }).state('app.research.constructRequest', {
            url: '/constructRequest?op&id',
            title: 'Construct Requests',
            controller: 'ConstructRequestController',
            templateUrl: helper.basepath('partials/constructRequest.html'),
            resolve: helper.resolveFor(),
            data: {
                permissions: {
                    only: ['readResearch', 'adminResearch'],
                    redirectTo: 'page.permissionDenied'
                }
            }
        }).state('app.research.constructStatus', {
            url: '/constructStatus?op&id',
            title: 'Construct Request Status',
            controller: 'ConstructStatusController',
            templateUrl: helper.basepath('partials/constructStatus.html'),
            resolve: helper.resolveFor(),
            data: {
                permissions: {
                    only: ['readResearch', 'adminResearch'],
                    redirectTo: 'page.permissionDenied'
                }
            }
        }).state('app.research.plasmids', {
            url: '/plasmids?op&id',
            title: 'Plasmids',
            controller: 'PlasmidsController',
            templateUrl: helper.basepath('partials/plasmids.html'),
            resolve: helper.resolveFor('filestyle'),
            data: {
                permissions: {
                    only: ['readResearch', 'adminResearch'],
                    redirectTo: 'page.permissionDenied'
                }
            }
        }).state('app.research.transfectionRequests', {
            url: '/transfectionRequests?op&id',
            title: 'Transfection Requests',
            controller: 'TransfectionRequestsController',
            templateUrl: helper.basepath('partials/transfectionRequest.html'),
            resolve: helper.resolveFor(),
            data: {
                permissions: {
                    only: ['readResearch', 'adminResearch'],
                    redirectTo: 'page.permissionDenied'
                }
            }
        }).state('app.research.transfections', {
            url: '/transfections?op&id',
            title: 'Transfections',
            controller: 'TransfectionsController',
            templateUrl: helper.basepath('partials/transfection.html'),
            resolve: helper.resolveFor(),
            data: {
                permissions: {
                    only: ['readResearch', 'adminResearch'],
                    redirectTo: 'page.permissionDenied'
                }
            }
        }).state('app.research.proteins', {
            url: '/proteins?op&id',
            title: 'Proteins',
            controller: 'ProteinsController',
            templateUrl: helper.basepath('partials/proteins.html'),
            resolve: helper.resolveFor('sequence-viewer'),
            data: {
                permissions: {
                    only: ['readResearch', 'adminResearch'],
                    redirectTo: 'page.permissionDenied'
                }
            }
        }).state('app.research.proteinPurification', {
            url: '/proteinPurification?op&id',
            title: 'Protein Purifications',
            controller: 'ProteinPurificationController',
            templateUrl: helper.basepath('partials/proteinPurification.html'),
            resolve: helper.resolveFor(),
            data: {
                permissions: {
                    only: ['readResearch', 'adminResearch', 'readPurification'],
                    redirectTo: 'page.permissionDenied'
                }
            }
        }).state('app.research.proteinRequest', {
            url: '/proteinRequest?op&id',
            title: 'Protein Requests',
            controller: 'ProteinRequestController',
            templateUrl: helper.basepath('partials/proteinRequest.html'),
            resolve: helper.resolveFor(),
            data: {
                permissions: {
                    only: ['readResearch', 'adminResearch'],
                    redirectTo: 'page.permissionDenied'
                }
            }
        }).state('app.research.stableCellLine', {
            url: '/stableCellLine?op&id',
            title: 'Stable Cell Lines',
            controller: 'StableCellLineController',
            templateUrl: helper.basepath('partials/stableCellLine.html'),
            resolve: helper.resolveFor(),
            data: {
                permissions: {
                    only: ['readResearch', 'adminResearch'],
                    redirectTo: 'page.permissionDenied'
                }
            }
        }).state('app.research.proteinAnalysisRequest', {
            url: '/proteinAnalysisRequest?op&id',
            title: 'Protein Analysis Requests',
            controller: 'ProteinAnalysisRequestController',
            templateUrl: helper.basepath('partials/proteinAnalysisRequest.html'),
            resolve: helper.resolveFor(),
            data: {
                permissions: {
                    only: ['readResearch', 'adminResearch'],
                    redirectTo: 'page.permissionDenied'
                }
            }
        }).state('app.research.proteinAnalysis', {
            url: '/proteinAnalysis?op&id',
            title: 'Protein Analytics',
            controller: 'ProteinAnalysisController',
            templateUrl: helper.basepath('partials/proteinAnalysis.html'),
            resolve: helper.resolveFor('filestyle'),
            data: {
                permissions: {
                    only: ['readResearch', 'adminResearch'],
                    redirectTo: 'page.permissionDenied'
                }
            }
        }).state('app.research.bindingData', {
            url: '/bindingData?op&id',
            title: 'Protein Binding Data',
            controller: 'ProteinBindingDataController',
            templateUrl: helper.basepath('partials/bindingData.html'),
            resolve: helper.resolveFor('filestyle'),
            data: {
                permissions: {
                    only: ['readResearch', 'adminResearch'],
                    redirectTo: 'page.permissionDenied'
                }
            }
        }).state('app.research.kineticRequest', {
            url: '/kineticRequest?op&id',
            title: 'Kinetic Request',
            controller: 'KineticRequestsController',
            templateUrl: helper.basepath('partials/kineticRequests.html'),
            resolve: helper.resolveFor(),
            data: {
                permissions: {
                    only: ['readResearch', 'adminResearch'],
                    redirectTo: 'page.permissionDenied'
                }
            }
        }).state('app.research.enums', {
            url: '/enums',
            title: 'Dropdown Editor',
            controller: 'EnumsController',
            templateUrl: helper.basepath('partials/enums.html'),
            resolve: helper.resolveFor('dndLists', 'htmlSortable')
        }).state('app.project', {
            url: '/projects',
            title: 'Projects',
            controller: 'ProjectsController',
            templateUrl: helper.basepath('project.html'),
            resolve: helper.resolveFor('sparklines'),
            data: {
                permissions: {
                    only: ['readProject', 'adminProject'],
                    redirectTo: 'page.permissionDenied'
                }
            }
        }).state('app.project.table', {
            url: '/table?op&id',
            title: 'All Projects',
            controller: 'ProjectTableController',
            templateUrl: helper.basepath('partials/projects.html'),
            resolve: helper.resolveFor()
        }).state('app.project.details', {
            url: '/details?id',
            title: 'Project Details',
            controller: 'ProjectDetailsController',
            templateUrl: helper.basepath('partials/project-details.html'),
            resolve: helper.resolveFor()
        }).state('app.project.enums', {
            url: '/enums',
            title: 'Dropdown Editor',
            controller: 'EnumsController',
            templateUrl: helper.basepath('partials/enums.html'),
            resolve: helper.resolveFor('dndLists', 'htmlSortable')
        }).state('app.ade', {
            url: '/ade',
            title: 'ADE',
            controller: 'AdeController',
            templateUrl: helper.basepath('ade.html'),
            resolve: helper.resolveFor(),
            data: {
                permissions: {
                    only: ['readADE', 'adminADE'],
                    redirectTo: 'page.permissionDenied'
                }
            }
        }).state('app.ade.bCellSource', {
            url: '/bCellSource?op&id',
            title: 'B Cell Sources',
            controller: 'BCellSourceController',
            templateUrl: helper.basepath('partials/bCellSource.html'),
            resolve: helper.resolveFor()
        }).state('app.ade.mixCondition', {
            url: '/mixCondition?op&id',
            title: 'Mix Conditions',
            controller: 'MixConditionController',
            templateUrl: helper.basepath('partials/mixCondition.html'),
            resolve: helper.resolveFor()
        }).state('app.ade.sort', {
            url: '/sort?op&id',
            title: 'Sorts',
            controller: 'SortController',
            templateUrl: helper.basepath('partials/sort.html'),
            resolve: helper.resolveFor()
        }).state('app.ade.bCCPlate', {
            url: '/bCCPlate?op&id',
            title: 'BCC Plates',
            controller: 'BCCPlateController',
            templateUrl: helper.basepath('partials/bCCPlate.html'),
            resolve: helper.resolveFor()
        }).state('app.ade.supernatentPlate', {
            url: '/supernatentPlate?op&id',
            title: 'Supernatent Plate',
            controller: 'SupernatentPlateController',
            templateUrl: helper.basepath('partials/supernatentPlate.html'),
            resolve: helper.resolveFor()
        }).state('app.ade.activation', {
            url: '/activation?op&id',
            title: 'Activation',
            controller: 'ActivationController',
            templateUrl: helper.basepath('partials/activation.html'),
            resolve: helper.resolveFor()
        }).state('app.ade.wellRescue', {
            url: '/wellRescue?op&id',
            title: 'Well Rescues',
            controller: 'WellRescueController',
            templateUrl: helper.basepath('partials/wellRescue.html'),
            resolve: helper.resolveFor()
        }).state('app.ade.cloningAndSequence', {
            url: '/cloningAndSequence?op&id',
            title: 'Cloning And Sequences',
            controller: 'CloningAndSequenceController',
            templateUrl: helper.basepath('partials/cloningAndSequence.html'),
            resolve: helper.resolveFor()
        }).state('app.ade.discoveryPlasmid', {
            url: '/discoveryPlasmid?op&id',
            title: 'Discovery Plasmid',
            controller: 'DiscoveryPlasmidController',
            templateUrl: helper.basepath('partials/discoveryPlasmid.html'),
            resolve: helper.resolveFor()
        }).state('app.ade.humanizationPlasmid', {
            url: '/humanizationPlasmid?op&id',
            title: 'Humanization Plasmids',
            controller: 'HumanizationPlasmidController',
            templateUrl: helper.basepath('partials/humanizationPlasmid.html'),
            resolve: helper.resolveFor()
        }).state('app.ade.discoveryTransfection', {
            url: '/discoveryTransfection?op&id',
            title: 'Discovery Transfections',
            controller: 'DiscoveryTransfectionController',
            templateUrl: helper.basepath('partials/discoveryTransfection.html'),
            resolve: helper.resolveFor()
        }).state('app.ade.humanizationTransfection', {
            url: '/humanizationTransfection?op&id',
            title: 'Humanization Transfections',
            controller: 'HumanizationTransfectionController',
            templateUrl: helper.basepath('partials/humanizationTransfection.html'),
            resolve: helper.resolveFor()
        }).state('app.ade.transfectionRequest', {
            url: '/transfectionRequest?op&id',
            title: 'Transfection Request',
            controller: 'ADTransfectionRequestController',
            templateUrl: helper.basepath('partials/adTransfectionRequest.html'),
            resolve: helper.resolveFor()
        }).state('app.ade.enums', {
            url: '/enums',
            title: 'Dropdown Editor',
            controller: 'EnumsController',
            templateUrl: helper.basepath('partials/enums.html'),
            resolve: helper.resolveFor('dndLists', 'htmlSortable')
        }).state('app.io', {
            url: '/io',
            title: 'Immuno-Oncology',
            controller: 'IoController',
            templateUrl: helper.basepath('io.html'),
            resolve: helper.resolveFor(),
            data: {
                permissions: {
                    only: ['readIO', 'adminIO'],
                    redirectTo: 'page.permissionDenied'
                }
            }
        }).state('app.io.task', {
            url: '/task?op&id',
            title: 'Tasks',
            controller: 'IOTaskController',
            templateUrl: helper.basepath('partials/task.html'),
            resolve: helper.resolveFor()
        }).state('app.io.reagent', {
            url: '/reagent?op&id',
            title: 'Reagents',
            controller: 'ReagentController',
            templateUrl: helper.basepath('partials/reagent.html'),
            resolve: helper.resolveFor()
        }).state('app.io.enums', {
            url: '/enums',
            title: 'Dropdown Editor',
            controller: 'EnumsController',
            templateUrl: helper.basepath('partials/enums.html'),
            resolve: helper.resolveFor('dndLists', 'htmlSortable')
        }).state('app.ct', {
            url: '/ct',
            title: 'Cell Therapy',
            controller: 'CellTherapyController',
            templateUrl: helper.basepath('cellTherapy.html'),
            resolve: helper.resolveFor(),
            data: {
                permissions: {
                    only: ['readCellTherapy', 'adminCellTherapy'],
                    redirectTo: 'page.permissionDenied'
                }
            }
        }).state('app.ct.cellSource', {
            url: '/cellSource?op&id',
            title: 'Cell Source',
            controller: 'CTCellSourceController',
            templateUrl: helper.basepath('partials/cellSource.html'),
            resolve: helper.resolveFor('filestyle')
        }).state('app.ct.donor', {
            url: '/donor?op&id',
            title: 'Donor',
            controller: 'DonorController',
            templateUrl: helper.basepath('partials/donor.html'),
            resolve: helper.resolveFor()
        }).state('app.ct.freeze', {
            url: '/freeze?op&id',
            title: 'Cell Freeze Log',
            controller: 'CTFreezeController',
            templateUrl: helper.basepath('partials/ctFreeze.html'),
            resolve: helper.resolveFor()
        }).state('app.ct.thaw', {
            url: '/thaw?op&id',
            title: 'Cell Thaw Log',
            controller: 'CellThawController',
            templateUrl: helper.basepath('partials/ctThaw.html'),
            resolve: helper.resolveFor()
        }).state('app.ct.experiment', {
            url: '/experiment?op&id',
            title: 'Experiments',
            controller: 'CTExperimentsController',
            templateUrl: helper.basepath('partials/ctExperiment.html'),
            resolve: helper.resolveFor()
        }).state('app.ct.vessel', {
            url: '/vessel?op&id',
            title: 'Vessels',
            controller: 'CTVesselController',
            templateUrl: helper.basepath('partials/ctVessel.html'),
            resolve: helper.resolveFor()
        }).state('app.ct.chemData', {
            url: '/chemData?op&id',
            title: 'Bioreactor Chem Data',
            controller: 'CTChemDataController',
            templateUrl: helper.basepath('partials/ctChemData.html'),
            resolve: helper.resolveFor('filestyle')
        }).state('app.ct.enums', {
            url: '/enums',
            title: 'Dropdown Editor',
            controller: 'EnumsController',
            templateUrl: helper.basepath('partials/enums.html'),
            resolve: helper.resolveFor('dndLists', 'htmlSortable')
        }).state('app.pd', {
            url: '/pd',
            title: 'PD',
            controller: 'PdController',
            templateUrl: helper.basepath('pd.html'),
            resolve: helper.resolveFor(),
            data: {
                permissions: {
                    only: ['readPD', 'adminPD'],
                    redirectTo: 'page.permissionDenied'
                }
            }
        }).state('app.pd.bioreactor', {
            url: '/bioreactor?op&id',
            title: 'Bioreactors',
            controller: 'BioreactorController',
            templateUrl: helper.basepath('partials/bioreactor.html'),
            resolve: helper.resolveFor()
        }).state('app.pd.bioreactorGraph', {
            url: '/bioreactorGraph?property&id&tab',
            title: 'Bioreactor Graphs',
            controller: 'BioreactorGraphController',
            templateUrl: helper.basepath('partials/bioreactorGraph.html'),
            resolve: helper.resolveFor()
        }).state('app.pd.bioreactorChemData', {
            url: '/bioreactorChemData?op&id',
            title: 'Bioreactor Chem Data',
            controller: 'BioreactorChemDataController',
            templateUrl: helper.basepath('partials/bioreactorChemData.html'),
            resolve: helper.resolveFor('filestyle')
        }).state('app.pd.bioreactorVCDData', {
            url: '/bioreactorVCDData?op&id',
            title: 'Bioreactor VCD Data',
            controller: 'BioreactorVCDDataController',
            templateUrl: helper.basepath('partials/bioreactorVCDData.html'),
            resolve: helper.resolveFor('filestyle')
        }).state('app.pd.bioreactorCondition', {
            url: '/bioreactorCondition?op&id',
            title: 'Bioreactor Conditions',
            controller: 'BioreactorConditionController',
            templateUrl: helper.basepath('partials/bioreactorCondition.html'),
            resolve: helper.resolveFor()
        }).state('app.pd.bioreactorExperiment', {
            url: '/bioreactorExperiment?op&id',
            title: 'Bioreactor Experiments',
            controller: 'BioreactorExperimentController',
            templateUrl: helper.basepath('partials/bioreactorExperiment.html'),
            resolve: helper.resolveFor()
        }).state('app.pd.bioreactorPurification', {
            url: '/bioreactorPurification?op&id',
            title: 'Bioreactor Purifications',
            controller: 'BioreactorPurificationController',
            templateUrl: helper.basepath('partials/bioreactorPurification.html'),
            resolve: helper.resolveFor()
        }).state('app.pd.bioreactorAnalytic', {
            url: '/bioreactorAnalytic?op&id',
            title: 'Bioreactor Analytics',
            controller: 'BioreactorAnalyticsController',
            templateUrl: helper.basepath('partials/bioreactorAnalytic.html'),
            resolve: helper.resolveFor()
        }).state('app.pd.cellLineExperiment', {
            url: '/cellLineExperiment?op&id',
            title: 'Cell Line Experiments',
            controller: 'CellLineExperimentController',
            templateUrl: helper.basepath('partials/cellLineExperiment.html'),
            resolve: helper.resolveFor()
        }).state('app.pd.cellLineHarvest', {
            url: '/cellLineHarvest?op&id',
            title: 'Cell Line Harvests',
            controller: 'CellLineHarvestController',
            templateUrl: helper.basepath('partials/cellLineHarvest.html'),
            resolve: helper.resolveFor()
        }).state('app.pd.cellLinePurification', {
            url: '/cellLinePurification?op&id',
            title: 'Cell Line Purifications',
            controller: 'CellLinePurificationController',
            templateUrl: helper.basepath('partials/cellLinePurification.html'),
            resolve: helper.resolveFor()
        }).state('app.pd.cellLineAnalytic', {
            url: '/cellLineAnalytic?op&id',
            title: 'Cell Line Analytics',
            controller: 'CellLineAnalyticController',
            templateUrl: helper.basepath('partials/cellLineAnalytic.html'),
            resolve: helper.resolveFor()
        }).state('app.pd.cellLinePackage', {
            url: '/cellLinePackage?op&id',
            title: 'Cell Line Packages',
            controller: 'CellLinePackageController',
            templateUrl: helper.basepath('partials/cellLinePackage.html'),
            resolve: helper.resolveFor()
        }).state('app.pd.analysisRequest', {
            url: '/analysisRequest?op&id',
            title: 'Analytical Request',
            controller: 'PDAnalysisRequestController',
            templateUrl: helper.basepath('partials/pdAnalysisRequest.html'),
            resolve: helper.resolveFor('filestyle', 'ui.sortable')
        }).state('app.pd.pdAnalysis', {
            url: '/analysis?op&id',
            title: 'PD Analytics',
            controller: 'PDAnalysisController',
            templateUrl: helper.basepath('partials/pdAnalysis.html'),
            resolve: helper.resolveFor('filestyle')
        }).state('app.pd.cellExpansion', {
            url: '/cellExpansion?op&id',
            title: 'Cell Expansions',
            controller: 'CellExpansionController',
            templateUrl: helper.basepath('partials/cellExpansion.html'),
            resolve: helper.resolveFor()
        }).state('app.pd.cellExpansionData', {
            url: '/cellExpansionData?op&id',
            title: 'Cell Expansion Data',
            controller: 'CellExpansionDataController',
            templateUrl: helper.basepath('partials/cellExpansionData.html'),
            resolve: helper.resolveFor()
        }).state('app.pd.enums', {
            url: '/enums',
            title: 'Dropdown Editor',
            controller: 'EnumsController',
            templateUrl: helper.basepath('partials/enums.html'),
            resolve: helper.resolveFor('dndLists', 'htmlSortable')
        }).state('app.query', {
            url: '/query',
            title: 'Query',
            controller: 'QueriesController',
            templateUrl: helper.basepath('query.html'),
            resolve: helper.resolveFor('codemirror', 'ui.codemirror', 'codemirror-modes-sql', 'ngTable', 'ngTableExport')
        }).state('app.admin', {
            url: '/admin',
            title: 'Administration',
            controller: 'AdministrationController',
            controllerAs: 'dash3',
            templateUrl: helper.basepath('admin.html'),
            resolve: helper.resolveFor(),
            data: {
                permissions: {
                    only: 'adminUser',
                    redirectTo: 'page.permissionDenied'
                }
            }
        }).state('app.facilities', {
            url: '/facilities',
            title: 'Facilities',
            controller: 'FacilitiesController',
            templateUrl: helper.basepath('facilities.html'),
            resolve: helper.resolveFor(),
            data: {
                permissions: {
                    only: ['readFacilities', 'adminFacilities'],
                    redirectTo: 'page.permissionDenied'
                }
            }
        }).state('app.facilities.freezer', {
            url: '/freezer',
            title: 'Freezer',
            controller: 'FreezerController',
            templateUrl: helper.basepath('partials/freezer.html'),
            resolve: helper.resolveFor()
        }).state('app.facilities.map', {
            url: '/map',
            title: 'Map',
            controller: 'MapController',
            templateUrl: helper.basepath('partials/floorplan.html'),
            resolve: helper.resolveFor('svg-pan-zoom')
        }).state('app.facilities.network', {
            url: '/network',
            title: 'Network',
            controller: 'NetworkController',
            templateUrl: helper.basepath('partials/network.html'),
            resolve: helper.resolveFor()
        }).state('app.facilities.electrical', {
            url: '/electrical',
            title: 'Electrical',
            controller: 'ElectricalController',
            templateUrl: helper.basepath('partials/electrical.html'),
            resolve: helper.resolveFor('svg-pan-zoom')
        }).state('app.facilities.instrument', {
            url: '/instrument?op&id',
            title: 'instrument',
            controller: 'InstrumentController',
            templateUrl: helper.basepath('partials/instrument.html'),
            resolve: helper.resolveFor()
        }).state('app.facilities.enums', {
            url: '/enums',
            title: 'Dropdown Editor',
            controller: 'EnumsController',
            templateUrl: helper.basepath('partials/enums.html'),
            resolve: helper.resolveFor('dndLists', 'htmlSortable')
        })
        // Equipment Management Page - allows connection to FTE for later intergration
        // to the Accounting project
        .state('app.equipmentManagement', {
            url: '/equipmentManagement',
            title: 'Equipment Management',
            controller: 'AccountingController',
            templateUrl: helper.basepath('equipmentManagement.html'),
            resolve: helper.resolveFor(),
            data: {
                permissions: {
                    only: 'accountingUser',
                    redirectTo: 'page.permissionDenied'
                }
            }

        })
        // Page routing for accounting tab and the sub tabs associated
        // Allows users with user admin permissions to access these pages
        .state('app.accounting', {
            url: '/accounting',
            title: 'Accounting',
            controller: 'AccountingController',
            templateUrl: helper.basepath('accounting.html'),
            resolve: helper.resolveFor(),
            data: {
                permissions: {
                    only: 'accountingUser',
                    redirectTo: 'page.permissionDenied'
                }
            }
        })
        // First subpage of Accounting - Project Billing
        // This page allows users to view project billing, individual billing statements,
        // and upload new statements
        .state('app.accounting.accounting', {
            url: '/projectBilling?op&id',
            title: 'Project Billing',
            //controller: 'AccountingController',
            controller: 'accBillingController',
            templateUrl: helper.basepath('partials/accounting.html'),
            resolve: helper.resolveFor(),
            data: {
                permissions: {
                    only: ['accountingUser'],
                    redirectTo: 'page.permissionDenied'
                }
            }

        })
        // Second subpage of Accounting - Project Staffing
        // tracks staffing associated with each project and time dedicated by each person - FTE subpage
        .state('app.accounting.fte', {
            url: '/projectStaffing?op&id',
            title: 'Project Staffing',
            controller: 'ProjectStaffing',
            templateUrl: helper.basepath('partials/fte.html'),
            resolve: helper.resolveFor(),
            data: {
                permissions: {
                    only: ['accountingUser'],
                    redirectTo: 'page.permissionDenied'
                }
            }

        }).state('app.tools', {
            url: '/tools',
            abstract: true,
            resolve: helper.resolveFor()
        }).state('app.tools.humanization', {
            url: '/humanization',
            title: 'Humanization',
            controller: 'HumanizationController',
            templateUrl: helper.basepath('partials/humanization.html'),
            resolve: helper.resolveFor()
        }).state('app.tools.seqUtils', {
            url: '/seqUtils',
            title: 'Sequence Utilities',
            controller: 'SequenceUtilsController',
            templateUrl: helper.basepath('partials/seqUtils.html'),
            resolve: helper.resolveFor('sequence-viewer')
        }).state('app.tools.instrumentData', {
            url: '/instrumentData',
            title: 'Instrument Data',
            controller: 'InstrumentDataController',
            templateUrl: helper.basepath('partials/instrumentData.html'),
            resolve: helper.resolveFor()
        }).state('app.document', {
            url: '/document',
            title: 'Change Log',
            controller: 'DocumentController',
            templateUrl: helper.basepath('document.html'),
            resolve: helper.resolveFor()
        }).state('app.userSettings', {
            url: '/settings',
            title: 'Settings',
            controller: 'UserController',
            controllerAs: 'dash3',
            templateUrl: helper.basepath('user-settings.html'),
            resolve: helper.resolveFor()
        })
        //
        // Single Page Routes
        // -----------------------------------
        .state('page', {
            url: '/page',
            templateUrl: 'app/pages/page.html',
            resolve: helper.resolveFor(),
            controller: ['$rootScope', function ($rootScope) {
                $rootScope.app.layout.isBoxed = false;
            }]
        }).state('page.permissionDenied', {
            url: '/permissionDenied',
            title: 'Permission Denied',
            controller: 'PermissionDeniedController',
            templateUrl: 'app/pages/permissionDenied.html'
        }).state('page.signin', {
            url: '/signin',
            title: 'SignIn',
            templateUrl: 'app/pages/signin.html'
        }).state('page.404', {
            url: '/404',
            title: 'Not Found',
            templateUrl: 'app/pages/404.html'
        });
    }
})();
(function () {
    'use strict';

    angular.module('app.translate').config(translateConfig);
    translateConfig.$inject = ['$translateProvider'];

    function translateConfig($translateProvider) {
        $translateProvider.useStaticFilesLoader({
            prefix: 'app/i18n/',
            suffix: '.json'
        });
        $translateProvider.preferredLanguage('en');
        $translateProvider.useLocalStorage();
        $translateProvider.usePostCompiling(true);
        $translateProvider.useSanitizeValueStrategy('escape');
    }
})();
(function () {
    'use strict';

    angular.module('app.translate').run(translateRun);
    translateRun.$inject = ['$rootScope', '$translate'];

    function translateRun($rootScope, $translate) {
        // Internationalization
        // ----------------------
        $rootScope.language = {
            // Handles language dropdown
            listIsOpen: false,
            // list of available languages
            available: {
                'en': 'English',
                'cn': '简体中文 (Simplified Chinese)'
            },
            // display always the current ui language
            init: function () {
                const proposedLanguage = $translate.proposedLanguage() || $translate.use();
                const preferredLanguage = $translate.preferredLanguage(); // we know we have set a preferred one in app.config
                $rootScope.language.selected = $rootScope.language.available[proposedLanguage || preferredLanguage];
            },
            set: function (localeId) {
                // Set the new idiom
                $translate.use(localeId);
                // save a reference for the current language
                $rootScope.language.selected = $rootScope.language.available[localeId];
                // finally toggle dropdown
                $rootScope.language.listIsOpen = !$rootScope.language.listIsOpen;
            }
        };
        $rootScope.language.init();
    }
})();
/**=========================================================
* Module: animate-enabled.js
* Enable or disables ngAnimate for element with directive
=========================================================*/
(function () {
    'use strict';

    angular.module('app.utils').directive('animateEnabled', animateEnabled);
    animateEnabled.$inject = ['$animate'];

    function animateEnabled($animate) {
        return {
            link: link,
            restrict: 'A'
        };

        function link(scope, element, attrs) {
            scope.$watch(function () {
                return scope.$eval(attrs.animateEnabled, scope);
            }, function (newValue) {
                $animate.enabled(!!newValue, element);
            });
        }
    }
})();
/**=========================================================
* Module: browser.js
* Browser detection
=========================================================*/
(function () {
    'use strict';

    angular.module('app.utils').service('Browser', Browser);
    Browser.$inject = ['$window'];

    function Browser($window) {
        return $window.jQBrowser;
    }
})();
/**=========================================================
 * Module: filestyle.js
 * Initializes the fielstyle plugin
 =========================================================*/

(function () {
    'use strict';

    angular.module('app.utils').directive('filestyle', filestyle);

    function filestyle() {
        return {
            link: link,
            restrict: 'A'
        };

        function link(scope, element) {
            const options = element.data();
            // old usage support
            options.classInput = element.data('classinput') || options.classInput;
            element.filestyle(options);
        }
    }
})();
/**=========================================================
* Module: clear-storage.js
* Removes a key from the browser storage via element click
=========================================================*/
(function () {
    'use strict';

    angular.module('app.utils').directive('resetKey', resetKey);
    resetKey.$inject = ['$state', '$localStorage'];

    function resetKey($state, $localStorage) {
        return {
            link: link,
            restrict: 'A',
            scope: {
                resetKey: '@'
            }
        };

        function link(scope, element) {
            element.on('click', function (e) {
                e.preventDefault();
                if (scope.resetKey) {
                    delete $localStorage[scope.resetKey];
                    $state.go($state.current, {}, { reload: true });
                } else {
                    $.error('No storage key specified for reset.');
                }
            });
        }
    }
})();
/**=========================================================
* Module: load-css.js
* Request and load into the current page a css file
=========================================================*/
(function () {
    'use strict';

    angular.module('app.utils').directive('loadCss', loadCss);

    function loadCss() {
        return {
            link: link,
            restrict: 'A'
        };

        function link(scope, element, attrs) {
            element.on('click', function (e) {
                if (element.is('a')) {
                    e.preventDefault();
                }
                const uri = attrs.loadCss;
                let link;
                if (uri) {
                    link = createLink(uri);
                    if (!link) {
                        $.error('Error creating stylesheet link element.');
                    }
                } else {
                    $.error('No stylesheet location defined.');
                }
            });
        }

        function createLink(uri) {
            const linkId = 'autoloaded-stylesheet';
            const ele = $('#' + linkId);
            const oldLink = ele.attr('id', linkId + '-old');
            $('head').append($('<link/>').attr({
                'id': linkId,
                'rel': 'stylesheet',
                'href': uri
            }));
            if (oldLink.length) {
                oldLink.remove();
            }
            return ele;
        }
    }
})();
/**=========================================================
* Module: now.js
* Provides a simple way to display the current time formatted
=========================================================*/
(function () {
    'use strict';

    angular.module('app.utils').directive('now', now);
    now.$inject = ['dateFilter', '$interval'];

    function now(dateFilter, $interval) {
        return {
            link: link,
            restrict: 'EA'
        };

        function link(scope, element, attrs) {
            const format = attrs.format;

            function updateTime() {
                const dt = dateFilter(new Date(), format);
                element.text(dt);
            }
            updateTime();
            const intervalPromise = $interval(updateTime, 1000);
            scope.$on('$destroy', function () {
                $interval.cancel(intervalPromise);
            });
        }
    }
})();
/**=========================================================
* Module: table-checkall.js
* Tables check all checkbox
=========================================================*/
(function () {
    'use strict';

    angular.module('app.utils').directive('checkAll', checkAll);

    function checkAll() {
        return {
            link: link,
            restrict: 'A'
        };

        function link(scope, element) {
            element.on('change', function () {
                const $this = $(this),
                      index = $this.index() + 1,
                      checkbox = $this.find('input[type="checkbox"]'),
                      table = $this.parents('table');
                // Make sure to affect only the correct checkbox column
                table.find('tbody > tr > td:nth-child(' + index + ') input[type="checkbox"]').prop('checked', checkbox[0].checked);
            });
        }
    }
})();
/**=========================================================
* Module: trigger-resize.js
* Triggers a window resize event from any element
=========================================================*/
(function () {
    'use strict';

    angular.module('app.utils').directive('triggerResize', triggerResize);
    triggerResize.$inject = ['$window', '$timeout'];

    function triggerResize($window, $timeout) {
        return {
            link: link,
            restrict: 'A'
        };

        function link(scope, element) {
            element.on('click', function () {
                $timeout(function () {
                    $window.dispatchEvent(new Event('resize'));
                });
            });
        }
    }
})();
/**=========================================================
* Module: utils.js
* Utility library to use across the theme
=========================================================*/
(function () {
    'use strict';

    angular.module('app.utils').service('Utils', Utils);
    Utils.$inject = ['$window', 'APP_MEDIAQUERY'];

    function Utils($window, APP_MEDIAQUERY) {
        const $html = angular.element('html'),
              $win = angular.element($window),
              $body = angular.element('body');
        return {
            // DETECTION
            support: {
                transition: function () {
                    const transitionEnd = function () {
                        let element = document.body || document.documentElement,
                            transEndEventNames = {
                            WebkitTransition: 'webkitTransitionEnd',
                            MozTransition: 'transitionend',
                            OTransition: 'oTransitionEnd otransitionend',
                            transition: 'transitionend'
                        },
                            name;
                        for (name in transEndEventNames) {
                            if (element.style[name] !== undefined) {
                                return transEndEventNames[name];
                            }
                        }
                    }();
                    return transitionEnd && { end: transitionEnd };
                }(),
                animation: function () {
                    const animationEnd = function () {
                        let element = document.body || document.documentElement,
                            animEndEventNames = {
                            WebkitAnimation: 'webkitAnimationEnd',
                            MozAnimation: 'animationend',
                            OAnimation: 'oAnimationEnd oanimationend',
                            animation: 'animationend'
                        },
                            name;
                        for (name in animEndEventNames) {
                            if (element.style[name] !== undefined) {
                                return animEndEventNames[name];
                            }
                        }
                    }();
                    return animationEnd && { end: animationEnd };
                }(),
                requestAnimationFrame: window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || window.oRequestAnimationFrame || function (callback) {
                    window.setTimeout(callback, 1000 / 60);
                },
                /*jshint -W069*/
                touch: 'ontouchstart' in window && navigator.userAgent.toLowerCase().match(/mobile|tablet/) || window.DocumentTouch && document instanceof window.DocumentTouch || window.navigator['msPointerEnabled'] && window.navigator['msMaxTouchPoints'] > 0 || //IE 10
                window.navigator['pointerEnabled'] && window.navigator['maxTouchPoints'] > 0 || //IE >=11
                false,
                mutationobserver: window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver || null
            },
            // UTILITIES
            isInView: function (element, options) {
                /*jshint -W106*/
                const $element = $(element);
                if (!$element.is(':visible')) {
                    return false;
                }
                const window_left = $win.scrollLeft(),
                      window_top = $win.scrollTop(),
                      offset = $element.offset(),
                      left = offset.left,
                      top = offset.top;
                options = $.extend({ topoffset: 0, leftoffset: 0 }, options);
                return top + $element.height() >= window_top && top - options.topoffset <= window_top + $win.height() && left + $element.width() >= window_left && left - options.leftoffset <= window_left + $win.width();
            },
            langdirection: $html.attr('dir') === 'rtl' ? 'right' : 'left',
            isTouch: function () {
                return $html.hasClass('touch');
            },
            isSidebarCollapsed: function () {
                return $body.hasClass('aside-collapsed') || $body.hasClass('aside-collapsed-text');
            },
            isSidebarToggled: function () {
                return $body.hasClass('aside-toggled');
            },
            isMobile: function () {
                return $win.width() < APP_MEDIAQUERY.tablet;
            }
        };
    }
})();
/**=========================================================
* Module: sidebar-menu.js
* Handle sidebar collapsible elements
=========================================================*/
(function () {
    'use strict';

    angular.module('app.sidebar').controller('SidebarController', SidebarController);
    SidebarController.$inject = ['$rootScope', '$scope', '$state', 'SidebarLoader', 'Utils', 'Global', 'PermissionService'];

    function SidebarController($rootScope, $scope, $state, SidebarLoader, Utils, Global, PermissionService) {
        $scope.global = Global;
        activate();
        ////////////////
        function activate() {
            const collapseList = [];
            // demo: when switch from collapse to hover, close all items
            $rootScope.$watch('app.layout.asideHover', function (oldVal, newVal) {
                if (newVal === false && oldVal === true) {
                    closeAllBut(-1);
                }
            });
            // Load menu from json file
            // -----------------------------------
            SidebarLoader.getMenu(sidebarReady);

            function sidebarReady(items) {
                $scope.menuItems = items.data;
            }
            // Handle sidebar and collapse items
            // ----------------------------------
            $scope.getMenuItemPropClasses = function (item) {
                return (item.heading ? 'nav-heading' : '') + (isActive(item) ? ' active' : '');
            };
            $scope.addCollapse = function ($index, item) {
                collapseList[$index] = $rootScope.app.layout.asideHover ? true : !isActive(item);
            };
            $scope.isCollapse = function ($index) {
                return collapseList[$index];
            };
            // Not used, might be used later
            $scope.checkRolePerm = function (item) {
                if (item.permission) {
                    return PermissionService.checkPermission(item.permission);
                }
                if ($scope.global && $scope.global.user) {
                    return true;
                }
                // Not authenticated. Show nothing.
                return false;
            };
            $scope.toggleCollapse = function ($index, isParentItem) {
                // collapsed sidebar doesn't toggle drodopwn
                if (Utils.isSidebarCollapsed() || $rootScope.app.layout.asideHover) {
                    return true;
                }
                // make sure the item index exists
                if (angular.isDefined(collapseList[$index])) {
                    if (!$scope.lastEventFromChild) {
                        collapseList[$index] = !collapseList[$index];
                        closeAllBut($index);
                    }
                } else if (isParentItem) {
                    closeAllBut(-1);
                }
                $scope.lastEventFromChild = isChild($index);
                //$window.location.reload();
                return true;
            };
            // Controller helpers
            // -----------------------------------
            // Check item and children active state
            function isActive(item) {
                if (!item) {
                    return;
                }
                if (!item.sref || item.sref === '#') {
                    let foundActive = false;
                    angular.forEach(item.submenu, function (value) {
                        if (isActive(value)) {
                            foundActive = true;
                        }
                    });
                    return foundActive;
                } else {
                    return $state.is(item.sref) || $state.includes(item.sref);
                }
            }

            function closeAllBut(index) {
                index += '';
                for (let i in collapseList) {
                    if (index < 0 || index.indexOf(i) < 0) {
                        collapseList[i] = true;
                    }
                }
            }

            function isChild($index) {
                /*jshint -W018*/
                return typeof $index === 'string' && !($index.indexOf('-') < 0);
            }
        } // activate
    }
})();
/**=========================================================
* Module: sidebar.js
* Wraps the sidebar and handles collapsed state
=========================================================*/
(function () {
    "use strict";

    angular.module("app.sidebar").directive("sidebar", sidebar);
    sidebar.$inject = ["$rootScope", "$timeout", "$window", "Utils"];

    function sidebar($rootScope, $timeout, $window, Utils) {
        const $win = angular.element($window);
        return {
            // bindToController: true,
            // controller: Controller,
            // controllerAs: 'vm',
            link: link,
            restrict: "EA",
            template: '<nav class="sidebar" ng-transclude></nav>',
            transclude: true,
            replace: true
            // scope: {}
        };

        function link(scope, element, attrs) {
            let currentState = $rootScope.$state.current.name;
            const $sidebar = element;
            const eventName = Utils.isTouch() ? "click" : "mouseenter";
            let subNav = $();
            let wrapper, sbclickEvent;
            $sidebar.on(eventName, ".nav > li", function () {
                if (Utils.isSidebarCollapsed() || $rootScope.app.layout.asideHover) {
                    subNav.trigger("mouseleave");
                    subNav = toggleMenuItem($(this), $sidebar);
                    // Used to detect click and touch events outside the sidebar
                    sidebarAddBackdrop();
                }
            });
            scope.$on("closeSidebarMenu", function () {
                removeFloatingNav();
            });
            // Normalize state when resize to mobile
            $win.on("resize", function () {
                if (!Utils.isMobile()) {
                    asideToggleOff();
                }
            });
            // Adjustment on route changes
            $rootScope.$on("$stateChangeStart", function (event, toState) {
                currentState = toState.name;
                // Hide sidebar automatically on mobile
                asideToggleOff();
                $rootScope.$broadcast("closeSidebarMenu");
            });
            // Autoclose when click outside the sidebar
            if (angular.isDefined(attrs.sidebarAnyclickClose)) {
                wrapper = $(".wrapper");
                sbclickEvent = "click.sidebar";
                $rootScope.$watch("app.asideToggled", watchExternalClicks);
            }
            //////
            function watchExternalClicks(newVal) {
                // if sidebar becomes visible
                if (newVal === true) {
                    $timeout(function () {
                        // render after current digest cycle
                        wrapper.on(sbclickEvent, function (e) {
                            // if not child of sidebar
                            if (!$(e.target).parents(".aside").length) {
                                asideToggleOff();
                            }
                        });
                    });
                } else {
                    // dettach event
                    wrapper.off(sbclickEvent);
                }
            }

            function asideToggleOff() {
                $rootScope.app.asideToggled = false;
                if (!scope.$$phase) {
                    scope.$apply();
                } // anti-pattern but sometimes necessary
            }
        }
        ///////
        function sidebarAddBackdrop() {
            const $backdrop = $("<div/>", { class: "dropdown-backdrop" });
            $backdrop.insertAfter(".aside-inner").on("click mouseenter", function () {
                removeFloatingNav();
            });
        }
        // Open the collapse sidebar submenu items when on touch devices
        // - desktop only opens on hover
        function toggleTouchItem($element) {
            $element.siblings("li").removeClass("open").end().toggleClass("open");
        }
        // Handles hover to open items under collapsed menu
        // -----------------------------------
        function toggleMenuItem($listItem, $sidebar) {
            removeFloatingNav();
            const ul = $listItem.children("ul");
            if (!ul.length) {
                return $();
            }
            if ($listItem.hasClass("open")) {
                toggleTouchItem($listItem);
                return $();
            }
            const $aside = $(".aside");
            const $asideInner = $(".aside-inner"); // for top offset calculation
            // float aside uses extra padding on aside
            const mar = parseInt($asideInner.css("padding-top"), 0) + parseInt($aside.css("padding-top"), 0);
            const subNav = ul.clone().appendTo($aside);
            toggleTouchItem($listItem);
            const itemTop = $listItem.position().top + mar - $sidebar.scrollTop();
            const vwHeight = $win.height();
            subNav.addClass("nav-floating").css({
                position: $rootScope.app.layout.isFixed ? "fixed" : "absolute",
                top: itemTop,
                bottom: subNav.outerHeight(true) + itemTop > vwHeight ? 0 : "auto"
            });
            subNav.on("mouseleave", function () {
                toggleTouchItem($listItem);
                subNav.remove();
            });
            return subNav;
        }

        function removeFloatingNav() {
            $(".dropdown-backdrop").remove();
            $(".sidebar-subnav.nav-floating").remove();
            $(".sidebar li.open").removeClass("open");
        }
    }
})();
(function () {
    'use strict';

    angular.module('app.sidebar').service('SidebarLoader', SidebarLoader);
    SidebarLoader.$inject = ['$http'];

    function SidebarLoader($http) {
        this.getMenu = getMenu;
        ////////////////
        function getMenu(onReady, onError) {
            const menuJson = 'server/sidebar-menu.json';
            const menuURL = menuJson + '?v=' + new Date().getTime(); // jumps cache
            onError = onError || function () {
                alert('Failure loading menu');
            };
            $http.get(menuURL).then(onReady, onError);
        }
    }
})();
(function () {
    'use strict';

    angular.module('systimu').service('TableSettingsLoader', TableSettingsLoader);
    TableSettingsLoader.$inject = ['$http'];

    function TableSettingsLoader($http) {
        this.getMenu = getMenu;
        ////////////////
        function getMenu(onReady, onError) {
            const menuJson = 'server/table-settings.json';
            const menuURL = menuJson + '?v=' + new Date().getTime(); // jumps cache
            onError = onError || function () {
                alert('Failure loading table settings');
            };
            $http.get(menuURL).then(onReady, onError);
        }
    }
})();
(function () {
    'use strict';

    angular.module('systimu').controller('HeaderController', HeaderController);
    HeaderController.$inject = ['$scope', 'Global', 'SignOut', '$window'];

    function HeaderController($scope, Global, SignOut, $window) {
        $scope.global = Global;
        $scope.SignOut = function () {
            SignOut.get(function (response) {
                if (response.status === 'success') {
                    $scope.global = null;
                    $window.location.href = "/";
                }
            });
        };
    }
})();
(function () {
    'use strict';

    angular.module('systimu').controller('HomeController', HomeController);
    HomeController.$inject = ['$scope', '$state', 'Global'];

    function HomeController($scope, $state, Global) {
        if (Global && Global.authenticated) {
            $state.go("app.home");
        }
    }
})();
/**=========================================================
 * Module: sparkline.js
 * SparkLines Mini Charts
 =========================================================*/
(function () {
    'use strict';

    angular.module('systimu').directive('sparkline', sparkline);

    function sparkline() {
        return {
            restrict: 'EA',
            scope: {
                'sparkline': '='
            },
            controller: Controller
        };
    }
    Controller.$inject = ['$scope', '$element', '$timeout', '$window'];
    function Controller($scope, $element, $timeout, $window) {
        const runSL = function () {
            initSparLine();
        };

        $timeout(runSL);

        function initSparLine() {
            let options = $scope.sparkline,
                data = $element.data();

            if (!options) {
                // if no scope options, try with data attributes
                options = data;
            } else if (data) {
                // data attributes overrides scope options
                options = angular.extend({}, options, data);
            }

            options.type = options.type || 'bar'; // default chart is bar
            options.disableHiddenCheck = true;

            $element.sparkline('html', options);

            if (options.resize) {
                $($window).resize(function () {
                    $element.sparkline('html', options);
                });
            }
        }
    }
})();
(function () {
    'use strict';

    angular.module('systimu').controller('RefLinkController', RefLinkController).directive('refLinkDirective', function () {
        return {
            scope: {
                refLinkList: "=info"
            },
            templateUrl: "app/views/partials/refLinkDirective.html",
            controller: "RefLinkController"
        };
    });

    RefLinkController.$inject = ['$scope'];
    function RefLinkController($scope) {
        $scope.enableEdit = function () {
            $scope.rowform.$show();
        };
        $scope.saveRow = function () {
            $scope.rowform.$submit();
        };
        $scope.addRow = function () {
            const EmptyRow = {
                section: null, name: null, url: null
            };
            $scope.refLinkList.data.push(EmptyRow);
        };
        $scope.removeRow = function (index) {
            //console.log("removing", index);
            $scope.refLinkList.data.splice(index, 1);
        };
    }
})();
(function () {
    'use strict';

    angular.module('systimu').controller('RefController', RefController).directive('referencesDirective', function () {
        return {
            scope: {
                references: "=ref",
                table: "=table",
                accept: "=accept",
                callback: "=cb"
            },
            templateUrl: "app/views/partials/referencesDirective.html",
            controller: "RefController"
        };
    });

    RefController.$inject = ['$scope', 'SiHttpUtil'];
    function RefController($scope, SiHttpUtil) {
        $scope.addFile = () => {
            $scope.references = SiHttpUtil.RefInit($scope.references);
            SiHttpUtil.UploadFile($scope.table, 'file', $scope.notes).then(resp => {
                $scope.references.files.push(resp.data);
                $scope.clearFileInput();
            });
        };
        $scope.addLink = () => {
            $scope.references = SiHttpUtil.RefInit($scope.references);
            $scope.references.links.push({ name: $scope.name, url: $scope.url });
            $scope.name = null;
            $scope.url = null;
        };
        $('#file').change(() => {
            $scope.file = true;
            $scope.$digest();
        });

        $scope.removeFile = index => {
            $scope.references.files.splice(index, 1);
        };
        $scope.removeLink = index => {
            $scope.references.links.splice(index, 1);
        };

        $scope.clearFileInput = () => {
            $("#file").filestyle('clear');
            $scope.file = false;
        };
    }
})();
(function () {
    'use strict';

    angular.module('systimu').controller('RefViewController', RefViewController).directive('referenceViewDirective', function () {
        return {
            scope: {
                references: "=ref",
                callback: "=cb"
            },
            templateUrl: "app/views/partials/referencesViewDirective.html",
            controller: "RefViewController"
        };
    });

    RefViewController.$inject = ['$scope', 'SiHttpUtil'];
    function RefViewController($scope, SiHttpUtil) {
        $scope.dl = SiHttpUtil.DownloadFile;

        // Check references on initialization
        $scope.callback = () => {
            if (!$scope.references) {
                $scope.references = [];
            }
            if (!Array.isArray($scope.references)) {
                $scope.references = angular.fromJson($scope.references);
            }
        };
    }
})();
(function () {
    'use strict';

    angular.module('systimu').directive('widgetDirective', function () {
        return {
            scope: {
                widget: "=widget",
                widgetdata: "=data",
                widgetlist: "=widgetlist",
                model: "=model",
                index: "=index"
            },
            templateUrl: "app/views/partials/widgetDirective.html",
            controller: function ($scope) {
                $scope.UserHash = $scope.model.UserHash;
            }
        };
    });
})();
//Permission Denied
(function () {
    'use strict';

    angular.module('systimu').controller('PermissionDeniedController', PermissionDeniedController);
    PermissionDeniedController.$inject = ['$scope', '$http', 'Global', '$window', '$stateParams', '$rootScope', '$state'];

    function PermissionDeniedController($scope, $http, Global, $window, $stateParams, $rootScope, $state) {
        // Go to login page instead of permission denied page if not logged in
        if (Global.user == null) {
            $state.go('home');
        }
        $scope.m = {
            goback: () => {
                if (!$rootScope.prevState) {
                    $window.history.back();
                }
                $state.go($rootScope.prevState);
            }
        };
    }
})();
(function () {
    'use strict';

    angular.module('systimu').service('LogIn', LogInService);
    LogInService.$inject = ['$resource'];

    function LogInService($resource) {
        return $resource('/api/loginldap');
    }
})();
(function () {
    'use strict';

    angular.module('app.pages').controller('LoginFormController', LoginFormController);
    LoginFormController.$inject = ['$window', 'LogIn'];

    function LoginFormController($window, LogIn) {
        const vm = this;
        activate();
        ////////////////
        function activate() {
            // bind here all data from the form
            vm.account = {};
            // place the message if something goes wrong
            vm.authMsg = '';
            vm.login = function () {
                vm.authMsg = '';
                if (vm.loginForm.$valid) {
                    const logIn = new LogIn({
                        username: vm.account.email,
                        password: vm.account.password
                    });
                    logIn.$save(function (response) {
                        if (response.status === 'success') {
                            $window.location.href = "/";
                        } else {
                            vm.authMsg = 'Incorrect credentials.';
                        }
                    }, function (err) {
                        vm.authMsg = err.data.status.message;
                    });
                } else {
                    // set as dirty if the user click directly to login so we show the validation messages
                    /*jshint -W106*/
                    vm.loginForm.account_email.$dirty = true;
                    vm.loginForm.account_password.$dirty = true;
                }
            };
        }
    }
})();
(function () {
    'use strict';

    angular.module('systimu').service('SignUp', SignUpService);
    SignUpService.$inject = ['$resource'];

    function SignUpService($resource) {
        return $resource('/users');
    }
})();
(function () {
    'use strict';

    angular.module('systimu').service('SignOut', SignOutService);
    SignOutService.$inject = ['$resource'];

    function SignOutService($resource) {
        return $resource('/api/signout');
    }
})();
/*
 * Helper Modules
 */
(function () {
    'use strict';
    //Global service for global variables

    angular.module('systimu').factory("Global", [function () {
        const _this = this;
        // Config of domain address prefix for gateway service.
        const thisDomain = window.location.protocol + "//" + window.location.hostname + ":" + window.location.port;
        const gatewayUrl = thisDomain + '/api';
        _this._data = {
            user: null,
            permissions: [],
            authenticated: false,
            gateway: gatewayUrl,
            domain: thisDomain,
            server: null,
            env: null,
            helperAPI: null
        };
        return _this._data;
    }]);
})();
(function () {
    'use strict';
    // Share some util codes between controllers.

    angular.module('systimu').factory("SiUtil", ['SiHttpUtil', function (SiHttpUtil) {
        const _this = this;

        // Date picker utils.
        const dpGen = function () {
            // Generates a dp with *your* scope.
            // "this" would need to be re-bind to the $scope you use.
            const userScope = this;
            const dp = {};
            // NOTE(ww): Require the ".data" layer.
            dp.initDp = function (form, control, default_today) {
                userScope[form].data[control] = {};
                if (default_today) {
                    userScope[form].data[control].dt = new Date();
                } else {
                    userScope[form].data[control].dt = null;
                }
                userScope[form].data[control].opened = false;
            };
            dp.dpFormat = "MM/dd/yyyy";
            // Toggle calendar popup. Bind "this", same as above.
            dp.dpOpen = function ($event, form, control) {
                $event.preventDefault();
                $event.stopPropagation();
                userScope[form].data[control].opened = !userScope[form].data[control].opened;
            };
            return dp;
        };

        _this._data = {
            dateFormat: new Intl.DateTimeFormat('en-US'),
            dateTimeFormat: new Intl.DateTimeFormat('en-US', {
                year: "numeric",
                month: "numeric",
                day: "numeric",
                hour: "2-digit",
                minute: "2-digit"
            }),
            timeFormat: new Intl.DateTimeFormat('en-US', {
                hour: '2-digit',
                minute: '2-digit'
            }),
            readableTimeFormat: new Intl.DateTimeFormat('en-us', {
                weekday: "long",
                year: "numeric",
                month: "short",
                day: "numeric",
                hour: "2-digit",
                minute: "2-digit"
            }),
            getReadableTimestamp: function (dbTimestamp) {
                if (dbTimestamp) {
                    const date = new Date(dbTimestamp);
                    return _this._data.readableTimeFormat.format(date);
                }
                return null;
            },
            getDateOnly: function (dbTimestamp) {
                if (dbTimestamp) {
                    const date = new Date(dbTimestamp);
                    return _this._data.dateFormat.format(date);
                }
                return null;
            },
            exponential: (data, digits = 2) => {
                if (data && !isNaN(data)) {
                    return data.toExponential(digits);
                }
                return data;
            },
            getDateTime: function (dbTimestamp) {
                if (dbTimestamp) {
                    const date = new Date(dbTimestamp);
                    return _this._data.dateTimeFormat.format(date);
                }
                return null;
            },
            getTimeOnly: function (dbTimestamp) {
                if (dbTimestamp) {
                    const date = new Date(dbTimestamp);
                    return _this._data.timeFormat.format(date);
                }
                return null;
            },
            get24Time: function (hours, type) {
                if (type === "PM" && hours < 12) {
                    hours = parseInt(hours) + 12;
                } else if (type === "AM" && hours === 12) {
                    hours = parseInt(hours) - 12;
                }
                return hours;
            },
            initTime: function (element, tableData) {
                if (element == null) {
                    element = {};
                }
                if (tableData == null) {
                    element.date = new Date();
                    element.date.setSeconds(0);
                } else {
                    element.date = new Date(tableData);
                }
                element.type = element.date.getHours() >= 12 ? "PM" : "AM";
                element.hours = (element.date.getHours() + 11) % 12 + 1;
                element.minutes = element.date.getMinutes();
                element.toggleAMPM = function (data) {
                    if (data.type === "PM") data.type = "AM";else data.type = "PM";
                };
            },
            getDisplayDescription: function (desp) {
                if (!desp) {
                    return null;
                }
                if (desp.length < 51) {
                    return desp;
                }
                return desp.substring(0, 50) + "...";
            },
            getCheckBox: function (value) {
                if (value && value === "No") {
                    return '';
                } else if (value || value === "Yes") {
                    return '<i class="fa fa-check"></i>';
                }
                return '';
            },
            roundNumber: function (value) {
                if (!value) {
                    return null;
                }
                return '<span title="' + value + '">' + Math.round(value * 100) / 100 + '</span>';
            },
            percentage: function (value) {
                return '<span title="' + value + '">' + Math.round(value * 100) / 100 + ' %</span>';
            },
            separateList: function (data) {
                if (!data) {
                    return null;
                }
                return angular.fromJson(data).join(", ");
            },
            getFormattedStatus: function (status) {
                if (!status) {
                    return null;
                }
                const statusColors = {
                    "Pending": "warning",
                    "In Progress": "primary",
                    "In Purification": "info",
                    "Completed": "success",
                    "Failed": "danger",
                    "Submitted": "primary",
                    "Sorted": "success",
                    "Not Sorted": "info",
                    "Purified": "success",
                    "Not Purified": "warning",
                    "Yes": "success",
                    "No": "info",
                    "Active": "success",
                    "Planned": "info",
                    "Inactive": "warning",
                    "On Hold": "inverse",
                    "Denied": "danger",
                    "Approved": "purple"
                };
                const color = statusColors[status] || "inverse";
                return '<span class="label label-' + color + '">' + status + "</>";
            },
            dbTableTranslator: function (table) {
                const translateTable = SiHttpUtil.tableSettings.tableFriendlyNames;
                // Check table name.
                if (!translateTable[table]) {
                    console.error("Unrecognized table. -" + table);
                    return table;
                }
                return translateTable[table];
            },
            ColDisplayRenderer: function (Transformer, data, type, full) {
                if (type === 'display' || type === 'export') {
                    return Transformer(data);
                }
                return data;
            },
            ColDisplayRendererWPeriod: function (name, Transformer, data, type, full) {
                if (type === 'display' && Transformer) {
                    return Transformer(full[name]);
                }
                return full[name];
            },
            ColDisplayFilterRenderer: function (Transformer, data, type, full) {
                if (type === 'display' || type === 'filter') {
                    return Transformer(data);
                }
                return data;
            },
            CloneRenderer: function (name, data, type, full) {
                if (!data) {
                    return null;
                }
                data = data.split(";");
                const length = data.length;
                for (let i = 0; i < length; i++) {
                    if (full[name] - 1 === i) {
                        data[i] = '<span style="background-color: #FFFF00;">' + data[i] + '</span>';
                    } else {
                        data[i] = data[i];
                    }
                }
                return data.join(', ');
            },
            progress: function (data) {
                if (!data) {
                    return null;
                }
                const val = parseFloat(data);
                if (isNaN(val)) {
                    return null;
                }
                const progressBar = document.createElement("div");
                progressBar.setAttribute('role', 'progressbar');
                progressBar.setAttribute('aria-valuenow', data);
                progressBar.setAttribute('aria-valuemin', '0');
                progressBar.setAttribute('aria-valuemax', '100');
                progressBar.setAttribute("style", "width: " + data + "%");
                progressBar.className = val >= 100 ? "progress-bar progress-bar-success" : "progress-bar progress-bar-info";
                const parent = document.createElement("div");
                parent.className = "progress progress-striped";
                parent.append(progressBar);
                return parent.outerHTML;
            },
            hashCode: str => {
                const x = str || "";
                let hash = 0;
                for (let i = 0; i < x.length; i++) {
                    hash = (hash << 5) - hash + x.charCodeAt(i);
                    hash = hash & hash;
                }
                return hash;
            },
            dp: dpGen,
            // Return true to show error information.
            validate: function (formInstance, name, type, special_checker) {
                if (special_checker) {
                    return name === special_checker.field_name;
                }
            },
            // Convert a null to false. Can be used for wrapper of checkbox value.
            wrapBoolean: function (val) {
                return val ? val : false;
            },
            // Takes a list of objects
            // Returns the average of all the values as an object with the same keys
            AverageList: function (list) {
                const result = {};
                for (let properties in list[0]) {
                    if (list[0].hasOwnProperty(properties)) {
                        let values = list.map(obj => obj[properties]);
                        // Calculate sum and filter out null values
                        values = values.filter(x => x !== null);
                        result[properties] = values.length > 0 ? values.reduce((a, b) => a + b) / values.length : null;
                    }
                }
                return result;
            },
            // Calculates the average and total yield used in purifications
            CalculateAverages: function (prop, form) {
                const average = _this._data.AverageList(form[prop]);
                form.averages[prop] = average;
                if (average.yield) {
                    form.totalYield *= average.yield > 100 ? 1 : average.yield / 100;
                }
            },
            GetPurificationTagMethod: (proteinId, tags, methods) => {
                return SiHttpUtil.FetchOneEntry("protein", proteinId).then(resp => {
                    if (resp.Plasmids.length > 0) {
                        for (let i = 0; i < resp.Plasmids.length; i++) {
                            let currPlasmid = resp.Plasmids[i];
                            if (!currPlasmid.ENUM_plasmidTag) continue;
                            if (!currPlasmid.ENUM_plasmidTag.includes("Kappa") && !currPlasmid.ENUM_plasmidTag.includes("Lambda")) {
                                return _this._data.PurificationTagMethodMap(currPlasmid.ENUM_plasmidTag, tags, methods);
                            }
                        }
                    }
                    return { tag: "Other", methods: methods };
                });
            },
            PurificationTagMethodMap: function (plasmidTag, purificationTags, purificationMethods) {
                let methodFilter, methods, tag;
                if (plasmidTag.includes("His")) {
                    methodFilter = "His";
                    tag = "His10";
                } else {
                    tag = purificationTags.filter(tag => tag.startsWith(plasmidTag.charAt(0)));
                    if (tag.length > 0) {
                        tag = tag[0];
                    } else {
                        tag = "Other";
                    }
                    if (plasmidTag.startsWith('h') || plasmidTag.startsWith('m') || plasmidTag.startsWith('Rb')) {
                        methodFilter = "ProA";
                    } else if (plasmidTag.startsWith('gt') || plasmidTag.startsWith('rt')) {
                        methodFilter = "ProG";
                    }
                }
                methods = purificationMethods.filter(method => method.startsWith(methodFilter));
                methods.push("Other");
                return { methods: methods, tag: tag };
            },
            PasteTableIntoInputs: function (form, inputs, event) {
                // form and inputs assumed to be an array
                const clipboard = event.originalEvent.clipboardData.getData('text').split("\n");
                for (let row = 0; row < form.length; row++) {
                    const curr = clipboard[row].split("\t");
                    for (let col = 0; col < inputs.length; col++) {
                        form[row][inputs[col]] = isNaN(curr[col]) ? curr[col] : parseFloat(curr[col]);
                    }
                }
            }
        };

        const ColDisplayers = {};
        ColDisplayers.ShortDateDisplayer = _this._data.ColDisplayFilterRenderer.bind(undefined, _this._data.getDateOnly);
        ColDisplayers.DateTimeDisplayer = _this._data.ColDisplayFilterRenderer.bind(undefined, _this._data.getDateTime);
        ColDisplayers.ShortTimeDisplayer = _this._data.ColDisplayFilterRenderer.bind(undefined, _this._data.getTimeOnly);
        ColDisplayers.DescriptionDisplayer = _this._data.ColDisplayRenderer.bind(undefined, _this._data.getDisplayDescription);
        ColDisplayers.StatusDisplayer = _this._data.ColDisplayRenderer.bind(undefined, _this._data.getFormattedStatus);
        ColDisplayers.CheckDisplayer = _this._data.ColDisplayRenderer.bind(undefined, _this._data.getCheckBox);
        ColDisplayers.RoundDisplayer = _this._data.ColDisplayRenderer.bind(undefined, _this._data.roundNumber);
        ColDisplayers.PercentageDisplayer = _this._data.ColDisplayRenderer.bind(undefined, _this._data.percentage);
        ColDisplayers.ListDisplayer = _this._data.ColDisplayRenderer.bind(undefined, _this._data.separateList);
        ColDisplayers.ExponentialDisplayer = _this._data.ColDisplayRenderer.bind(undefined, _this._data.exponential);
        ColDisplayers.ProgressDisplayer = _this._data.ColDisplayRenderer.bind(undefined, _this._data.progress);
        // Hash Convert.
        ColDisplayers.GetHashConvertDisplayer = function (Hash) {
            return SiHttpUtil.IdToVal.bind(undefined, Hash);
        };
        ColDisplayers.FixJoinDisplay = function (name, Transformer) {
            return _this._data.ColDisplayRendererWPeriod.bind(undefined, name, Transformer);
        };
        ColDisplayers.CloneDisplayer = function (name) {
            return _this._data.CloneRenderer.bind(undefined, name);
        };
        _this._data.ColDisplayers = ColDisplayers;

        return _this._data;
    }]);
})();
(function () {
    'use strict';
    // Service for common http requests.

    angular.module('systimu').factory("SiHttpUtil", ['$http', 'Global', 'DTColumnBuilder', 'DTOptionsBuilder', 'Notify', 'Colors', 'TableSettingsLoader', '$location', '$window', '$rootScope', function ($http, Global, DTColumnBuilder, DTOptionsBuilder, Notify, Colors, TableSettingsLoader, $location, $window, $rootScope) {
        const _this = this;
        const global = Global;

        TableSettingsLoader.getMenu(tableSettingsReady);

        function tableSettingsReady(items) {
            _this._data.tableSettings = items.data;
        }

        _this._data = {
            helperAPIUrl: global.helperAPI,
            tableSettings: {},
            initDtOptions: function (dtCols, dtData, rowCallback, readyCallback) {
                return DTOptionsBuilder.fromFnPromise(new Promise(function (resolve, reject) {
                    resolve(dtData);
                    readyCallback();
                })).withOption('rowCallback', rowCallback).withOption('deferRender', true).withOption('lengthMenu', [[10, 25, 50, 100, -1], [10, 25, 50, 100, "All"]]).withDisplayLength($rootScope.app.layout.tableRows).withOption('responsive', true).withButtons([{
                    extend: 'colvis',
                    text: 'Columns'
                }, {
                    extend: 'copy',
                    text: 'Copy'
                }, {
                    extend: 'csv',
                    filename: 'export',
                    text: 'Export CSV'
                }, {
                    extend: 'excelHtml5',
                    filename: 'export',
                    text: 'Export Excel'
                    // Make it export a different data (for notes)
                    // exportOptions: {
                    //     orthogonal: "export"
                    // }
                }, {
                    extend: 'print',
                    title: "",
                    text: 'Print',
                    exportOptions: {
                        columns: ':visible'
                    }
                }]).withOption('order', [[_this._data.dtColNameToIdx(dtCols, 'name'), 'desc']]).withColReorder();
            },
            initDtColumns: function (dtCols, dtData, colFilter, colTranslator, colHidden, colOrder) {
                // Sanity check.
                if (!(colFilter && colTranslator)) {
                    console.error("Missing params.");
                }
                // New way
                if (colOrder) {
                    for (let i = 0; i < colOrder.length; i++) {
                        const col = colOrder[i];
                        const column = DTColumnBuilder.newColumn(col).withTitle(colTranslator(col));
                        if (col === 'id') {
                            column.withOption('searchable', false).notVisible();
                        }
                        if (col === 'name') {
                            column.withOption('type', 'natural');
                        }
                        if (colHidden && colHidden(col)) {
                            column.notVisible();
                        }
                        dtCols.push(column.withOption('defaultContent', ''));
                    }
                } else {
                    // Init columns.
                    const FirstRow = dtData[0];
                    if (FirstRow) {
                        //console.log(FirstRow);
                        for (const col in FirstRow) {
                            if (!colFilter(col)) {
                                const column = DTColumnBuilder.newColumn(col).withTitle(colTranslator(col));
                                if (col === 'id') {
                                    column.withOption('searchable', false).notVisible();
                                }
                                if (col === 'name') {
                                    column.withOption('type', 'natural');
                                }
                                if (colHidden && colHidden(col)) {
                                    column.notVisible();
                                }
                                dtCols.push(column.withOption('defaultContent', ''));
                            }
                        }
                    }
                }
            },
            omitColumnForTable: function (table, colName) {
                const CommonOmitCols = _this._data.tableSettings.commonOmitCols;
                const OmitCols = _this._data.tableSettings.omitCols;

                // Check table name.
                if (!OmitCols[table]) {
                    //console.error("Unrecognized table. -" + table);
                    return CommonOmitCols.indexOf(colName) !== -1; // Ignored by Common.
                } else {
                    return CommonOmitCols.indexOf(colName) !== -1 || // Ignored by Common.
                    OmitCols[table].indexOf(colName) !== -1; // Ignored by specific table.
                }
            },
            hideColumnForTable: function (table, colName) {
                const hideCols = _this._data.tableSettings.hideCols;

                if (hideCols[table]) {
                    return hideCols[table].indexOf(colName) !== -1; // Ignored by specific table.
                }
                return 0;
            },
            dtColNameToIdx: function (dtCols, colName) {
                for (let i = 0; i < dtCols.length; i++) {
                    if (dtCols[i].mData === colName) {
                        return i;
                    }
                }
                return -1;
            },
            dbColumnTranslator: function (table, colName) {
                const translateCols = _this._data.tableSettings.columnTranslator;
                const CommonTransCols = _this._data.tableSettings.commonTransCols;

                // Check table name.
                if (!translateCols[table]) {
                    console.error("Unrecognized table. -" + table);
                    return colName;
                }

                return translateCols[table][colName] || CommonTransCols[colName] || colName;
            },
            tableOrder: function (table) {
                return _this._data.tableSettings.tableOrder[table] || null;
            },
            tableRowResetSelection: function (m) {
                m.lastRowClicked = null;
                m.currentRowData = null;
            },
            // m - model, assumed to have certain properties.
            tableRowClickHandler: function (m, modelName, data) {
                // A hack to find the row, regardless of re-ordering/sorting.
                const rowId = modelName + "_row_" + data.id;
                const row = $("#" + rowId);
                // ww: Must find all children, otherwise class would be overriden
                // by <td> classes.
                if (m.lastRowClicked) {
                    m.lastRowClicked.find('*').removeClass("bg-green-light");
                    // Clicked the same row, do de-selection.
                    if (m.currentRowData && m.currentRowData.id === data.id) {
                        // console.log("de-selection of id:", data.id);
                        m.resetSelection();
                        return;
                    }
                }
                row.find('*').addClass("bg-green-light");
                m.lastRowClicked = row;
                // console.log("data for row:", data);
                m.currentRowData = data;
            },
            tableRowCallback: function (m, scope, modelName, nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                // Unbind first in order to avoid any duplicate handler (see https://github.com/l-lin/angular-datatables/issues/87)
                $('td', nRow).unbind('click');
                $('td', nRow).bind('click', function () {
                    scope.$apply(function () {
                        // $scope.rowClickHandler(aData);
                        m.rowClickHandler(aData);
                    });
                });
                // ww:Hack: Mark the row with an ID.
                $('td', nRow).closest('tr').attr('id', modelName + "_row_" + aData.id);
                return nRow;
            },
            InitRowClick: function (Scope, modelName) {
                // Assume one datatable per controller
                let model = null;
                if (!modelName) {
                    model = Scope.m;
                    modelName = "";
                } else {
                    model = Scope.m[modelName];
                }
                // Row clicks properties.
                model.lastRowClicked = false;
                model.currentRowData = null;

                model.resetSelection = _this._data.tableRowResetSelection.bind(undefined, model);
                model.rowClickHandler = _this._data.tableRowClickHandler.bind(undefined, model, modelName);
                model.rowCallback = _this._data.tableRowCallback.bind(undefined, model, Scope, modelName);
            },
            InitViewForm: m => {
                return {
                    data: {},
                    show: false,
                    submitted: false,
                    CancelTab: () => _this._data.HideTab(m, m.viewForm)
                };
            },
            RefInit: ref => {
                if (!ref) {
                    return ref = {
                        files: [],
                        links: []
                    };
                }
                if (typeof ref === 'string' || ref instanceof String) {
                    return angular.fromJson(ref);
                }
                return ref;
            },
            HideTab: function (m, Form) {
                m.activeTab = "ViewAllTab";
                Form.show = false;
            },
            ResetForm: function (Form) {
                Form.data = {};
                Form.ui.validate.$setPristine();
                Form.submitted = false;
                _this._data.ResetStateParams();
            },
            ResetStateParams: function () {
                if ($location.$$search.op) {
                    $location.search({});
                    $location.$$compose();
                }
            },
            ResetTab: function (m, Form) {
                _this._data.ResetForm(Form);
                m.activeTab = "ViewAllTab";
            },
            // General validation, needs params binding to individual controller.
            ValidateInput: function (Validate, Submitted, FieldName, Type) {
                const input = Validate[FieldName];
                if (input === undefined) {
                    console.error("Undefined field:", FieldName);
                    return false; // Ignore.
                }
                return (input.$dirty || Submitted) && input.$error[Type];
            },
            GetDependencyDisplayItemList: function (Records, IdFieldOverride, NameFieldOverride) {
                const ret = {
                    ItemList: [],
                    Hash: {},
                    ListHash: {}
                };
                let IdField = "id";
                let NameField = "name";
                if (IdFieldOverride) {
                    IdField = IdFieldOverride;
                }
                if (NameFieldOverride) {
                    NameField = NameFieldOverride;
                }
                if (Records) {
                    for (let i = 0; i < Records.length; i++) {
                        const RecordItemText = Records[i][NameField];
                        const RecordItem = {
                            value: Records[i][IdField],
                            text: RecordItemText
                        };
                        ret.ItemList.push(RecordItem);
                        ret.ItemList.sort(function (a, b) {
                            return b.value - a.value;
                        });
                        //ret.ItemList.sort();
                        //ret.ItemList.reverse();
                        ret.Hash[Records[i][IdField]] = RecordItemText;
                        ret.ListHash[Records[i][IdField]] = Records[i];
                    }
                }
                return ret;
            },
            GetDependencyList: function (Records, IdFieldOverride, NameFieldOverride) {
                const ret = {
                    ItemList: [],
                    Hash: {},
                    ListHash: {}
                };
                let IdField = "id";
                let NameField = "name";
                if (IdFieldOverride) {
                    IdField = IdFieldOverride;
                }
                if (NameFieldOverride) {
                    NameField = NameFieldOverride;
                }
                if (Records) {
                    let i = 0,
                        len = Records.length;
                    for (; i < len; i++) {
                        const RecordItemText = Records[i][NameField];
                        const RecordItem = {
                            value: Records[i][IdField],
                            text: RecordItemText
                        };
                        ret.ItemList.push(RecordItem);
                        ret.Hash[Records[i][IdField]] = RecordItemText;
                        ret.ListHash[Records[i][IdField]] = Records[i];
                    }
                }
                return ret;
            },
            GetProteinTypeShorthand: function (ProteinType) {
                const moleculeTypeShorthand = {
                    "mAb": "C",
                    "Bispecific": "X",
                    "Trispecific": "T",
                    "Tetraspecific": "E",
                    "Reagent": "R",
                    "scFv": "S",
                    "Humanized": "H"
                };

                if (ProteinType in moleculeTypeShorthand) {
                    return moleculeTypeShorthand[ProteinType];
                }
                return "?";
            },
            GraphColors: () => {
                return [Colors.byName('purple'), Colors.byName('primary'), Colors.byName('success'), Colors.byName('warning'), Colors.byName('danger'), Colors.byName('info'), Colors.byName('pink'), Colors.byName('yellow'), Colors.byName('green'), Colors.byName('inverse')];
            },
            DefaultBarOptions: function () {
                return {
                    legend: {
                        display: false
                    },
                    title: {
                        display: true
                    },
                    tooltips: {
                        mode: 'index',
                        intersect: false
                    },
                    hover: {
                        mode: 'index',
                        intersect: false
                    },
                    scales: {
                        xAxes: [],
                        yAxes: [{
                            scaleLabel: {
                                display: true
                            },
                            ticks: {
                                beginAtZero: true
                            }
                        }]
                    }
                };
            },
            CalculateSubmissionVolume: function (MethodType, SampleConcentration) {
                // uL
                const calculations = {
                    "HPLC SEC": 50 / SampleConcentration + 20,
                    "MALS": 50 / SampleConcentration + 20,
                    "Poros": 500,
                    "Reduced CE-SDS": 102 * 0.5 / SampleConcentration + 25,
                    "Non-Reduced CE-SDS": 102 * 0.5 / SampleConcentration + 25,
                    "cIEF": 30,
                    "IEX": 130,
                    "Protein Thermal Shift": 25 / SampleConcentration + 25,
                    "Endotoxin": 125
                };
                if (MethodType in calculations) {
                    return calculations[MethodType];
                }
                return null;
            },
            GetMinConcentrationNeeded: function (MethodType) {
                // ug/uL
                const minConcentrations = {
                    "HPLC SEC": 0.3,
                    "MALS": 0.3,
                    //"Poros": NULL,
                    "Reduced CE-SDS": 1.5,
                    "Non-Reduced CE-SDS": 1.5,
                    "cIEF": 5,
                    "IEX": 1.2,
                    "Protein Thermal Shift": 0.4
                };
                if (MethodType in minConcentrations) {
                    return minConcentrations[MethodType];
                }
                return null;
            },
            GetUserId: function () {
                return global.user.id;
            },
            FetchEnumList: function (TableList) {
                return $http({
                    url: global.gateway + "/getEnumForManyTable",
                    method: "POST",
                    data: {
                        tableNameArray: TableList
                    }
                }).then(function (resp) {
                    return Promise.resolve(resp.data);
                }, function (err) {
                    console.log(err);
                });
            },
            FetchTableEntries: function (table_name) {
                return $http({
                    url: global.gateway + "/getTableEntries",
                    method: "POST",
                    data: {
                        "tableName": table_name
                    }
                }).then(function (resp) {
                    return Promise.resolve(resp.data);
                }, function (err) {
                    if (err.status === 403) {
                        $window.location.href = '/';
                    }
                    console.error("err:", err);
                });
            },
            FetchIdNameMapping: function (table_name) {
                return $http({
                    url: global.gateway + "/getNameMappings",
                    method: "POST",
                    data: {
                        "tableName": table_name
                    }
                }).then(function (resp) {
                    return Promise.resolve(resp.data);
                }, function (err) {
                    if (err.status === 403) {
                        $window.location.href = '/';
                    }
                    console.error("err:", err);
                });
            },
            FetchTableEntriesWithQuery: function (table_name, query_string) {
                return $http({
                    url: global.gateway + "/getTableEntries",
                    method: "POST",
                    data: {
                        "tableName": table_name,
                        queryString: query_string
                    }
                }).then(function (resp) {
                    return Promise.resolve(resp.data);
                }, function (err) {
                    if (err.status === 403) {
                        $window.location.href = '/';
                    }
                    console.error("err:", err);
                });
            },
            SearchByColumn: function (table_name, columns) {
                return $http({
                    url: global.gateway + "/searchTableEntriesByColumn",
                    method: "POST",
                    data: {
                        "tableName": table_name,
                        "columns": columns
                    }
                }).then(function (resp) {
                    return Promise.resolve(resp.data);
                }, function (err) {
                    if (err.status === 403) {
                        $window.location.href = '/';
                    }
                    console.error("err:", err);
                });
            },
            SearchByProject: function (table_name, project_id) {
                return $http({
                    url: global.gateway + "/searchByProject",
                    method: "POST",
                    data: {
                        "tableName": table_name,
                        "projectId": project_id
                    }
                }).then(function (resp) {
                    return Promise.resolve(resp.data);
                }, function (err) {
                    if (err.status === 403) {
                        $window.location.href = '/';
                    }
                    console.error("err:", err);
                });
            },
            POSTRequest: function (url, data) {
                console.log('why am i not here');
                console.log(url);
                console.log("Start post request call " + data);
                return $http({
                    url: url,
                    method: "POST",
                    data: data,
                    headers: { 'Content-Type': undefined }
                }).then(function (resp) {
                    console.log("normal return " + resp.data);
                    return Promise.resolve(resp.data);
                }, function (err) {
                    console.log("error return " + resp);
                    return Promise.reject(err.data);
                });
            },
            RefreshPlasmidData: entryId => {
                const url = global.gateway + '/seqUtils/cachePlasmidInfo/' + entryId;
                return $http.get(url).then(resp => {
                    return Promise.resolve(resp.data);
                }, err => {
                    return Promise.reject(err.data);
                });
            },
            FetchOneEntry: function (tableName, id) {
                if (!tableName || !id) {
                    console.error("FetchOneEntry: Missing param.");
                    return;
                }
                return $http({
                    url: global.gateway + "/getEntry",
                    method: "POST",
                    data: {
                        tableName: tableName,
                        id: id
                    }
                }).then(function (resp) {
                    return Promise.resolve(resp.data);
                }, function (err) {
                    if (err.status === 403) {
                        $window.location.href = '/';
                    }
                    console.error("err:", err);
                });
            },
            CreateTableEntry: function (Data) {
                console.log(Data);
                // Insert user name etc.
                Data.userId = global.user.id;
                return $http.post(global.gateway + "/createEntry", Data).then(function (resp) {
                    if (resp.status === 200) {
                        _this._data.NotifyOk(Data.tableName + " " + resp.data.name + " is created successfully");
                    } else {
                        _this._data.NotifyErr("error", Data.tableName + " failed to create new record");
                    }
                    return new Promise((resolve, reject) => {
                        resolve(resp);
                    });
                }, function (error) {
                    _this._data.NotifyErr(error.statusText, Data.tableName + " failed to create new record");
                    console.error("updateEntry error:" + error.statusText);
                });
            },
            CreateTableEntries: function (Data) {
                console.log("CreatetableEntries Call:");
                console.log(Data);
                // Insert user name etc.
                Data.userId = global.user.id;
                return $http.post(global.gateway + "/insertTableEntries", Data).then(function (resp) {
                    console.log(resp);
                    if (resp.status === 200) {
                        _this._data.NotifyOk(Data.tableName + " created multiple entries successfully");
                    } else {
                        _this._data.NotifyErr("error", Data.tableName + " failed to create new entries");
                    }
                    return new Promise((resolve, reject) => {
                        resolve(resp);
                    });
                }, function (error) {
                    _this._data.NotifyErr(error.statusText, Data.tableName + " failed to create new entries");
                    console.error("updateEntry error:" + error.statusText);
                });
            },
            UpdateDataEntry: function (postData) {
                return $http({
                    url: global.gateway + "/updateEntry",
                    method: "POST",
                    data: postData
                }).then(function (resp) {
                    console.log("updateEntry resp:", resp);
                    if (resp.status === 200) {
                        _this._data.NotifyOk(postData.tableName + " is updated successfully");
                    } else {
                        _this._data.NotifyErr("error", postData.tableName + " failed to update the record");
                    }
                    return new Promise((resolve, reject) => {
                        resolve(resp);
                    });
                }, function (error) {
                    if (error.status === 403) {
                        _this._data.NotifyErr("error", postData.tableName + " update conflict. Please check out the updated data.");
                    } else {
                        _this._data.NotifyErr("error", postData.tableName + " failed to update the record");
                    }
                });
            },
            DeleteDataEntry: function (tableName, id) {
                return $http({
                    url: global.gateway + "/deleteEntry",
                    method: "POST",
                    data: {
                        tableName: tableName,
                        id: id
                    }
                }).then(function (resp) {
                    console.log("deleteEntry resp:", resp);
                    if (resp.status === 200) {
                        _this._data.NotifyOk(tableName + " was deleted successfully");
                    } else {
                        _this._data.NotifyErr("error", tableName + " failed to delete the record");
                    }
                    return new Promise((resolve, reject) => {
                        resolve(resp);
                    });
                }, function (error) {
                    if (error.status === 403) {
                        _this._data.NotifyErr("error", tableName + " update conflict. Please check out the updated data.");
                    } else {
                        _this._data.NotifyErr("error", tableName + " failed to delete the record");
                    }
                });
            },
            UpdateDataEntries: function (postData) {
                return $http({
                    url: global.gateway + "/updateEntries",
                    method: "POST",
                    data: postData
                }).then(function (resp) {
                    console.log("updateEntry resp:", resp);
                    if (resp.status === 200) {
                        _this._data.NotifyOk(postData.tableName + " updated multiple entries successfully");
                    } else {
                        _this._data.NotifyErr("error", postData.tableName + " failed to update records");
                    }
                    return new Promise((resolve, reject) => {
                        resolve(resp);
                    });
                }, function (error) {
                    if (error.status === 403) {
                        _this._data.NotifyErr("error", postData.tableName + " update conflict. Please check out the updated data.");
                    } else {
                        _this._data.NotifyErr("error", postData.tableName + " failed to update records");
                    }
                });
            },
            UploadFile: function (tableName, fileInputId, notes) {
                // sends as multipart form-data
                const formData = new FormData();
                formData.append('file', document.getElementById(fileInputId).files[0]);
                formData.append('tableName', tableName);
                formData.append('notes', notes);
                return $http({
                    url: global.gateway + "/uploadFile",
                    method: "POST",
                    headers: { 'Content-Type': undefined },
                    data: formData
                }).then(resp => {
                    if (resp.status === 200) {
                        _this._data.NotifyOk("Uploaded file successfully");
                    }
                    return new Promise(resolve => {
                        resolve(resp);
                    });
                }, err => {
                    _this._data.NotifyErr("error", "failed to upload file" + err);
                });
            },
            DownloadFile: function (details, download) {
                $http({
                    url: global.gateway + "/downloadFile",
                    method: "POST",
                    data: {
                        fileId: details.fileId
                    },
                    responseType: 'blob'
                }).then(resp => {
                    const file = new Blob([resp.data]);
                    _this._data.DlBlob(details.fileName, file);
                    // To embed rather than download
                    // cons fileURL = URL.createObjectURL(file);
                    // return $sce.trustAsResourceUrl(fileURL);
                });
            },
            DlBlob: function (fileName, blob) {
                // Simulate browser click
                if (navigator.msSaveBlob) {
                    // IE 10+
                    navigator.msSaveBlob(blob, filename);
                } else {
                    const link = document.createElement("a");
                    if (link.download !== undefined) {
                        // feature detection
                        // Browsers that support HTML5 download attribute
                        const url = URL.createObjectURL(blob);
                        link.setAttribute("href", url);
                        link.setAttribute("download", fileName);
                        link.style.visibility = 'hidden';
                        document.body.appendChild(link);
                        link.click();
                        document.body.removeChild(link);
                    }
                }
            },
            // Hash for translate from id to user display name.
            CacheUserHash: function () {
                return $http({
                    url: global.gateway + '/getCompleteUserList',
                    method: "GET"
                }).then(function (resp) {
                    const UserHash = {
                        complete: {},
                        active: {},
                        activeList: []
                    };
                    const Users = resp.data.users;
                    for (let user of Users) {
                        if (!user.isDeleted) {
                            UserHash.active[user.id] = user.displayName;
                            UserHash.activeList.push({ id: user.id, name: user.displayName });
                        }
                        UserHash.complete[user.id] = user.displayName;
                    }
                    return new Promise((resolve, reject) => {
                        resolve(UserHash);
                    });
                });
                //TODO(ww): Catch errors.
            },
            IdToVal: function (Hash, Id) {
                if (Id in Hash) {
                    return Hash[Id];
                }
                return Id;
            },
            NotifyOk: function (msg) {
                const info = msg ? msg : "Operation success";
                Notify.alert(info, { status: 'success' });
            },
            NotifyErr: function (err, msg) {
                const info = msg ? msg : "Operation failure";
                Notify.alert(info, { status: 'danger' });
                if (err) {
                    console.error("Error: ", err);
                }
            },
            NotifyMsgByCode: function (resp, op) {
                return new Promise((resolve, reject) => {
                    if (resp && resp.status === 200) {
                        _this._data.NotifyMsgOk(op);
                        resolve();
                    } else {
                        _this._data.NotifyMsgErr(resp, op);
                    }
                });
            },
            NotifyMsgOk: function (op) {
                Notify.alert(op + " Success", { status: 'success' });
            },
            NotifyMsgErr: function (err, op) {
                Notify.alert(op + " Failure", { status: 'danger' });
                if (err) {
                    console.error("Error: ", err);
                }
            },
            NotifyOperationErr: function (op) {
                Notify.alert(op, { status: 'danger' });
            },
            InitJqueryImportCSVChangeHandler: function (Scope, fieldName) {
                //console.log(Scope.m.ShowImportBtn)

                // NOTE(ww): Tied to hardcoded var names.
                if (!fieldName) fieldName = 'file';
                $('#' + fieldName).change(function (e) {
                    const FakePath = $('#' + fieldName).val();
                    if (Scope.m) {
                        Scope.m.ShowImportBtn = FakePath;
                    }
                    Scope.showImportBtn = FakePath;
                    Scope.$digest();
                });
            },
            exportToCsv: function (filename, rows) {
                // converts list of objects to blob
                const processRow = function (row) {
                    let finalVal = '';
                    console.log(row);
                    for (let j = 0; j < row.length; j++) {
                        let innerValue = row[j] === null ? '' : row[j].toString();
                        if (row[j] instanceof Date) {
                            innerValue = row[j].toLocaleString();
                        }
                        let result = innerValue.replace(/"/g, '""');
                        if (result.search(/([",\n])/g) >= 0) {
                            result = '"' + result + '"';
                        }
                        if (j > 0) finalVal += ',';
                        finalVal += result;
                    }
                    return finalVal + '\n';
                };

                let csvFile = '';
                for (let i = 0; i < rows.length; i++) {
                    csvFile += processRow(rows[i]);
                }

                const blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                _this._data.DlBlob(filename, blob);
            }
        };
        return _this._data;
    }]);
})();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14), __webpack_require__(3), __webpack_require__(3)))

/***/ }),

/***/ 224:
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function($, _) {(function () {
    'use strict';

    angular.module('systimu').controller('LandingHomeController', LandingHomeController);
    LandingHomeController.$inject = ['$scope', '$http', 'Global', 'SiUtil', 'SiHttpUtil', '$uibModal'];

    function LandingHomeController($scope, $http, Global, SiUtil, SiHttpUtil, $uibModal) {
        $scope.global = Global;
        $scope.tableHistory = [];
        $scope.tableHistoryDisplayList = [];
        $scope.transfectionRequestList = [];
        $scope.m = {
            getDateOnly: SiUtil.getDateOnly,
            UserHash: null,
            getDateTime: SiUtil.getDateTime
        };
        SiHttpUtil.CacheUserHash().then(function (UserHash) {
            $scope.m.UserHash = UserHash.complete;
        });

        // Fixes the angular chosen off by one error
        $scope.$watch(function () {
            return $(".chosen-select option").length;
        }, function (newvalue, oldvalue) {
            if (newvalue !== oldvalue) {
                $(".chosen-select").trigger("chosen:updated");
            }
        });

        //ToDo: map from table name to url
        $scope.tableToUrl = function (tableName) {
            switch (tableName) {
                case "constructRequest":
                    return $scope.global.domain + "/#!/app/research/constructRequest";
                case "plasmids":
                    return $scope.global.domain + "/#!/app/research/plasmids";
                case "project":
                    return $scope.global.domain + "/#!/app/projects/";
                case "protein":
                    return $scope.global.domain + "/#!/app/research/proteins";
                case "proteinSummary":
                    return $scope.global.domain + "/#!/app/research/proteinSummary";
                case "proteinRequest":
                    return $scope.global.domain + "/#!/app/research/proteinRequest";
                case "transfectionRequest":
                    return $scope.global.domain + "/#!/app/research/transfectionRequests";
                case "transfection":
                    return $scope.global.domain + "/#!/app/research/transfections";
                case "proteinPurification":
                    return $scope.global.domain + "/#!/app/research/proteinPurification";
                case "analyticalSec":
                    return $scope.global.domain + "/#!/app/research/analyticalSec";
                case "stableCellLine":
                    return $scope.global.domain + "/#!/app/research/stableCellLine";
                case "proteinAnalysis":
                    return $scope.global.domain + "/#!/app/research/proteinAnalysis";
                case "proteinAnalysisRequest":
                    return $scope.global.domain + "/#!/app/research/proteinAnalysisRequest";
                case "activation":
                    return $scope.global.domain + "/#!/app/ade/activation";
                case "bCellSource":
                    return $scope.global.domain + "/#!/app/ade/bCellSource";
                case "mixCondition":
                    return $scope.global.domain + "/#!/app/ade/mixCondition";
                case "bCCPlate":
                    return $scope.global.domain + "/#!/app/ade/bCCPlate";
                case "supernatentPlate":
                    return $scope.global.domain + "/#!/app/ade/supernatentPlate";
                case "sort":
                    return $scope.global.domain + "/#!/app/ade/supernatentPlate";
                case "discoveryTransfection":
                    return $scope.global.domain + "/#!/app/ade/discoveryTransfection";
                case "humanizationTransfection":
                    return $scope.global.domain + "/#!/app/ade/humanizationTransfection";
                case "discoveryPlasmid":
                    return $scope.global.domain + "/#!/app/ade/discoveryPlasmid";
                case "humanizationPlasmid":
                    return $scope.global.domain + "/#!/app/ade/humanizationPlasmid";
                case "wellRescue":
                    return $scope.global.domain + "/#!/app/ade/wellRescue";
                case "cloningAndSequence":
                    return $scope.global.domain + "/#!/app/ade/cloningAndSequence";
                case "cellLineExperiment":
                    return $scope.global.domain + "/#!/app/pd/cellLineExperiment";
                case "cellLineHarvest":
                    return $scope.global.domain + "/#!/app/pd/cellLineHarvest";
                case "cellLinePurification":
                    return $scope.global.domain + "/#!/app/pd/cellLinePurification";
                case "cellLineAnalytic":
                    return $scope.global.domain + "/#!/app/pd/cellLineAnalytic";
                case "bioreactorExperiment":
                    return $scope.global.domain + "/#!/app/pd/bioreactorExperiment";
                case "bioreactorCondition":
                    return $scope.global.domain + "/#!/app/pd/bioreactorCondition";
                case "bioreactor":
                    return $scope.global.domain + "/#!/app/pd/bioreactor";
                case "bioreactorChemData":
                    return $scope.global.domain + "/#!/app/pd/bioreactorChemData";
                case "bioreactorVCDData":
                    return $scope.global.domain + "/#!/app/pd/bioreactorVCDData";
                case "bioreactorPurification":
                    return $scope.global.domain + "/#!/app/pd/bioreactorPurification";
                case "bioreactorAnalytic":
                    return $scope.global.domain + "/#!/app/pd/bioreactorAnalytic";
                case "enumconfig":
                    return $scope.global.domain + "/#!/app/research/enums";
                case "querylibs":
                    return $scope.global.domain + "/#!/app/query";
                //case "BoaStatements":
                //    return $scope.global.domain + "/#!/app/accounting/projectBilling";
            }
            return "javascript:void(0);";
        };

        $scope.graphs = function () {
            $scope.m.widgets.data.overviewGraph = {
                trOptions: {
                    legend: {
                        display: false
                    },
                    title: {
                        display: true,
                        text: 'Transfection Status (Last 2 Months)'
                    }
                },
                countDatasetOverride: [{
                    label: 'Plasmids',
                    backgroundColor: 'rgba(114,102,186,0.2)',
                    borderColor: 'rgba(114,102,186,1)',
                    pointBackgroundColor: 'rgba(114,102,186,1)',
                    pointBorderColor: '#fff'
                }, {
                    label: 'Proteins',
                    backgroundColor: 'rgba(35,183,229,0.2)',
                    borderColor: 'rgba(35,183,229,1)',
                    pointBackgroundColor: 'rgba(35,183,229,1)',
                    pointBorderColor: '#fff'
                }, {
                    label: 'Transfections',
                    backgroundColor: 'rgba(39,194,76,0.2)',
                    borderColor: 'rgba(39,194,76,1)',
                    pointBackgroundColor: 'rgba(39,194,76,1)',
                    pointBorderColor: '#fff'
                }, {
                    label: 'Purifications',
                    backgroundColor: 'rgba(240,80,80,0.2)',
                    borderColor: 'rgba(240,80,80,1)',
                    pointBackgroundColor: 'rgba(240,80,80,1)',
                    pointBorderColor: '#fff'
                }],
                countOptions: {
                    legend: {
                        display: false
                    },
                    title: {
                        display: true,
                        text: 'New Entries (Per Week)'
                    },
                    tooltips: {
                        mode: 'index',
                        intersect: false
                    },
                    hover: {
                        mode: 'index',
                        intersect: false
                    }
                }
            };

            $http.get(SiHttpUtil.helperAPIUrl + "graphapi/").then(function (resp) {
                $scope.m.widgets.data.overviewGraph.countData = {
                    labels: resp.data.countData.dates,
                    data: [resp.data.countData.plasmids, resp.data.countData.proteins, resp.data.countData.transfections, resp.data.countData.purifications],
                    colors: ['rgba(114,102,186,1)', 'rgba(35,183,229,1)', 'rgba(39,194,76,1)', 'rgba(240,80,80,1)']
                };
                $scope.m.widgets.data.overviewGraph.trData = {
                    labels: resp.data.trData.labels,
                    data: resp.data.trData.data,
                    colors: resp.data.trData.colors,
                    override: {
                        hoverBackgroundColor: resp.data.trData.colors
                    }
                };
                $scope.m.widgets.data.overviewGraph.leaderboard = resp.data.leaderboard;
            }, function (err) {
                console.log("fetch graph data from helper api err:", err);
            });
        };

        $scope.m.defaultDashboard = () => {
            return {
                row1: [{
                    type: 'overviewGraph',
                    hideTitle: true
                }],
                row2: {
                    col1: [{
                        type: 'latestActivities'
                    }],
                    col2: [],
                    col3: []
                },
                row3: []
            };
        };

        $scope.m.widgets = {
            friendlyMap: {
                latestActivities: "Latest Activities",
                tableau: "Tableau Dashboard",
                overviewGraph: "Overview Graph",
                myConstructs: "My Constructs",
                text: "Custom Text",
                constructsAwaiting: "Awaiting Construct Requests",
                octetRequestsAwaiting: "Awaiting Octet Analysis Requests",
                myEvents: "My Events",
                adTransfectionsAwaiting: "Pending AD TRs",
                pendingTRs: "Pending TRs",
                approvedTRs: "Approved TRs",
                inTransfection: "In Transfection",
                inPurification: "In Purification"
            },
            editEnabled: false,
            data: {},
            types: ['overviewGraph', 'latestActivities', 'tableau', 'myConstructs', 'constructsAwaiting', 'octetRequestsAwaiting', 'myEvents', 'adTransfectionsAwaiting', 'pendingTRs', 'approvedTRs', 'inTransfection', 'inPurification', 'text'],
            getName: widget => {
                return widget.name || $scope.m.widgets.friendlyMap[widget.type];
            },
            edit: {
                data: {},
                ui: {},
                open: (group, index) => {
                    $scope.m.widgets.edit.data = group[index];
                    const modalInstance = $uibModal.open({
                        animation: true,
                        scope: $scope,
                        templateUrl: 'editWidget.html',
                        size: 'lg',
                        // windowClass: 'exl',
                        controller: function ($scope) {
                            $scope.m.widgets.edit.close = function () {
                                modalInstance.close();
                                $scope.m.widgets.edit.ResetTab();
                            };
                        }
                    });
                    modalInstance.result.then(function () {
                        $scope.m.widgets.edit.ResetTab();
                    }, function () {
                        $scope.m.widgets.edit.ResetTab();
                    });
                },
                ResetTab: function () {
                    SiHttpUtil.ResetForm($scope.m.widgets.edit);
                },
                submit: () => {
                    $scope.m.widgets.edit.submitted = true;
                    if (!$scope.m.widgets.edit.ui.validate.$valid) {
                        console.error($scope.m.widgets.edit.ui.validate);
                        return;
                    }
                    $scope.m.widgets.edit.close();
                }
            },
            remove: (group, index) => {
                group.splice(index, 1);
            }
        };
        $scope.m.widgets.layout = Global.preferences.homeLayout ? angular.fromJson(Global.preferences.homeLayout) : $scope.m.defaultDashboard();

        $scope.m.getDashboard = () => {
            const widgets = _.union($scope.m.widgets.layout.row1.map(w => w.type), $scope.m.widgets.layout.row2.col1.map(w => w.type), $scope.m.widgets.layout.row2.col2.map(w => w.type), $scope.m.widgets.layout.row2.col3.map(w => w.type), $scope.m.widgets.layout.row3.map(w => w.type));
            if (widgets.includes("overviewGraph")) {
                $scope.graphs();
            }
            SiHttpUtil.FetchOneEntry('home', widgets).then(resp => {
                Object.assign($scope.m.widgets.data, resp);
                if (resp.latestActivities) {
                    const history = resp.latestActivities.tableHistories ? angular.fromJson(resp.latestActivities.tableHistories) : [];
                    $scope.m.widgets.data.latestActivities = history.map(entry => {
                        return {
                            table: SiUtil.dbTableTranslator(entry.tableName),
                            ReadableTimestamp: SiUtil.getReadableTimestamp(entry.time),
                            url: $scope.tableToUrl(entry.tableName)
                        };
                    }).reverse();
                }
            });
        };

        $scope.m.getDashboard();
        $scope.m.addWidget = {
            data: {},
            ui: {},
            open: row => {
                $scope.m.addWidget.data.row = row;
                const modalInstance = $uibModal.open({
                    animation: true,
                    scope: $scope,
                    templateUrl: 'addWidget.html',
                    size: 'lg',
                    // windowClass: 'exl',
                    controller: function ($scope) {
                        $scope.m.addWidget.close = function () {
                            modalInstance.close();
                            $scope.m.addWidget.ResetTab();
                        };
                    }
                });
                modalInstance.result.then(function () {
                    $scope.m.addWidget.ResetTab();
                }, function () {
                    $scope.m.addWidget.ResetTab();
                });
            },
            ResetTab: function () {
                SiHttpUtil.ResetForm($scope.m.addWidget);
            },
            submit: () => {
                $scope.m.addWidget.submitted = true;
                if (!$scope.m.addWidget.ui.validate.$valid) {
                    console.error($scope.m.addWidget.ui.validate);
                    return;
                }
                const newEntry = {
                    type: $scope.m.addWidget.data.type,
                    hideTitle: $scope.m.addWidget.data.hideTitle
                };
                if (newEntry.type === 'tableau') {
                    newEntry.name = $scope.m.addWidget.data.name;
                    newEntry.height = $scope.m.addWidget.data.height;
                    newEntry.dashboardName = $scope.m.addWidget.data.dashboardName;
                    newEntry.showToolbar = $scope.m.addWidget.data.showToolbar || 'no';
                }
                if (newEntry.type === 'text') {
                    newEntry.text = $scope.m.addWidget.data.text;
                }
                $scope.m.addWidget.data.row.push(newEntry);
                $scope.m.addWidget.close();
            }
        };

        $scope.m.saveDashboard = () => {
            $scope.m.widgets.editEnabled = false;
            SiHttpUtil.UpdateDataEntry({
                tableName: 'home',
                layout: angular.toJson($scope.m.widgets.layout)
            });
            $scope.m.getDashboard();
        };
    }
})();
(function () {
    'use strict';

    angular.module('systimu').controller('EmailController', EmailController);
    EmailController.$inject = ['$scope', '$http', 'Global', 'SiUtil', 'SiHttpUtil', '$uibModal'];

    function EmailController($scope, $http, Global, SiUtil, SiHttpUtil, $uibModal) {

        $scope.global = Global;
        $scope.templates = [];

        $scope.m = {
            getDateOnly: SiUtil.getDateOnly,
            UserHash: null,
            getDateTime: SiUtil.getDateTime
        };

        $http.get(Global.gateway + '/getCompleteEmailList').then(function (resp) {

            $scope.m.widgets.data = resp.data.templates;
        }, function (err) {
            console.log("fetch Emails data from helper api err:", err);
        });

        $scope.m.defaultDashboard = () => {
            return {
                row1: [{
                    type: 'overviewGraph',
                    hideTitle: true
                }],
                row2: {
                    col1: [{
                        type: 'latestActivities'
                    }],
                    col2: [],
                    col3: []
                },
                row3: []
            };
        };

        $scope.m.widgets = {

            data: {}
        };

        $scope.m.addWidget = {
            data: {},
            ui: {}

        };
    }
})();
(function () {
    'use strict';

    angular.module('systimu').controller('DocumentController', DocumentController);
    DocumentController.$inject = ['$scope', '$http', 'Global', 'SiUtil', '$uibModal'];

    function DocumentController($scope, $http, Global, SiUtil, $uibModal) {
        $scope.global = Global;
        $scope.fetchResearchIssues = function () {
            $http({
                url: "https://jira.systimmune.net/rest/api/2/search?jql=project=LIMS+AND+resolution=Unresolved+AND+Labels=Research&fields=*none&maxResults=-1",
                method: "GET"
            }).then(function (resp) {
                $scope.researchIssues = resp.data.total;
            }, function (err) {
                console.log("fetch issues err:", err);
            });
        };
        $scope.fetchResearchIssues();
        $scope.fetchADEIssues = function () {
            $http({
                url: "https://jira.systimmune.net/rest/api/2/search?jql=project=LIMS+AND+resolution=Unresolved+AND+Labels=ADE&fields=*none&maxResults=-1",
                method: "GET"
            }).then(function (resp) {
                $scope.ADEIssues = resp.data.total;
            }, function (err) {
                console.log("fetch issues err:", err);
            });
        };
        $scope.fetchADEIssues();
        $scope.fetchPDIssues = function () {
            $http({
                url: "https://jira.systimmune.net/rest/api/2/search?jql=project=LIMS+AND+resolution=Unresolved+AND+Labels=PD&fields=*none&maxResults=-1",
                method: "GET"
            }).then(function (resp) {
                $scope.pdIssues = resp.data.total;
            }, function (err) {
                console.log("fetch issues err:", err);
            });
        };
        $scope.fetchPDIssues();
        $scope.fetchGeneralIssues = function () {
            $http({
                url: "https://jira.systimmune.net/rest/api/2/search?jql=project=LIMS+AND+resolution=Unresolved+AND+Labels=General&fields=*none&maxResults=-1",
                method: "GET"
            }).then(function (resp) {
                $scope.generalIssues = resp.data.total;
            }, function (err) {
                console.log("fetch issues err:", err);
            });
        };
        $scope.fetchGeneralIssues();

        $scope.fetchIssues = function (release) {
            $http({
                url: "https://jira.systimmune.net/rest/api/2/search?jql=project=LIMS+AND+fixVersion=" + release + "&fields=summary,reporter&maxResults=-1",
                method: "GET"
            }).then(function (resp) {
                console.log(resp);
                return resp.data.issues;
            }, function (err) {
                console.log("fetch issues err:", err);
            });
        };
        $scope.viewDetail = {};
        $scope.viewIssues = function (type, data) {
            var modalInstance = $uibModal.open({
                animation: true,
                scope: $scope,
                templateUrl: 'viewDetails.html',
                size: 'lg',
                controller: function ($scope) {
                    $scope.close = function () {
                        modalInstance.close();
                    };
                    var url;
                    if (type == "section") {
                        url = "https://jira.systimmune.net/rest/api/2/search?jql=project=LIMS+AND+(fixVersion+in+unreleasedVersions()+OR+fixVersion+is+EMPTY+OR+resolution=Unresolved)+AND+labels=" + data + "&fields=summary,reporter,components,status&maxResults=-1";
                    } else if (type == "release") {
                        url = "https://jira.systimmune.net/rest/api/2/search?jql=project=LIMS+AND+fixVersion=" + data + "&fields=summary,reporter,components,status&maxResults=-1";
                    }
                    $http({
                        url: url,
                        method: "GET"
                    }).then(function (resp) {
                        $scope.viewDetail.data = resp.data.issues;
                    }, function (err) {
                        console.log("fetch issues err:", err);
                    });
                    $scope.viewDetail.type = data;
                }
            });
        };

        $scope.viewSprint = function () {
            $scope.viewSprintDetail = {
                "new": [],
                "indeterminate": [],
                "done": []
            };
            var modalInstance = $uibModal.open({
                animation: true,
                scope: $scope,
                templateUrl: 'viewSprint.html',
                size: 'lg',
                controller: function ($scope) {
                    $scope.close = function () {
                        modalInstance.close();
                    };
                    var url = "https://jira.systimmune.net/rest/api/2/search?jql=project=LIMS+AND+(fixVersion+in+unreleasedVersions()+OR+fixVersion+is+EMPTY+OR+resolution=Unresolved)+AND+sprint+in+openSprints()&fields=summary,reporter,components,status&maxResults=-1";
                    $http({
                        url: url,
                        method: "GET"
                    }).then(function (resp) {
                        var issues = resp.data.issues;
                        for (var i = 0; i < issues.length; i++) {
                            var type = issues[i].fields.status.statusCategory.key;
                            $scope.viewSprintDetail[type].push(issues[i]);
                        }
                    }, function (err) {
                        console.log("fetch issues err:", err);
                    });
                }
            });
        };
    }
})();
(function () {
    'use strict';

    angular.module('app.facilities').controller('FacilitiesController', FacilitiesController);
    FacilitiesController.$inject = ['$scope', 'SiHttpUtil'];

    function FacilitiesController($scope, SiHttpUtil) {
        // Fixes the angular chosen off by one error
        $scope.$watch(function () {
            return $(".chosen-select option").length;
        }, function (newvalue, oldvalue) {
            if (newvalue !== oldvalue) {
                $(".chosen-select").trigger("chosen:updated");
            }
        });
        $scope.UserHash = null;
        $scope.ActiveUserHash = null;
        $scope.ActiveUserList = null;
        SiHttpUtil.CacheUserHash().then(function (UserHash) {
            $scope.UserHash = UserHash.complete;
            $scope.ActiveUserHash = UserHash.active;
            $scope.ActiveUserList = UserHash.activeList;
        });
    }
})();
(function () {
    'use strict';

    angular.module('app.facilities').controller('SchedulingController', SchedulingController);
    SchedulingController.$inject = ['$scope', 'SiHttpUtil', '$compile', '$localStorage', '$uibModal', 'SiUtil'];

    function SchedulingController($scope, SiHttpUtil, $compile, $localStorage, $uibModal, SiUtil) {
        // Main model
        $scope.m = {
            tableName: "reservation",
            activeTab: "CalendarTab",
            getDateTime: SiUtil.getDateTime
        };
        /* Render Tooltip */
        $scope.eventRender = function (event, element, view) {
            element.attr({
                'uib-popover': event.project + '\n' + $scope.UserHash[event.assignedTo],
                'popover-title': event.instrument, 'popover-trigger': "'mouseenter'" });
            $compile(element)($scope);
        };
        // Sample resize and drop events
        // $scope.alertOnDrop = function(event, delta, revertFunc, jsEvent, ui, view){
        //     $scope.alertMessage = ('Event Droped to make dayDelta ' + delta);
        // };
        // $scope.alertOnResize = function(event, delta, revertFunc, jsEvent, ui, view ){
        //     $scope.alertMessage = ('Event Resized to make dayDelta ' + delta);
        // };
        $scope.m.calendar = {
            instrumentListFilter: null,
            events: [],
            refreshEvents: () => {
                const colorGroup = String($scope.m.calendar.colorGroup);
                const groups = {};
                const query = { instrumentId: $scope.m.calendar.instrumentListFilter };
                SiHttpUtil.SearchByColumn($scope.m.tableName, query).then(resp => {
                    $scope.m.instrumentGroups.map((group, index) => groups[group] = index);
                    const me = SiHttpUtil.GetUserId();
                    const events = resp.map((event, index) => {
                        let color;
                        const colorArray = SiHttpUtil.GraphColors();
                        switch (colorGroup) {
                            case "Project":
                                color = colorArray[event.projectId % colorArray.length];
                                break;
                            case "My Reservations":
                                color = event.assignedTo == me ? '#00a65a' : '#9289ca';
                                break;
                            case "Equipment Group":
                                color = colorArray[groups[event.instrumentGroup] % colorArray.length];
                                break;
                            case "Department":
                                const hash = SiUtil.hashCode(event.department);
                                color = colorArray[Math.abs(hash) % colorArray.length];
                                break;
                            default:
                                color = '#00a65a';
                        }
                        return {
                            title: event.instrument + ' - ' + $scope.UserHash[event.assignedTo],
                            id: event.id,
                            instrument: event.instrument,
                            start: new Date(event.startDate),
                            end: new Date(event.endDate),
                            allDay: event.allDay,
                            color: color,
                            assignedTo: event.assignedTo,
                            project: event.project,
                            projectId: event.projectId,
                            instrumentId: event.instrumentId,
                            createdBy: event.createdBy
                        };
                    });
                    $scope.m.calendar.events = events;
                });
            },
            filter: {},
            filterUpdate: () => {
                const instrumentList = [];
                for (const instrument in $scope.m.calendar.filter) {
                    if (instrument && $scope.m.calendar.filter[instrument]) {
                        instrumentList.push(instrument);
                    }
                }
                $scope.m.calendar.instrumentListFilter = instrumentList.length ? instrumentList : null;
                $localStorage.calendarFilter = $scope.m.calendar.instrumentListFilter;
                $scope.m.calendar.refreshEvents();
            },
            resetFilter: () => {
                for (const instrument in $scope.m.calendar.filter) {
                    $scope.m.calendar.filter[instrument] = false;
                }
            },
            groupUpdate: () => {
                $localStorage.calendarColors = $scope.m.calendar.colorGroup;
                $scope.m.calendar.refreshEvents();
            },
            addEvent: () => {
                $scope.m.CreateForm.open();
            },
            editEvent: (event, element, view) => {
                $scope.m.editForm.open(event);
            }
        };
        $scope.m.calendar.options = {
            header: {
                left: 'month,agendaWeek,listWeek addEvent',
                center: 'title'
            },
            eventClick: $scope.m.calendar.editEvent,
            // TODO: Add event drop then open modal with new date/time
            // eventDrop: $scope.alertOnDrop,
            // eventResize: $scope.alertOnResize,
            eventRender: $scope.eventRender,
            editable: false,
            // timeZone: 'local',
            businessHours: { start: '07:30', end: '18:00' },
            customButtons: {
                addEvent: {
                    text: 'Add Event',
                    click: $scope.m.calendar.addEvent
                }
            },
            schedulerLicenseKey: 'CC-Attribution-NonCommercial-NoDerivatives'
        };

        $scope.m.scheduler = {
            filter: () => {
                $scope.m.scheduler.filteredInstruments = $scope.m.instruments.filter(instrument => instrument.group == $scope.m.CreateForm.data.group);
                $scope.m.scheduler.options.resources = $scope.m.scheduler.filteredInstruments.map(instrument => {
                    return {
                        id: instrument.id,
                        title: instrument.name
                    };
                });
                const query = {
                    instrumentId: {
                        $or: $scope.m.scheduler.options.resources.map(inst => inst.id)
                    }
                };
                SiHttpUtil.SearchByColumn('reservation', query).then(resp => {
                    $scope.m.scheduler.events = resp.map(event => {
                        return {
                            title: event.instrument + ' - ' + $scope.UserHash[event.assignedTo],
                            resourceId: event.instrumentId,
                            start: new Date(event.startDate),
                            end: new Date(event.endDate),
                            allDay: event.allDay
                        };
                    });
                });
            },
            events: [],
            eventDrop: event => {
                $scope.m.CreateForm.data.instrumentId = parseInt(event.resourceId);
                $scope.m.CreateForm.data.startDate.dt = new Date(event.start);
                $scope.m.CreateForm.data.endDate.dt = new Date(event.end);
                SiUtil.initTime($scope.m.CreateForm.data.startTime, event.start);
                SiUtil.initTime($scope.m.CreateForm.data.endTime, event.end);
                $scope.$digest();
            },
            click: (start, end, event, view, resource) => {
                if (!resource) {
                    resource = {
                        id: $scope.m.CreateForm.data.instrumentId || $scope.m.scheduler.options.resources[0].id
                    };
                }
                const currEvent = {
                    resourceId: parseInt(resource.id),
                    start: new Date(start),
                    end: new Date(end),
                    title: $scope.UserHash[SiHttpUtil.GetUserId()],
                    allDay: false
                    // $scope.m.scheduler.events.push(currEvent);
                };$scope.m.CreateForm.data.currEvent = currEvent;
                $scope.m.CreateForm.data.instrumentId = parseInt(resource.id);
                $scope.m.CreateForm.data.startDate.dt = new Date(start);
                $scope.m.CreateForm.data.endDate.dt = new Date(end);
                SiUtil.initTime($scope.m.CreateForm.data.startTime, start);
                SiUtil.initTime($scope.m.CreateForm.data.endTime, end);
                // $scope.m.scheduler.options.selectable = false;
                $scope.$digest();
            }
        };
        $scope.m.scheduler.options = {
            resources: [],
            header: {
                left: 'timelineDay,timelineWeek,agendaDay,month',
                center: 'title'
            },
            defaultView: 'timelineDay',
            schedulerLicenseKey: 'CC-Attribution-NonCommercial-NoDerivatives',
            select: $scope.m.scheduler.click,
            eventRender: null,
            eventClick: null,
            selectable: true,
            aspectRatio: 4.5,
            nowIndicator: true,
            scrollTime: new Date().getHours() + ":00:00",
            eventResize: $scope.m.scheduler.eventDrop,
            eventDrop: $scope.m.scheduler.eventDrop,
            // eventRender: $scope.eventRender,
            timezone: 'local',
            editable: false,
            // now: true,
            businessHours: { start: '10:00', end: '15:00' }
        };
        $scope.m.editForm = {
            data: {},
            ui: {},
            open: event => {
                SiHttpUtil.FetchIdNameMapping("project").then(resp => {
                    $scope.m.ProjectDisplayData = SiHttpUtil.GetDependencyDisplayItemList(resp);
                });
                const modalInstance = $uibModal.open({
                    animation: true,
                    scope: $scope,
                    templateUrl: 'edit.html',
                    size: 'lg',
                    controller: function ($scope) {
                        $scope.m.close = function () {
                            modalInstance.close();
                        };
                    }
                });
                $scope.m.editForm.data = angular.copy(event);
                $scope.m.editForm.data.startDate = {
                    dt: new Date(event.start)
                };
                $scope.m.editForm.data.endDate = {
                    dt: new Date(event.end)
                };
                $scope.m.editForm.data.startTime = {};
                $scope.m.editForm.data.endTime = {};
                SiUtil.initTime($scope.m.editForm.data.startTime, event.start);
                SiUtil.initTime($scope.m.editForm.data.endTime, event.end);
                $scope.m.editForm.data.me = $scope.m.editForm.data.assignedTo == SiHttpUtil.GetUserId() || $scope.m.editForm.data.createdBy == SiHttpUtil.GetUserId();
            },
            Delete: () => {
                SiHttpUtil.DeleteDataEntry($scope.m.tableName, $scope.m.editForm.data.id).then(() => {
                    $scope.m.calendar.refreshEvents();
                    $scope.m.close();
                });
            },
            ResetTab: function () {
                SiHttpUtil.ResetForm($scope.m.editForm);
            },
            SubmitTab: () => {
                $scope.m.editForm.submitted = true;
                if (!$scope.m.editForm.ui.validate.$valid) {
                    console.error($scope.m.editForm.ui.validate);
                    return;
                }
                $scope.m.editForm.data.startDate.dt.setHours(SiUtil.get24Time($scope.m.editForm.data.startTime.hours, $scope.m.editForm.data.startTime.type));
                $scope.m.CreateForm.data.endDate.dt.setHours(SiUtil.get24Time($scope.m.editForm.data.endTime.hours, $scope.m.editForm.data.endTime.type));
                $scope.m.editForm.data.startDate.dt.setMinutes($scope.m.editForm.data.startTime.minutes);
                $scope.m.editForm.data.endDate.dt.setMinutes($scope.m.editForm.data.endTime.minutes);
                const newEntry = {
                    tableName: $scope.m.tableName,
                    id: $scope.m.editForm.data.id,
                    projectId: $scope.m.editForm.data.projectId,
                    startDate: $scope.m.editForm.data.startDate.dt,
                    endDate: $scope.m.editForm.data.endDate.dt,
                    instrumentId: $scope.m.editForm.data.instrumentId,
                    allDay: $scope.m.editForm.data.allDay,
                    assignedTo: $scope.m.editForm.data.assignedTo
                };
                SiHttpUtil.UpdateDataEntry(newEntry).then(function (resp) {
                    if (resp.status == 200) {
                        $scope.m.editForm.ResetTab();
                        $scope.m.calendar.refreshEvents();
                        $scope.m.close();
                    }
                });
            }
        };

        $scope.m.CreateForm = {
            data: {},
            ui: {},
            open: () => {
                SiHttpUtil.FetchIdNameMapping("project").then(resp => {
                    $scope.m.ProjectDisplayData = SiHttpUtil.GetDependencyDisplayItemList(resp);
                });
                const modalInstance = $uibModal.open({
                    animation: true,
                    scope: $scope,
                    templateUrl: 'add.html',
                    size: 'lg',
                    windowClass: 'exl',
                    controller: function ($scope) {
                        $scope.m.close = function () {
                            modalInstance.close();
                            $scope.m.CreateForm.ResetTab();
                        };
                    }
                });
                modalInstance.result.then(function () {
                    $scope.m.CreateForm.ResetTab();
                }, function () {
                    $scope.m.CreateForm.ResetTab();
                });
                $scope.m.CreateForm.data.startTime = {};
                SiUtil.initTime($scope.m.CreateForm.data.startTime);
                $scope.m.CreateForm.data.endTime = {};
                SiUtil.initTime($scope.m.CreateForm.data.endTime);
                $scope.m.CreateForm.data.assignedTo = SiHttpUtil.GetUserId();
            },
            // octetRecommend: () => {
            //     let instrument;
            //     if ($scope.m.CreateForm.data.numPoints > 64 || $scope.m.CreateForm.data.runTime > 120) {
            //         instrument = "Octet 384";
            //     } else {
            //         instrument = "Octet 96";
            //     }
            //     instrument = $scope.m.scheduler.filteredInstruments.filter(i => i.name == instrument);
            //     $scope.m.CreateForm.data.instrumentId = instrument[0].id;
            // },
            onChange: () => {
                $scope.m.scheduler.options.events[$scope.m.scheduler.options.events.length - 1] = {
                    resourceId: $scope.m.CreateForm.data.instrumentId,
                    start: new Date($scope.m.CreateForm.data.startDate.dt),
                    end: new Date($scope.m.CreateForm.data.endDate.dt),
                    title: $scope.UserHash[SiHttpUtil.GetUserId()],
                    allDay: $scope.m.CreateForm.data.allDay
                };
            },
            ResetTab: function () {
                SiHttpUtil.ResetForm($scope.m.CreateForm);
                $scope.m.dp.initDp('CreateForm', 'startDate', true);
                $scope.m.dp.initDp('CreateForm', 'endDate', true);
                $scope.m.scheduler.options.selectable = true;
                // $scope.m.activeTab = "ViewAllTab";
            },
            SubmitTab: () => {
                $scope.m.CreateForm.submitted = true;
                if (!$scope.m.CreateForm.ui.validate.$valid) {
                    console.error($scope.m.CreateForm.ui.validate);
                    return;
                }
                $scope.m.CreateForm.data.startDate.dt.setHours(SiUtil.get24Time($scope.m.CreateForm.data.startTime.hours, $scope.m.CreateForm.data.startTime.type));
                $scope.m.CreateForm.data.endDate.dt.setHours(SiUtil.get24Time($scope.m.CreateForm.data.endTime.hours, $scope.m.CreateForm.data.endTime.type));
                $scope.m.CreateForm.data.startDate.dt.setMinutes($scope.m.CreateForm.data.startTime.minutes);
                $scope.m.CreateForm.data.endDate.dt.setMinutes($scope.m.CreateForm.data.endTime.minutes);
                const newEntry = {
                    tableName: $scope.m.tableName,
                    projectId: $scope.m.CreateForm.data.projectId,
                    startDate: $scope.m.CreateForm.data.startDate.dt,
                    endDate: $scope.m.CreateForm.data.endDate.dt,
                    instrumentId: $scope.m.CreateForm.data.instrumentId,
                    allDay: $scope.m.CreateForm.data.allDay,
                    assignedTo: $scope.m.CreateForm.data.assignedTo
                };
                SiHttpUtil.CreateTableEntry(newEntry).then(function (resp) {
                    if (resp.status == 200) {
                        $scope.m.CreateForm.ResetTab();
                        $scope.m.close();
                        $scope.m.calendar.refreshEvents();
                    }
                });
            }
        };
        $scope.m.ValidateCreateInput = (FieldName, Type) => SiHttpUtil.ValidateInput($scope.m.CreateForm.ui.validate, $scope.m.CreateForm.submitted, FieldName, Type);
        $scope.m.ValidateEditInput = (FieldName, Type) => SiHttpUtil.ValidateInput($scope.m.editForm.ui.validate, $scope.m.editForm.submitted, FieldName, Type);

        // Check local storage for user preferences
        if (angular.isDefined($localStorage.calendarFilter)) {
            $scope.m.calendar.instrumentListFilter = $localStorage.calendarFilter;
            if ($scope.m.calendar.instrumentListFilter) {
                for (let i = 0; i < $scope.m.calendar.instrumentListFilter.length; i++) {
                    $scope.m.calendar.filter[$scope.m.calendar.instrumentListFilter[i]] = true;
                }
            }
        }
        if (angular.isDefined($localStorage.calendarColors)) {
            $scope.m.calendar.colorGroup = $localStorage.calendarColors;
        } else {
            // Default grouping
            $scope.m.calendar.colorGroup = "My Reservations";
        }

        SiHttpUtil.FetchTableEntries("instrument").then(resp => {
            $scope.m.instruments = resp.records;
            const enums = angular.fromJson(resp.enums);
            $scope.m.instrumentGroups = enums.ENUM_instrumentGroup;
            $scope.m.calendar.refreshEvents();
        });

        $scope.m.dp = SiUtil.dp.bind($scope.m)();
        $scope.m.dp.initDp('CreateForm', 'startDate', true);
        $scope.m.dp.initDp('CreateForm', 'endDate', true);
    }
})();

//TimePerProject Parent Controller
(function () {
    'use strict';

    angular.module('app.TimePerProject').controller('TPPcontroller', TPPcontroller);
    TPPcontroller.$inject = ['$scope', '$state', 'Global', 'SiHttpUtil'];

    function TPPcontroller($scope, $state, Global, SiHttpUtil) {
        $scope.global = Global;
        $scope.tableState = {};

        // Fixes the angular chosen off-by-one error
        $scope.$watch(function () {
            return $(".chosen-select option").length;
        }, function (newvalue, oldvalue) {
            if (newvalue !== oldvalue) {
                $(".chosen-select").trigger("chosen:updated");
            }
        });

        $scope.tableState.currentTable = "";
        $scope.switchTable = function () {
            console.log("table:", $scope.tableState.currentTable);
            console.log("table");
            if ($scope.tableState.currentTable) {
                $state.go("app.TimePerProject." + $scope.tableState.currentTable);
            }
        };

        $scope.UserHash = null;
        $scope.ActiveUserHash = null;
        $scope.ActiveUserList = null;
        SiHttpUtil.CacheUserHash().then(function (UserHash) {
            $scope.UserHash = UserHash.complete;
            $scope.ActiveUserHash = UserHash.active;
            $scope.ActiveUserList = UserHash.activeList;
        });

        $scope.m = {};
    };
})();

//Time Per Project Controller (FTE)
(function () {
    'use strict';

    angular.module('app.TimePerProject').controller('TimeProjectController', TimeProjectController);

    TimeProjectController.$inject = ['$scope', 'SiHttpUtil', 'DTOptionsBuilder', 'DTColumnBuilder', 'DTColumnDefBuilder', 'SiUtil', '$http', 'Global', '$stateParams', '$timeout', '$filter'];

    function TimeProjectController($scope, SiHttpUtil, DTOptionsBuilder, DTColumnBuilder, DTColumnDefBuilder, SiUtil, $http, Global, $stateParams, $timeout, $filter) {
        // Main model.
        $scope.global = Global;
        $scope.m = {
            tableName: "TimePerProject",
            activeTab: "ViewAllTab",
            dtColumns: [],
            tableData: null,
            TimeListToAdd: []
        };

        $scope.op = $stateParams.op;
        $scope.id = $stateParams.id;

        $scope.m.BulkCreateForm = {
            data: {
                timeToAdd: []
            },
            ui: {},
            submitted: false,
            projectCheck: false,
            validated: false,
            ResetTab: function () {
                SiHttpUtil.ResetForm($scope.m.BulkCreateForm);
                $scope.m.BulkCreateForm.data = {};
                $scope.m.BulkCreateForm.data.timeToAdd = [];
            },
            addEntry: function () {
                $scope.m.BulkCreateForm.data.timeToAdd.push({});
            },
            removeEntry: function (index) {
                $scope.m.BulkCreateForm.data.timeToAdd.splice(index, 1);
            },
            copyData: function (column) {
                var len = $scope.m.BulkCreateForm.data.timeToAdd.length;
                var entry = $scope.m.BulkCreateForm.data.timeToAdd[0][column];
                for (var i = 0; i < len; i++) {
                    $scope.m.BulkCreateForm.data.timeToAdd[i][column] = entry;
                }
            },
            SubmitTab: function () {
                $scope.m.BulkCreateForm.submitted = true;
                if (!$scope.m.BulkCreateForm.ui.validate.$valid) {
                    console.error($scope.m.BulkCreateForm.ui.validate);
                    return;
                }

                var newEntries = [];
                for (var i = 0; i < $scope.m.BulkCreateForm.data.timeToAdd.length; i++) {
                    const temp = {};
                    console.log($scope.m.BulkCreateForm.data.timeToAdd[i].projectId);
                    temp.TimeCat = $scope.m.BulkCreateForm.data.timeToAdd[i].TimeCat;
                    temp.ProjectID = $scope.m.BulkCreateForm.data.timeToAdd[i].projectId;
                    temp.PayPeriodID = $scope.m.BulkCreateForm.data.timeToAdd[i].PayPeriodId.id;
                    temp.TimeSpent = $scope.m.BulkCreateForm.data.timeToAdd[i].TimeSpent;
                    temp.PercentTime = $scope.m.BulkCreateForm.data.timeToAdd[i].TimeSpent + "%";
                    temp.Notes = $scope.m.BulkCreateForm.data.timeToAdd[i].Notes;
                    if (temp.TimeCat == 2) {
                        temp.ProjectID = null;
                    }

                    newEntries.push(temp);
                }

                console.log(newEntries);

                //This loop finds every set of payperiods and adds up the total % for each
                // Maybe here have a check to see if the existing entries don't already include that payperiod?
                var temp = [];
                var tempMap = new Map();
                for (var a of newEntries) {
                    if (!tempMap.has(a.PayPeriodID)) {
                        tempMap.set(a.PayPeriodID, true);
                        temp.push({
                            PayPeriodID: a.PayPeriodID,
                            TimeSpent: a.TimeSpent
                        });
                    } else {
                        for (var j of temp) {
                            if (a.PayPeriodID == j.PayPeriodID) {
                                j.TimeSpent = j.TimeSpent + a.TimeSpent;
                            };
                        };
                    };
                };

                //Need to confirm that each project has a project ID
                //If time spent is project and the project ID is undefined
                //
                for (var a of newEntries) {
                    if (typeof a.ProjectID === 'undefined') {
                        console.log("project " + $scope.m.BulkCreateForm.validated);
                        $scope.m.BulkCreateForm.projectCheck = false;
                        SiHttpUtil.NotifyErr("error", "Must select Project ID");
                        break;
                    } else $scope.m.BulkCreateForm.projectCheck = true;
                }

                //This loop checks existing entries in the database for records of this payperiod
                //This loop checks that each payperiod being submitted has the value of time spent equal to 100%
                //If it doesnt it breaks the loop and does not submit the data
                if ($scope.m.BulkCreateForm.projectCheck) {
                    for (var i of $scope.m.tableData) {
                        //console.log("valid " + $scope.m.BulkCreateForm.validated);
                        for (var valid of temp) {
                            /* if( i.PayPeriodID === valid.PayPeriodID){
                                 $scope.m.BulkCreateForm.validated = false;
                                 SiHttpUtil.NotifyErr("error", "One or more of the selected Pay Periods already exists");
                                 break;
                             } else */
                            if (valid.TimeSpent !== 100) {
                                $scope.m.BulkCreateForm.validated = false;
                                SiHttpUtil.NotifyErr("error", "One or more of the selected Pay Periods does not add up to 100%");
                                break;
                            } else {
                                $scope.m.BulkCreateForm.validated = true;
                            };
                        };
                    };
                    if ($scope.m.tableData.length === 0) {
                        for (var valid of temp) {
                            if (valid.TimeSpent !== 100) {
                                $scope.m.BulkCreateForm.validated = false;
                                SiHttpUtil.NotifyErr("error", "One or more of the selected Pay Periods does not add up to 100%");
                                break;
                            } else {
                                $scope.m.BulkCreateForm.validated = true;
                            };
                        };
                    }
                }

                //for( var valid of temp ){
                //    if( valid.TimeSpent !== 100 ) {
                //        $scope.m.BulkCreateForm.validated = false;
                //        SiHttpUtil.NotifyErr("error", "One or more of the selected Pay Periods does not add up to 100%")
                //        break;
                //    } else {
                //        $scope.m.BulkCreateForm.validated = true;
                //    };
                //};
                console.log($scope.m.BulkCreateForm.validated);

                if ($scope.m.BulkCreateForm.validated) {
                    var toCreate = {
                        tableName: "TimePerProject",
                        list: newEntries
                    };

                    SiHttpUtil.CreateTableEntries(toCreate).then(function (resp) {
                        if (resp.status == 200) {
                            $scope.m.BulkCreateForm.ResetTab();
                            $scope.m.activeTab = "ViewAllTab";
                            $scope.m.RefreshData();
                        }
                    });
                }
            }
        };

        $scope.m.ValidateBulkCreateInput = (FieldName, Type) => SiHttpUtil.ValidateInput($scope.m.BulkCreateForm.ui.validate, $scope.m.BulkCreateForm.submitted, FieldName, Type);

        $scope.m.RefreshData = () => {
            if ($scope.m.DtInstCallback) {
                if ($scope.m.DtInst) {
                    $scope.m.DtInst.changeData($scope.m.loadAll());
                } else {
                    $scope.m.loadAll();
                }
            }
        };

        SiHttpUtil.InitRowClick($scope);

        //$scope.m.dtColumns = [];

        $scope.m.LoadDataList = function () {
            return SiHttpUtil.FetchTableEntries($scope.m.tableName).then(function (resp) {
                return new Promise(function (resolve, reject) {
                    //$scope.m.tableData = resp.records;
                    //console.log( $scope.m.tableData);
                    $scope.m.tableData = resp.records.filter(function (e) {
                        return e.createdBy == SiHttpUtil.GetUserId();
                    });
                    if (resp.enums) {
                        var enumList = JSON.parse(resp.enums);
                    }
                    debugger;
                    if ($scope.m.tableData) {
                        if ($scope.m.tableData.length > 0) {
                            if ($scope.m.dtColumns.length === 0) {
                                SiHttpUtil.initDtColumns($scope.m.dtColumns, $scope.m.tableData, colName => SiHttpUtil.omitColumnForTable($scope.m.tableName, colName), colName => SiHttpUtil.dbColumnTranslator($scope.m.tableName, colName), colName => SiHttpUtil.hideColumnForTable($scope.m.tableName, colName));
                            }

                            $scope.m.dtColDefs = [DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'ProjectID')).renderWith( // Operator.
                            SiUtil.ColDisplayers.GetHashConvertDisplayer($scope.m.ProjectDisplayData.Hash)).withOption('type', 'natural').withOption('defaultContent', ''), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'PayPeriodID')).renderWith( // Operator.
                            SiUtil.ColDisplayers.GetHashConvertDisplayer($scope.m.PayPeriodsDisplayData.Hash)).withOption('type', 'natural').withOption('defaultContent', ''),
                            //need to add a column for Payperiod Enddate in addition to the name^^
                            DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'TimeCat')).renderWith(SiUtil.ColDisplayers.GetHashConvertDisplayer($scope.m.TimeSpentCategoriesDisplayData.Hash)).withOption('type', 'natural').withOption('defaultContent', ''), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'TimeSpent')).notVisible(),
                            //DTColumnDefBuilder
                            DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'createdBy')).notVisible(), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'updatedAt')).notVisible()];

                            $scope.m.dtOptions = SiHttpUtil.initDtOptions($scope.m.dtColumns, $scope.m.tableData, $scope.m.rowCallback, function () {
                                resolve($scope.m.tableData);
                                $scope.m.dataReady = true;
                                if ($scope.op == "view" && $scope.id) {
                                    var records = $scope.m.tableData;
                                    for (var i = 0; i < records.length; i++) {
                                        if (records[i].id == $scope.id) {
                                            $scope.m.currentRowData = records[i];
                                            break;
                                        }
                                    }
                                    $scope.m.viewDetail();
                                }
                                if ($scope.op == "create") {
                                    var records = $scope.m.tableData;
                                    $scope.m.activeTab = "CreateTab";
                                }
                            }).withOption('order', [['0', 'desc']]);
                        } else {
                            resolve($scope.m.tableData);
                        }
                    } else {
                        resolve($scope.m.tableData);
                    }
                });
            });
        };

        $scope.m.loadAll = function () {
            $scope.m.dp = SiUtil.dp.bind($scope.m)();

            var LoadTimeSpentCategoriesList = SiHttpUtil.FetchIdNameMapping('TimeSpentCategories').then(function (resp) {
                $scope.m.TimeSpentCategoriesList = resp;
                $scope.m.TimeSpentCategoriesDisplayData = SiHttpUtil.GetDependencyList($scope.m.TimeSpentCategoriesList);
                $scope.m.TimeSpentCategoriesListReady = true;
            });
            var LoadProjectList = SiHttpUtil.FetchIdNameMapping('project').then(function (resp) {
                $scope.m.ProjectList = [];
                var projList = [];
                projList.push("SI-1");
                projList.push("SI-2");
                projList.push("SI-3");
                projList.push("SI-4");
                projList.push("SI-32");
                projList.push("SI-35");
                projList.push("SI-38");
                projList.push("SI-39");
                projList.push("SI-41");
                projList.push("SI-48");
                projList.push("SI-49");
                projList.push("SI-60");
                projList.push("SI-61");
                projList.push("SI-64");
                projList.push("SI-69");
                projList.push("SI-71");
                projList.push("SI-75");
                projList.push("SI-76");
                projList.push("SI-77");
                projList.push("SI-78");
                projList.push("SI-84");

                for (var i = 0; i < resp.length; i++) {
                    for (var j = 0; j < projList.length; j++) {
                        if (resp[i].name == projList[j]) {
                            $scope.m.ProjectList.push(resp[i]);
                        }
                    }
                }

                $scope.m.ProjectDisplayData = SiHttpUtil.GetDependencyList($scope.m.ProjectList);
                $scope.m.ProjectListReady = true;
            });

            var LoadPayPeriodsList = SiHttpUtil.FetchIdNameMapping('PayPeriods').then(function (resp) {
                $scope.m.PayPeriodsList = resp;
                $scope.m.PayPeriodsDisplayData = SiHttpUtil.GetDependencyList($scope.m.PayPeriodsList);
                var payPeriodIDList = [];
                var payPeriods1 = Object.values($scope.m.PayPeriodsDisplayData.ListHash);
                for (var i = 0; i < payPeriods1.length; i++) {
                    payPeriodIDList.push(payPeriods1[i]['id']);
                }
                $scope.m.payPeriodIDs1 = payPeriodIDList;
                $scope.m.PayPeriodsListReady = true;
            });

            var LoadCompletedList = SiHttpUtil.FetchTableEntries('TimePerProject').then(function (resp) {
                $scope.m.CompletedList = resp.records;
                const userid = SiHttpUtil.GetUserId();
                $scope.m.CompletedListDisplayData = SiHttpUtil.GetDependencyList($scope.m.CompletedList);
                var completedList = [];
                var payPeriods2 = Object.values($scope.m.CompletedListDisplayData.ListHash);
                for (var i = 0; i < payPeriods2.length; i++) {
                    if (payPeriods2[i]['createdBy'] === userid) {
                        completedList.push(payPeriods2[i]['PayPeriodID']);
                    }
                }
                $scope.m.payPeriodIDs2 = completedList;
                $scope.m.CompletedListReady = true;
            });

            Promise.all([LoadTimeSpentCategoriesList, LoadProjectList, LoadPayPeriodsList, LoadCompletedList]).then(values => {
                const ds1 = $scope.m.PayPeriodsList;
                const ds2 = $scope.m.payPeriodIDs2;
                let startPayId = 0;
                if (SiHttpUtil.GetUserId() === 78) {
                    startPayId = 31;
                }
                if (SiHttpUtil.GetUserId() === 79) {
                    startPayId = 34;
                }
                if (SiHttpUtil.GetUserId() === 80) {
                    startPayId = 35;
                }
                if (SiHttpUtil.GetUserId() === 81) {
                    startPayId = 37;
                }
                if (SiHttpUtil.GetUserId() === 82) {
                    startPayId = 39;
                }
                if (SiHttpUtil.GetUserId() === 75) {
                    startPayId = 25;
                }
                if (SiHttpUtil.GetUserId() === 76) {
                    startPayId = 26;
                }
                const startPay = ds1.findIndex(i => i.id >= startPayId);
                ds1.splice(0, startPay);
                ds2.forEach(item => {
                    const index = ds1.findIndex(i => i.id === item);
                    if (index >= 0) {
                        ds1.splice(index, 1);
                    }
                });
                $scope.m.showList = ds1;
                $scope.m.LoadDataList();
            });
            /*var deps = []; // Dependencies.
            deps.push(LoadTimeSpentCategoriesList);
            deps.push(LoadProjectList);
            deps.push(LoadCompletedList);
            Promise.all(deps).then(values => {
                $scope.m.LoadDataList();
            });*/
        };
        $scope.m.loadAll();
    }
})();

//Inventory Controller
(function () {
    'use strict';

    angular.module('app.Inventory').controller('InventoryController', InventoryController);

    InventoryController.$inject = ['$scope', 'SiHttpUtil', 'DTOptionsBuilder', 'DTColumnBuilder', 'DTColumnDefBuilder', 'SiUtil', '$http', 'Global', '$stateParams', '$timeout', '$filter'];

    function InventoryController($scope, SiHttpUtil, DTOptionsBuilder, DTColumnBuilder, DTColumnDefBuilder, SiUtil, $http, Global, $stateParams, $timeout, $filter) {
        // Main model.
        $scope.global = Global;
        $scope.m = {
            tableName: "ProcurifyCSV",
            activeTab: "ViewAllTab",
            dtColumns: [],
            tableData: null,
            TimeListToAdd: []
        };
        $scope.op = $stateParams.op;
        $scope.id = $stateParams.id;

        $scope.m.ProcurifyCSV = {
            DtInstCallback: inst => {
                $scope.m.ProcurifyCSV.DtInst = inst;
            },
            dtColumns: [],
            tableData: [],
            //Different tabs associated with Procurify - Main table & Upload
            initData: () => {
                SiHttpUtil.FetchTableEntries('ProcurifyCSV').then(resp => {
                    debugger;
                    $scope.m.ProcurifyCSV.tableData = resp.records;
                    if ($scope.m.ProcurifyCSV.tableData && $scope.m.ProcurifyCSV.tableData.length > 0) {
                        if ($scope.m.ProcurifyCSV.dtColumns.length == 0) {
                            SiHttpUtil.initDtColumns($scope.m.ProcurifyCSV.dtColumns, $scope.m.ProcurifyCSV.tableData, colName => SiHttpUtil.omitColumnForTable('ProcurifyCSV', colName), colName => SiHttpUtil.dbColumnTranslator('ProcurifyCSV', colName));
                        }
                        $scope.m.ProcurifyCSV.dtColDefs = [];
                        $scope.m.ProcurifyCSV.dtOptions = SiHttpUtil.initDtOptions($scope.m.ProcurifyCSV.dtColumns, $scope.m.ProcurifyCSV.tableData, $scope.m.ProcurifyCSV.rowCallback, function () {
                            $scope.m.ProcurifyCSV.dataReady = true;
                            resolve($scope.m.ProcurifyCSV.tableData);
                        }).withOption('order', [['0', 'desc']]);
                    }
                });
            },
            RefreshData: () => {
                if ($scope.m.DtInstCallback) {
                    if ($scope.m.ProcurifyCSV.DtInst) {
                        $scope.m.activeTab = "ProcurifyCSV";
                        $scope.m.ProcurifyCSV.DtInst.changeData($scope.m.ProcurifyCSV.initData());
                        $scope.m.dataReady = true;
                        $scope.$digest();
                    } else {
                        $scope.m.activeTab = "ProcurifyCSV";
                        $scope.m.initData().then(function () {
                            $scope.m.dataReady = true;
                            $scope.$digest();
                        });
                    }
                }
            },
            viewForm: {
                CancelTab: () => {
                    $scope.m.activeTab = "ProcurifyCSV";
                    $scope.m.ProcurifyCSV.viewForm.show = false;
                    $scope.m.ProcurifyCSV.RefreshData();
                }
            },
            ui: {},
            submitted: false,

            upload: () => {
                $scope.m.activeTab = "ProcurifyStatementsImportTab";
                $scope.m.ProcurifyCSV.viewForm.show = true;
            } //end of Procurify Table

        };$scope.m.BulkCreateForm = {
            data: {
                timeToAdd: []
            },
            ui: {},
            submitted: false,
            projectCheck: false,
            validated: false,
            ResetTab: function () {
                SiHttpUtil.ResetForm($scope.m.BulkCreateForm);
                $scope.m.BulkCreateForm.data = {};
                $scope.m.BulkCreateForm.data.timeToAdd = [];
            },
            addEntry: function () {
                $scope.m.BulkCreateForm.data.timeToAdd.push({});
            },
            removeEntry: function (index) {
                $scope.m.BulkCreateForm.data.timeToAdd.splice(index, 1);
            },
            copyData: function (column) {
                var len = $scope.m.BulkCreateForm.data.timeToAdd.length;
                var entry = $scope.m.BulkCreateForm.data.timeToAdd[0][column];
                for (var i = 0; i < len; i++) {
                    $scope.m.BulkCreateForm.data.timeToAdd[i][column] = entry;
                }
            },
            SubmitTab: function () {
                $scope.m.BulkCreateForm.submitted = true;
                if (!$scope.m.BulkCreateForm.ui.validate.$valid) {
                    console.error($scope.m.BulkCreateForm.ui.validate);
                    return;
                }

                var newEntries = [];
                for (var i = 0; i < $scope.m.BulkCreateForm.data.timeToAdd.length; i++) {
                    const temp = {};
                    console.log($scope.m.BulkCreateForm.data.timeToAdd[i].projectId);
                    temp.TimeCat = $scope.m.BulkCreateForm.data.timeToAdd[i].TimeCat;
                    temp.ProjectID = $scope.m.BulkCreateForm.data.timeToAdd[i].projectId;
                    temp.PayPeriodID = $scope.m.BulkCreateForm.data.timeToAdd[i].PayPeriodId.id;
                    temp.TimeSpent = $scope.m.BulkCreateForm.data.timeToAdd[i].TimeSpent;
                    temp.PercentTime = $scope.m.BulkCreateForm.data.timeToAdd[i].TimeSpent + "%";
                    temp.Notes = $scope.m.BulkCreateForm.data.timeToAdd[i].Notes;
                    if (temp.TimeCat == 2) {
                        temp.ProjectID = null;
                    }

                    newEntries.push(temp);
                }

                console.log(newEntries);

                console.log($scope.m.BulkCreateForm.validated);

                if ($scope.m.BulkCreateForm.validated) {
                    var toCreate = {
                        tableName: "TimePerProject",
                        list: newEntries
                    };

                    SiHttpUtil.CreateTableEntries(toCreate).then(function (resp) {
                        if (resp.status == 200) {
                            $scope.m.BulkCreateForm.ResetTab();
                            $scope.m.activeTab = "ViewAllTab";
                            $scope.m.RefreshData();
                        }
                    });
                }
            }
        };

        $scope.m.ValidateBulkCreateInput = (FieldName, Type) => SiHttpUtil.ValidateInput($scope.m.BulkCreateForm.ui.validate, $scope.m.BulkCreateForm.submitted, FieldName, Type);

        $scope.m.RefreshData = () => {
            if ($scope.m.DtInstCallback) {
                if ($scope.m.DtInst) {
                    $scope.m.DtInst.changeData($scope.m.loadAll());
                } else {
                    $scope.m.loadAll();
                }
            }
        };

        SiHttpUtil.InitRowClick($scope);

        $scope.m.LoadDataList = function () {
            return SiHttpUtil.FetchTableEntries($scope.m.tableName).then(function (resp) {
                return new Promise(function (resolve, reject) {
                    //$scope.m.tableData = resp.records;
                    //console.log( $scope.m.tableData);
                    $scope.m.tableData = resp.records.filter(function (e) {
                        return e.createdBy == SiHttpUtil.GetUserId();
                    });
                    if (resp.enums) {
                        var enumList = JSON.parse(resp.enums);
                    }
                    if ($scope.m.tableData) {
                        if ($scope.m.tableData.length > 0) {
                            if ($scope.m.dtColumns.length === 0) {
                                SiHttpUtil.initDtColumns($scope.m.dtColumns, $scope.m.tableData, colName => SiHttpUtil.omitColumnForTable($scope.m.tableName, colName), colName => SiHttpUtil.dbColumnTranslator($scope.m.tableName, colName), colName => SiHttpUtil.hideColumnForTable($scope.m.tableName, colName));
                            }

                            $scope.m.dtColDefs = [DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'ProjectID')).renderWith( // Operator.
                            SiUtil.ColDisplayers.GetHashConvertDisplayer($scope.m.ProjectDisplayData.Hash)).withOption('type', 'natural').withOption('defaultContent', ''), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'PayPeriodID')).renderWith( // Operator.
                            SiUtil.ColDisplayers.GetHashConvertDisplayer($scope.m.PayPeriodsDisplayData.Hash)).withOption('type', 'natural').withOption('defaultContent', ''),
                            //need to add a column for Payperiod Enddate in addition to the name^^
                            DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'TimeCat')).renderWith(SiUtil.ColDisplayers.GetHashConvertDisplayer($scope.m.TimeSpentCategoriesDisplayData.Hash)).withOption('type', 'natural').withOption('defaultContent', ''), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'TimeSpent')).notVisible(),
                            //DTColumnDefBuilder
                            DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'createdBy')).notVisible(), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'updatedAt')).notVisible()];

                            $scope.m.dtOptions = SiHttpUtil.initDtOptions($scope.m.dtColumns, $scope.m.tableData, $scope.m.rowCallback, function () {
                                resolve($scope.m.tableData);
                                $scope.m.dataReady = true;
                                if ($scope.op == "view" && $scope.id) {
                                    var records = $scope.m.tableData;
                                    for (var i = 0; i < records.length; i++) {
                                        if (records[i].id == $scope.id) {
                                            $scope.m.currentRowData = records[i];
                                            break;
                                        }
                                    }
                                    $scope.m.viewDetail();
                                }
                                if ($scope.op == "create") {
                                    var records = $scope.m.tableData;
                                    $scope.m.activeTab = "CreateTab";
                                }
                            }).withOption('order', [['0', 'desc']]);
                        } else {
                            resolve($scope.m.tableData);
                        }
                    } else {
                        resolve($scope.m.tableData);
                    }
                });
            });
        };

        $scope.m.loadAll = function () {
            $scope.m.dp = SiUtil.dp.bind($scope.m)();

            var LoadTimeSpentCategoriesList = SiHttpUtil.FetchIdNameMapping('TimeSpentCategories').then(function (resp) {
                $scope.m.TimeSpentCategoriesList = resp;
                $scope.m.TimeSpentCategoriesDisplayData = SiHttpUtil.GetDependencyList($scope.m.TimeSpentCategoriesList);
                $scope.m.TimeSpentCategoriesListReady = true;
            });
            var LoadProjectList = SiHttpUtil.FetchIdNameMapping('project').then(function (resp) {
                $scope.m.ProjectList = [];
                var projList = [];
                projList.push("SI-1");

                for (var i = 0; i < resp.length; i++) {
                    for (var j = 0; j < projList.length; j++) {
                        if (resp[i].name == projList[j]) {
                            $scope.m.ProjectList.push(resp[i]);
                        }
                    }
                }

                $scope.m.ProjectDisplayData = SiHttpUtil.GetDependencyList($scope.m.ProjectList);
                $scope.m.ProjectListReady = true;
            });

            var LoadProcurifyList = SiHttpUtil.FetchTableEntries('ProcurifyCSV').then(function (resp) {
                $scope.m.ProcurifyCSV = resp.records;
                debugger;
                $scope.m.ProcurifyDisplayData = SiHttpUtil.GetDependencyList($scope.m.ProcurifyCSV);
                var ProcurifyList = [];
                for (var i = 0; i < $scope.m.ProcurifyCSV.length; i++) {
                    if ($scope.m.ProcurifyCSV[i]['shipToContact'] === 'Anne-Marie Rousseau') {
                        ProcurifyList.push($scope.m.ProcurifyCSV[i]);
                    }
                }
                $scope.m.Procurify = ProcurifyList;

                $scope.m.CompletedListReady = true;
            });

            var LoadCompletedList = SiHttpUtil.FetchTableEntries('TimePerProject').then(function (resp) {
                $scope.m.CompletedList = resp.records;
                const userid = SiHttpUtil.GetUserId();
                $scope.m.CompletedListDisplayData = SiHttpUtil.GetDependencyList($scope.m.CompletedList);
                var completedList = [];
                var payPeriods2 = Object.values($scope.m.CompletedListDisplayData.ListHash);
                for (var i = 0; i < payPeriods2.length; i++) {
                    if (payPeriods2[i]['createdBy'] === userid) {
                        completedList.push(payPeriods2[i]['PayPeriodID']);
                    }
                }
                $scope.m.payPeriodIDs2 = completedList;
                $scope.m.CompletedListReady = true;
            });

            Promise.all([LoadTimeSpentCategoriesList, LoadProjectList, LoadProcurifyList, LoadCompletedList]).then(values => {
                const ds1 = $scope.m.PayPeriodsList;
                const ds2 = $scope.m.payPeriodIDs2;
                let startPayId = 0;
                if (SiHttpUtil.GetUserId() === 78) {
                    startPayId = 31;
                }
                const startPay = ds1.findIndex(i => i.id >= startPayId);
                ds1.splice(0, startPay);
                ds2.forEach(item => {
                    const index = ds1.findIndex(i => i.id === item);
                    if (index >= 0) {
                        ds1.splice(index, 1);
                    }
                });
                $scope.m.showList = ds1;
                $scope.m.LoadDataList();
            });
        };
        $scope.m.loadAll();
    }
})();

(function () {
    'use strict';

    angular.module('app.tools').controller('HumanizationController', HumanizationController);
    HumanizationController.$inject = ['$scope', 'SiHttpUtil'];

    function HumanizationController($scope, SiHttpUtil) {}
})();
(function () {
    'use strict';

    angular.module('app.tools').controller('SequenceUtilsController', SequenceUtilsController);
    SequenceUtilsController.$inject = ['$scope', 'SiHttpUtil', '$http', 'Global'];

    function SequenceUtilsController($scope, SiHttpUtil, $http, Global) {
        $scope.m = {
            activeTab: "TrypsinFrags"
        };

        $scope.m.TrypsinFrags = {
            data: {},
            ui: {},
            dataReady: false,
            init: () => {
                SiHttpUtil.FetchIdNameMapping('protein').then(function (resp) {
                    $scope.m.ProteinDisplayData = SiHttpUtil.GetDependencyDisplayItemList(resp);
                });
            },
            SubmitTab: type => {
                $scope.m.TrypsinFrags.data.miss = 0;
                let options;
                if (type === "manual") {
                    options = {
                        method: "POST",
                        url: Global.gateway + '/seqUtils/getTrypsinFrags',
                        json: true,
                        data: {
                            sequence: $scope.m.TrypsinFrags.data.sequence,
                            miss: $scope.m.TrypsinFrags.data.miss
                        }
                    };
                } else {
                    options = {
                        method: "GET",
                        url: Global.gateway + '/seqUtils/getTrypsinFrags/' + $scope.m.TrypsinFrags.data.proteinId
                    };
                }
                $http(options).then(resp => {
                    $scope.m.TrypsinFrags.dataReady = true;
                    const seq = new Sequence(resp.data.sequence);
                    seq.render("#result", {
                        'charsPerLine': 100,
                        'search': true,
                        'badge': false,
                        'title': 'Fragments'
                    });
                    const coverage = [];
                    const colors = SiHttpUtil.GraphColors();
                    if (resp.data.fragments) {
                        for (let i = 0; i < resp.data.fragments.length; i++) {
                            const curr = resp.data.fragments[i];
                            coverage.push({
                                start: curr.start,
                                end: curr.end,
                                color: curr.count > 1 ? ['black', 'darkgray'][i % 2] : colors[i % (colors.length - 1)],
                                underscore: curr.count > 1,
                                tooltip: curr.count
                            });
                        }
                    }
                    seq.coverage(coverage);
                }, err => {
                    SiHttpUtil.NotifyOperationErr('Error: ' + err);
                });
            }
        };

        $scope.m.TrypsinFrags.init();
    }
})();

(function () {
    'use strict';

    angular.module('app.tools').controller('InstrumentDataController', InstrumentDataController);
    InstrumentDataController.$inject = ['$scope', 'SiHttpUtil', 'SiUtil', 'DTColumnDefBuilder'];

    function InstrumentDataController($scope, SiHttpUtil, SiUtil, DTColumnDefBuilder) {
        $scope.m = {
            getDateTime: SiUtil.getDateTime
        };
        $scope.m.ViCell = {
            DtInstCallback: inst => {
                $scope.m.ViCell.DtInst = inst;
            },
            dtColumns: [],
            tableData: [],
            initData: () => {
                SiHttpUtil.FetchTableEntries('viCellData').then(resp => {
                    $scope.m.ViCell.tableData = resp.records;
                    if ($scope.m.ViCell.tableData && $scope.m.ViCell.tableData.length > 0) {
                        if ($scope.m.ViCell.dtColumns.length == 0) {
                            SiHttpUtil.initDtColumns($scope.m.ViCell.dtColumns, $scope.m.ViCell.tableData, colName => SiHttpUtil.omitColumnForTable('viCell', colName), colName => SiHttpUtil.dbColumnTranslator('viCell', colName));
                        }
                        $scope.m.ViCell.dtColDefs = [DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.ViCell.dtColumns, 'runDate')).renderWith(SiUtil.ColDisplayers.DateTimeDisplayer)];
                        $scope.m.ViCell.dtOptions = SiHttpUtil.initDtOptions($scope.m.ViCell.dtColumns, $scope.m.ViCell.tableData, $scope.m.ViCell.rowCallback, function () {
                            $scope.m.ViCell.dataReady = true;
                            resolve($scope.m.ViCell.tableData);
                        }).withOption('order', [['0', 'desc']]);
                    }
                });
            },
            viewForm: {
                data: {},
                CancelTab: () => {
                    $scope.m.activeTab = "ViCellData";
                    $scope.m.ViCell.viewForm.show = false;
                }
            },
            viewDetail: () => {
                if ($scope.m.ViCell.currentRowData) {
                    SiHttpUtil.FetchOneEntry('viCellData', $scope.m.ViCell.currentRowData.id).then(resp => {
                        $scope.m.ViCell.viewForm.data = angular.copy(resp);
                    });
                    $scope.m.ViCell.viewForm.show = true;
                    $scope.m.activeTab = "ViCellDetailTab";
                }
            }
        };
        $scope.m.Akta = {
            DtInstCallback: inst => {
                $scope.m.Akta.DtInst = inst;
            },
            dtColumns: [],
            tableData: [],
            initData: () => {
                SiHttpUtil.FetchTableEntries('aktaData').then(resp => {
                    $scope.m.Akta.tableData = resp.records;
                    if ($scope.m.Akta.tableData && $scope.m.Akta.tableData.length > 0) {
                        if ($scope.m.Akta.dtColumns.length == 0) {
                            SiHttpUtil.initDtColumns($scope.m.Akta.dtColumns, $scope.m.Akta.tableData, colName => SiHttpUtil.omitColumnForTable('akta', colName), colName => SiHttpUtil.dbColumnTranslator('akta', colName));
                        }
                        $scope.m.Akta.dtColDefs = [DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.Akta.dtColumns, 'RunStartDate')).renderWith(SiUtil.ColDisplayers.DateTimeDisplayer)];
                        $scope.m.Akta.dtOptions = SiHttpUtil.initDtOptions($scope.m.Akta.dtColumns, $scope.m.Akta.tableData, $scope.m.Akta.rowCallback, function () {
                            $scope.m.Akta.dataReady = true;
                            resolve($scope.m.Akta.tableData);
                        }).withOption('order', [['0', 'desc']]);
                    }
                });
            }
            // viewForm: {
            //     data: {},
            //     CancelTab: () => {
            //         $scope.m.activeTab = "ViCellData";
            //         $scope.m.Akta.viewForm.show = false;
            //     }
            // },
            // viewDetail: () => {
            //     if ($scope.m.Akta.currentRowData) {
            //         SiHttpUtil.FetchOneEntry('viCellData', $scope.m.Akta.currentRowData.id).then(resp => {
            //             $scope.m.Akta.viewForm.data = angular.copy(resp);
            //         })
            //         $scope.m.Akta.viewForm.show = true;
            //         $scope.m.activeTab = "ViCellDetailTab";
            //     }
            // }
        };
        $scope.m.Nanodrop = {
            DtInstCallback: inst => {
                $scope.m.Nanodrop.DtInst = inst;
            },
            dtColumns: [],
            tableData: [],
            initData: () => {
                SiHttpUtil.FetchTableEntries('nanodropData').then(resp => {
                    $scope.m.Nanodrop.tableData = resp.records;
                    if ($scope.m.Nanodrop.tableData && $scope.m.Nanodrop.tableData.length > 0) {
                        if ($scope.m.Nanodrop.dtColumns.length == 0) {
                            SiHttpUtil.initDtColumns($scope.m.Nanodrop.dtColumns, $scope.m.Nanodrop.tableData, colName => SiHttpUtil.omitColumnForTable('nanodrop', colName), colName => SiHttpUtil.dbColumnTranslator('nanodrop', colName));
                        }
                        $scope.m.Nanodrop.dtColDefs = [];
                        $scope.m.Nanodrop.dtOptions = SiHttpUtil.initDtOptions($scope.m.Nanodrop.dtColumns, $scope.m.Nanodrop.tableData, $scope.m.Nanodrop.rowCallback, function () {
                            $scope.m.Nanodrop.dataReady = true;
                            resolve($scope.m.Nanodrop.tableData);
                        }).withOption('order', []);
                    }
                });
            },
            viewForm: {
                data: {},
                CancelTab: () => {
                    $scope.m.activeTab = "NanodropData";
                    $scope.m.Nanodrop.viewForm.show = false;
                }
            },
            viewDetail: () => {
                if ($scope.m.Nanodrop.currentRowData) {
                    SiHttpUtil.FetchOneEntry('nanodropData', $scope.m.Nanodrop.currentRowData.id).then(resp => {
                        $scope.m.Nanodrop.viewForm.data = angular.copy(resp);
                        $scope.m.Nanodrop.viewForm.equipmentSerial = $scope.m.Nanodrop.currentRowData.equipmentSerial;
                        $scope.m.Nanodrop.viewForm.id = $scope.m.Nanodrop.currentRowData.id;
                        $scope.m.Nanodrop.viewForm.experimentName = $scope.m.Nanodrop.currentRowData.experimentName;
                        $scope.m.Nanodrop.viewForm.applicationType = $scope.m.Nanodrop.currentRowData.applicationType;
                    });
                    $scope.m.Nanodrop.viewForm.show = true;
                    $scope.m.activeTab = "NanodropDetailTab";
                }
            }
        };
        $scope.m.pH = {
            DtInstCallback: inst => {
                $scope.m.pH.DtInst = inst;
            },
            dtColumns: [],
            tableData: [],
            initData: () => {
                SiHttpUtil.FetchTableEntries('pHData').then(resp => {
                    $scope.m.pH.tableData = resp.records;
                    if ($scope.m.pH.tableData && $scope.m.pH.tableData.length > 0) {
                        if ($scope.m.pH.dtColumns.length == 0) {
                            SiHttpUtil.initDtColumns($scope.m.pH.dtColumns, $scope.m.pH.tableData, colName => SiHttpUtil.omitColumnForTable('pH', colName), colName => SiHttpUtil.dbColumnTranslator('pH', colName));
                        }
                        $scope.m.pH.dtColDefs = [DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.pH.dtColumns, 'PcDateTime')).renderWith(SiUtil.ColDisplayers.DateTimeDisplayer)];
                        $scope.m.pH.dtOptions = SiHttpUtil.initDtOptions($scope.m.pH.dtColumns, $scope.m.pH.tableData, $scope.m.pH.rowCallback, function () {
                            $scope.m.pH.dataReady = true;
                            resolve($scope.m.pH.tableData);
                        }).withOption('order', []);
                    }
                });
            },
            viewForm: {
                data: {},
                CancelTab: () => {
                    $scope.m.activeTab = "pHData";
                    $scope.m.pH.viewForm.show = false;
                }
            },
            viewDetail: () => {
                if ($scope.m.pH.currentRowData) {
                    $scope.m.pH.viewForm.data = angular.copy($scope.m.pH.currentRowData);
                    $scope.m.pH.viewForm.show = true;
                    $scope.m.activeTab = "pHDetailTab";
                }
            }
        };
        $scope.m.Osmo = {
            DtInstCallback: inst => {
                $scope.m.Osmo.DtInst = inst;
            },
            dtColumns: [],
            tableData: [],
            initData: () => {
                SiHttpUtil.FetchTableEntries('osmoData').then(resp => {
                    $scope.m.Osmo.tableData = resp.records;
                    if ($scope.m.Osmo.tableData && $scope.m.Osmo.tableData.length > 0) {
                        if ($scope.m.Osmo.dtColumns.length == 0) {
                            SiHttpUtil.initDtColumns($scope.m.Osmo.dtColumns, $scope.m.Osmo.tableData, colName => SiHttpUtil.omitColumnForTable('osmo', colName), colName => SiHttpUtil.dbColumnTranslator('osmo', colName));
                        }
                        $scope.m.Osmo.dtColDefs = [DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.Osmo.dtColumns, 'date')).renderWith(SiUtil.ColDisplayers.DateTimeDisplayer)];
                        $scope.m.Osmo.dtOptions = SiHttpUtil.initDtOptions($scope.m.Osmo.dtColumns, $scope.m.Osmo.tableData, $scope.m.Osmo.rowCallback, function () {
                            $scope.m.Osmo.dataReady = true;
                            resolve($scope.m.Osmo.tableData);
                        }).withOption('order', []);
                    }
                });
            },
            viewForm: {
                data: {},
                CancelTab: () => {
                    $scope.m.activeTab = "osmoData";
                    $scope.m.Osmo.viewForm.show = false;
                }
            },
            viewDetail: () => {
                if ($scope.m.Osmo.currentRowData) {
                    $scope.m.Osmo.viewForm.data = angular.copy($scope.m.Osmo.currentRowData);
                    $scope.m.Osmo.viewForm.show = true;
                    $scope.m.activeTab = "OsmoDetailTab";
                }
            }
        };
        $scope.m.ViCell.initData();
        SiHttpUtil.InitRowClick($scope, 'ViCell');
        SiHttpUtil.InitRowClick($scope, 'Akta');
        SiHttpUtil.InitRowClick($scope, 'Nanodrop');
        SiHttpUtil.InitRowClick($scope, 'pH');
        SiHttpUtil.InitRowClick($scope, 'Osmo');
    }
})();
(function () {
    'use strict';

    angular.module('app.facilities').controller('FreezerController', FreezerController);
    FreezerController.$inject = ['$scope', 'SiHttpUtil', 'DTOptionsBuilder', 'DTColumnBuilder', 'DTColumnDefBuilder', 'SiUtil', '$http', 'Global', '$stateParams', '$timeout'];

    function FreezerController($scope, SiHttpUtil, DTOptionsBuilder, DTColumnBuilder, DTColumnDefBuilder, SiUtil, $http, Global, $stateParams, $timeout) {
        $scope.global = Global;
        $scope.m = {
            tableName: "FreezerProLog",
            activeTab: "ViewAllTab",
            tableData: null,
            TimeListToAdd: []
        };

        //$scope.tableState.currentTable = $scope.m.tableName;
        $scope.op = $stateParams.op;
        $scope.id = $stateParams.id;

        $scope.m.RefreshData = () => {
            if ($scope.m.DtInstCallback) {
                if ($scope.m.DtInst) {
                    $scope.m.DtInst.changeData($scope.m.LoadDataList());
                } else {
                    $scope.m.LoadDataList();
                }
            }
        };

        SiHttpUtil.InitRowClick($scope);

        $scope.m.dtColumns = [];

        $scope.m.LoadDataList = function () {
            return SiHttpUtil.FetchTableEntries($scope.m.tableName).then(function (resp) {
                return new Promise(function (resolve, reject) {
                    $scope.m.tableData = resp.records;
                    if ($scope.m.tableData && $scope.m.tableData.length > 0) {
                        if ($scope.m.dtColumns.length === 0) {
                            SiHttpUtil.initDtColumns($scope.m.dtColumns, $scope.m.tableData, colName => SiHttpUtil.omitColumnForTable($scope.m.tableName, colName), colName => SiHttpUtil.dbColumnTranslator($scope.m.tableName, colName), colName => SiHttpUtil.hideColumnForTable($scope.m.tableName, colName), SiHttpUtil.tableOrder($scope.m.tableName));
                        }

                        $scope.m.dtColDefs = [DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'createdBy')).renderWith(SiUtil.ColDisplayers.GetHashConvertDisplayer($scope.UserHash)), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'updatedAt')).renderWith(SiUtil.ColDisplayers.ShortDateDisplayer)];

                        $scope.m.dtOptions = SiHttpUtil.initDtOptions($scope.m.dtColumns, $scope.m.tableData, $scope.m.rowCallback, function () {
                            resolve($scope.m.tableData);
                            $scope.m.dataReady = true;
                            if ($scope.m.op === "view" && $scope.m.id) {
                                const records = $scope.m.tableData;
                                for (let i = 0; i < records.length; i++) {
                                    if (records[i].id == $scope.m.id) {
                                        $scope.m.currentRowData = records[i];
                                        break;
                                    }
                                }
                                $scope.m.viewDetail();
                            }
                            if ($scope.op === "create") {
                                $scope.m.activeTab = "CreateTab";
                            }
                        }).withOption('order', [[SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'Date'), 'desc']]);
                    } else {
                        resolve($scope.m.tableData);
                    }
                });
            });
        };

        var deps = []; // Dependencies.;
        Promise.all(deps).then(values => {
            $scope.m.LoadDataList();
        });
        $scope.m.LoadDataList();

        $scope.m.Import = {
            data: {
                lotsToAdd: []
            },
            ui: {},
            submitted: false,

            ResetTab: function () {
                SiHttpUtil.ResetForm($scope.m.Import);
                $scope.m.Import.data.lotsToAdd = [];
            },
            dpOpen: function ($event, input) {
                $event.preventDefault();
                $event.stopPropagation();
                input.opened = !input.opened;
            },
            addEntry: function () {
                $scope.m.Import.data.lotsToAdd.push({});
                //console.log("addEntry: " + $scope.m.BulkLotCreate.data.lotsToAdd)
            },
            removeEntry: function (index) {
                $scope.m.Import.data.lotsToAdd.splice(index, 1);
            },

            parseCSV: function () {
                //console.log("do i get here");
                var formData = new FormData();
                formData.append('file', document.getElementById('file').files[0]);
                SiHttpUtil.POSTRequest(SiHttpUtil.helperAPIUrl + "parseFeezerProAuditLog/", formData).then(function (resp) {
                    SiHttpUtil.NotifyOk("Please review data changes");
                    var curr;
                    for (let i = 0; i < resp.length; i++) {
                        const curr = resp[i];
                        $scope.m.Import.data.lotsToAdd.push({
                            User: curr.User,
                            Date: curr.Date,
                            Time: curr.Time,
                            Object: curr.Object,
                            ArchiveRecord: curr.ArchiveRecord,
                            Comment: curr.Comment
                        });
                        console.log($scope.m.Import.data.lotsToAdd);
                    }
                    $scope.m.Import.SubmitTab();
                    $scope.m.ShowImportBtn = false;
                    console.log("Parse: Does it get here?");
                }, function (err) {
                    SiHttpUtil.NotifyOperationErr("CSV Parse Error");
                    $scope.m.ShowImportBtn = true;
                });
            },
            SubmitTab: function () {
                $scope.m.Import.submitted = true;
                if (!$scope.m.Import.ui.validate.$valid) {
                    //    console.error($scope.m.BulkLotCreate.ui.validate);
                    return;
                }

                var newEntries = [];
                for (var i = 0; i < $scope.m.Import.data.lotsToAdd.length; i++) {
                    const temp = {};
                    temp.User = $scope.m.Import.data.lotsToAdd[i].User, temp.Date = $scope.m.Import.data.lotsToAdd[i].Date, temp.Time = $scope.m.Import.data.lotsToAdd[i].Time, temp.Object = $scope.m.Import.data.lotsToAdd[i].Object, temp.ArchiveRecord = $scope.m.Import.data.lotsToAdd[i].ArchiveRecord, temp.Comment = $scope.m.Import.data.lotsToAdd[i].Comment;

                    newEntries.push(temp);
                }

                var toCreate = {
                    tableName: "FreezerProLog",
                    list: newEntries
                };

                SiHttpUtil.CreateTableEntries(toCreate).then(function (resp) {
                    if (resp.status == 200) {
                        $scope.m.Import.ResetTab();
                        $scope.m.activeTab = "ViewAllTab";
                        $scope.m.RefreshData();
                    }
                });
            }
        };

        $scope.m.InitHandler = () => SiHttpUtil.InitJqueryImportCSVChangeHandler($scope);
    }
})();
(function () {
    'use strict';

    angular.module('app.facilities').controller('MapController', MapController);
    MapController.$inject = ['$scope', 'SiHttpUtil', 'SiUtil', '$uibModal', '$timeout'];

    function MapController($scope, SiHttpUtil, SiUtil, $uibModal, $timeout) {
        var top = "text";
        var layers = ["base", "elec120", "elec240", "elec208", "fire", "lights", "data", "text"];
        $scope.m = {};
        for (var i = 0; i < layers.length; i++) {
            $scope.m[layers[i]] = true;
        }
        // TODO Refactor this
        $timeout(function () {
            for (var i = 0; i < layers.length; i++) {
                window[layers[i]] = svgPanZoom('#' + layers[i], {
                    zoomEnabled: true,
                    dblClickZoomEnabled: false,
                    minZoom: 1.25,
                    center: 1,
                    fit: 1,
                    contain: true
                });
            }
            window[top].setOnZoom(level => {
                for (var i = 0; i < layers.length - 1; i++) {
                    window[layers[i]].zoom(level);
                    window[layers[i]].pan(window[top].getPan());
                }
            });
            window[top].setOnPan(function (point) {
                for (var i = 0; i < layers.length - 1; i++) {
                    window[layers[i]].pan(point);
                }
            });
        }, 1000);
    }
})();
(function () {
    'use strict';

    angular.module('app.facilities').controller('NetworkController', NetworkController);
    NetworkController.$inject = ['$scope', 'SiHttpUtil', 'SiUtil'];

    function NetworkController($scope, SiHttpUtil, SiUtil) {}
})();
(function () {
    'use strict';

    angular.module('app.facilities').controller('ElectricalController', ElectricalController);
    ElectricalController.$inject = ['$scope', 'SiHttpUtil', 'SiUtil', 'DTColumnDefBuilder', '$timeout'];

    function ElectricalController($scope, SiHttpUtil, SiUtil, DTColumnDefBuilder, $timeout) {
        $scope.m = {
            activeTab: "SummaryTab",
            hoverDetails: [],
            hoverDetailsReady: false
        };
        $scope.m.Equipment = {
            CreateForm: {
                init: () => {
                    $scope.m.activeTab = "CreateEquipment";
                    $scope.m.Equipment.CreateForm.show = true;
                },
                data: {},
                submitted: false,
                ui: {},
                CancelTab: () => {
                    $scope.m.activeTab = "EquipmentTab";
                    $scope.m.Equipment.CreateForm.show = false;
                },
                SubmitTab: () => {
                    $scope.m.Equipment.CreateForm.submitted = true;
                    if (!$scope.m.Equipment.CreateForm.ui.validate.$valid) {
                        console.error($scope.m.Equipment.CreateForm.ui.validate);
                        return;
                    }

                    SiHttpUtil.CreateTableEntry({
                        tableName: "equipment",
                        name: $scope.m.Equipment.CreateForm.data.name,
                        circuitId: $scope.m.Equipment.CreateForm.data.circuitId,
                        usage: $scope.m.Equipment.CreateForm.data.usage,
                        network: $scope.m.Equipment.CreateForm.data.network,
                        notes: $scope.m.Equipment.CreateForm.data.notes
                    }).then(resp => {
                        if (resp.status == 200) {
                            SiHttpUtil.ResetForm($scope.m.Equipment.CreateForm);
                            $scope.m.Equipment.CreateForm.CancelTab();
                            $scope.m.Equipment.RefreshData();
                        }
                    });
                }
            },
            editForm: {
                data: {},
                ui: {},
                show: false,
                CancelTab: () => {
                    $scope.m.activeTab = "EquipmentTab";
                    $scope.m.Equipment.editForm.show = false;
                },
                Delete: () => {
                    SiHttpUtil.DeleteDataEntry('equipment', $scope.m.Equipment.editForm.id).then(resp => {
                        if (resp.status == 200) {
                            $scope.m.Equipment.editForm.CancelTab();
                            $scope.m.Equipment.RefreshData();
                        }
                    });
                },
                SubmitTab: () => {
                    $scope.m.Equipment.editForm.submitted = true;
                    if (!$scope.m.Equipment.editForm.ui.validate.$valid) {
                        console.error($scope.m.Equipment.editForm.ui.validate);
                        return;
                    }

                    SiHttpUtil.UpdateDataEntry({
                        tableName: "equipment",
                        id: $scope.m.Equipment.editForm.id,
                        name: $scope.m.Equipment.editForm.name,
                        circuitId: $scope.m.Equipment.editForm.circuitId,
                        usage: $scope.m.Equipment.editForm.usage,
                        network: $scope.m.Equipment.editForm.network,
                        notes: $scope.m.Equipment.editForm.notes
                    }).then(resp => {
                        if (resp.status == 200) {
                            $scope.m.Equipment.editForm.CancelTab();
                            $scope.m.Equipment.RefreshData();
                        }
                    });
                }
            },
            editDetail: () => {
                if ($scope.m.Equipment.currentRowData) {
                    $scope.m.activeTab = "EditEquipment";
                    $scope.m.Equipment.editForm.show = true;
                    $scope.m.Equipment.editForm.id = $scope.m.Equipment.currentRowData.id;
                    $scope.m.Equipment.editForm.name = $scope.m.Equipment.currentRowData.name;
                    $scope.m.Equipment.editForm.circuitId = $scope.m.Equipment.currentRowData.circuitId;
                    $scope.m.Equipment.editForm.usage = $scope.m.Equipment.currentRowData.usage;
                    $scope.m.Equipment.editForm.network = $scope.m.Equipment.currentRowData.network;
                    $scope.m.Equipment.editForm.notes = $scope.m.Equipment.currentRowData.notes;
                }
            },
            dtColumns: [],
            tableData: [],
            DtInstCallback: inst => {
                $scope.m.Equipment.DtInst = inst;
            },
            RefreshData: () => {
                if ($scope.m.Equipment.DtInstCallback) {
                    if ($scope.m.Equipment.DtInst) {
                        $scope.m.Equipment.DtInst.changeData($scope.m.Equipment.LoadData());
                    } else {
                        $scope.m.Equipment.LoadData().then(() => {
                            $scope.m.Equipment.dataReady = true;
                            $scope.$digest();
                        });
                    }
                }
            },
            LoadData: () => {
                return SiHttpUtil.FetchTableEntries('equipment').then(function (resp) {
                    return new Promise(function (resolve, reject) {
                        if (resp.enums) {
                            var enumList = JSON.parse(resp.enums);
                            $scope.enums = enumList;
                        }
                        $scope.m.Equipment.tableData = resp.records;
                        if ($scope.m.Equipment.tableData && $scope.m.Equipment.tableData.length > 0) {
                            if ($scope.m.Equipment.dtColumns.length == 0) {
                                SiHttpUtil.initDtColumns($scope.m.Equipment.dtColumns, $scope.m.Equipment.tableData, colName => SiHttpUtil.omitColumnForTable('equipment', colName), colName => SiHttpUtil.dbColumnTranslator('equipment', colName));
                            }
                            $scope.m.Equipment.dtColDefs = [DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.Equipment.dtColumns, 'createdBy')).renderWith(SiUtil.ColDisplayers.GetHashConvertDisplayer($scope.UserHash)), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.Equipment.dtColumns, 'updatedAt')).renderWith(SiUtil.ColDisplayers.ShortDateDisplayer)];
                            $scope.m.Equipment.dtOptions = SiHttpUtil.initDtOptions($scope.m.Equipment.dtColumns, $scope.m.Equipment.tableData, $scope.m.Equipment.rowCallback, function () {
                                resolve($scope.m.Equipment.tableData);
                                $scope.m.Equipment.dataReady = true;
                                if ($scope.op == "view" && $scope.id) {
                                    var records = $scope.m.Equipment.tableData;
                                    for (var i = 0; i < records.length; i++) {
                                        if (records[i].id == $scope.id) {
                                            $scope.m.Equipment.currentRowData = records[i];
                                            break;
                                        }
                                    }
                                    $scope.m.viewDetail();
                                }
                            }).withColReorderOrder([0, 1, 2, 7, 8, 3, 4, 5, 6]);
                        }
                    });
                });
            }
        };

        $scope.m.Circuit = {
            CreateForm: {
                init: () => {
                    $scope.m.activeTab = "CreateCircuit";
                    $scope.m.Circuit.CreateForm.show = true;
                },
                data: {},
                submitted: false,
                ui: {},
                CancelTab: () => {
                    $scope.m.activeTab = "CircuitTab";
                    $scope.m.Circuit.CreateForm.show = false;
                },
                SubmitTab: () => {
                    $scope.m.Circuit.CreateForm.submitted = true;
                    if (!$scope.m.Circuit.CreateForm.ui.validate.$valid) {
                        console.error($scope.m.Circuit.CreateForm.ui.validate);
                        return;
                    }

                    SiHttpUtil.CreateTableEntry({
                        tableName: "circuit",
                        name: $scope.m.Circuit.CreateForm.data.name,
                        location: $scope.m.Circuit.CreateForm.data.location,
                        voltage: $scope.m.Circuit.CreateForm.data.voltage,
                        capacity: $scope.m.Circuit.CreateForm.data.capacity,
                        notes: $scope.m.Circuit.CreateForm.data.notes
                    }).then(resp => {
                        if (resp.status == 200) {
                            SiHttpUtil.ResetForm($scope.m.Circuit.CreateForm);
                            $scope.m.Circuit.CreateForm.CancelTab();
                            $scope.m.Circuit.RefreshData();
                        }
                    });
                }
            },
            editForm: {
                data: {},
                ui: {},
                show: false,
                CancelTab: () => {
                    $scope.m.activeTab = "CircuitTab";
                    $scope.m.Circuit.editForm.show = false;
                },
                Delete: () => {
                    SiHttpUtil.DeleteDataEntry('circuit', $scope.m.Circuit.editForm.id).then(resp => {
                        if (resp.status == 200) {
                            $scope.m.Circuit.editForm.CancelTab();
                            $scope.m.Circuit.RefreshData();
                        }
                    });
                },
                SubmitTab: () => {
                    $scope.m.Circuit.editForm.submitted = true;
                    if (!$scope.m.Circuit.editForm.ui.validate.$valid) {
                        console.error($scope.m.Circuit.editForm.ui.validate);
                        return;
                    }

                    SiHttpUtil.UpdateDataEntry({
                        tableName: "circuit",
                        id: $scope.m.Circuit.editForm.id,
                        name: $scope.m.Circuit.editForm.name,
                        location: $scope.m.Circuit.editForm.location,
                        voltage: $scope.m.Circuit.editForm.voltage,
                        capacity: $scope.m.Circuit.editForm.capacity,
                        notes: $scope.m.Circuit.editForm.notes
                    }).then(resp => {
                        if (resp.status == 200) {
                            $scope.m.Circuit.editForm.CancelTab();
                            $scope.m.Circuit.RefreshData();
                        }
                    });
                }
            },
            editDetail: () => {
                if ($scope.m.Circuit.currentRowData) {
                    $scope.m.activeTab = "EditCircuit";
                    $scope.m.Circuit.editForm.show = true;
                    $scope.m.Circuit.editForm.id = $scope.m.Circuit.currentRowData.id;
                    $scope.m.Circuit.editForm.name = $scope.m.Circuit.currentRowData.name;
                    $scope.m.Circuit.editForm.location = $scope.m.Circuit.currentRowData.location;
                    $scope.m.Circuit.editForm.voltage = $scope.m.Circuit.currentRowData.voltage;
                    $scope.m.Circuit.editForm.capacity = $scope.m.Circuit.currentRowData.capacity;
                    $scope.m.Circuit.editForm.notes = $scope.m.Circuit.currentRowData.notes;
                }
            },
            dtColumns: [],
            tableData: [],
            DtInstCallback: inst => {
                $scope.m.Circuit.DtInst = inst;
            },
            RefreshData: () => {
                if ($scope.m.Circuit.DtInstCallback) {
                    if ($scope.m.Circuit.DtInst) {
                        $scope.m.Circuit.DtInst.changeData($scope.m.Circuit.LoadData());
                    } else {
                        $scope.m.Circuit.LoadData().then(() => {
                            $scope.m.Circuit.dataReady = true;
                            $scope.$digest();
                        });
                    }
                }
            },
            LoadData: () => {
                return SiHttpUtil.FetchTableEntries('circuit').then(function (resp) {
                    return new Promise(function (resolve, reject) {
                        if (resp.enums) {
                            var enumList = JSON.parse(resp.enums);
                            $scope.enums = enumList;
                        }
                        $scope.m.Circuit.tableData = resp.records;
                        if ($scope.m.Circuit.tableData && $scope.m.Circuit.tableData.length > 0) {
                            if ($scope.m.Circuit.dtColumns.length == 0) {
                                SiHttpUtil.initDtColumns($scope.m.Circuit.dtColumns, $scope.m.Circuit.tableData, colName => SiHttpUtil.omitColumnForTable('circuit', colName), colName => SiHttpUtil.dbColumnTranslator('circuit', colName));
                            }
                            $scope.m.Circuit.dtColDefs = [DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.Circuit.dtColumns, 'createdBy')).renderWith(SiUtil.ColDisplayers.GetHashConvertDisplayer($scope.UserHash)), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.Circuit.dtColumns, 'updatedAt')).renderWith(SiUtil.ColDisplayers.ShortDateDisplayer)];
                            $scope.m.Circuit.dtOptions = SiHttpUtil.initDtOptions($scope.m.Circuit.dtColumns, $scope.m.Circuit.tableData, $scope.m.Circuit.rowCallback, function () {
                                resolve($scope.m.Circuit.tableData);
                                $scope.m.Circuit.dataReady = true;
                                if ($scope.op == "view" && $scope.id) {
                                    var records = $scope.m.Circuit.tableData;
                                    for (var i = 0; i < records.length; i++) {
                                        if (records[i].id == $scope.id) {
                                            $scope.m.Circuit.currentRowData = records[i];
                                            break;
                                        }
                                    }
                                    $scope.m.viewDetail();
                                }
                            });
                        }
                    });
                });
            }
        };

        $scope.m.Equipment.LoadData();
        $scope.m.Circuit.LoadData();
        SiHttpUtil.InitRowClick($scope, 'Equipment');
        SiHttpUtil.InitRowClick($scope, 'Circuit');

        $scope.m.CircuitHover = function (name) {
            $scope.m.hoverDetails.ready = false;
            $scope.m.hoverDetails = [];
            SiHttpUtil.SearchByColumn('circuit', { name: name }).then(resp => {
                if (resp.length > 0) {
                    for (var i = 0; i < resp.length; i++) {
                        $scope.m.hoverDetails.push(resp[i]);
                    }
                    $scope.m.hoverDetailsReady = true;
                } else {
                    $scope.m.hoverDetailsReady = false;
                }
            });
        };

        $timeout(function () {
            svgPanZoom('#electrical', {
                zoomEnabled: true,
                dblClickZoomEnabled: false,
                disableMouseEventsDefault: false,
                minZoom: 1.25,
                center: true,
                fit: true,
                contain: true
            });
        }, 1500);
    }
})();
// FACILITIES controllers
// Instruments
(function () {
    'use strict';

    angular.module('app.facilities').controller('InstrumentController', InstrumentController);

    InstrumentController.$inject = ['$scope', 'SiHttpUtil', 'DTColumnDefBuilder', 'SiUtil', '$stateParams'];

    function InstrumentController($scope, SiHttpUtil, DTColumnDefBuilder, SiUtil, $stateParams) {
        // Main model.
        $scope.m = {
            tableData: null,
            dtColumns: [],
            tableName: "instrument",
            activeTab: "ViewAllTab",
            op: $stateParams.op,
            id: $stateParams.id,
            DtInstCallback: inst => {
                $scope.m.DtInst = inst;
            },
            RefreshData: () => {
                if ($scope.m.DtInstCallback) {
                    if ($scope.m.DtInst) {
                        $scope.m.DtInst.changeData($scope.m.LoadDataList());
                    } else {
                        $scope.m.LoadDataList();
                    }
                }
            }
            //InitFileHandler: () => SiHttpUtil.InitJqueryImportCSVChangeHandler($scope, 'file'),
        };

        $scope.m.viewForm = SiHttpUtil.InitViewForm($scope.m);

        $scope.m.editForm = {
            data: {},
            show: false,
            submitted: false,
            ui: {},
            CancelTab: () => SiHttpUtil.HideTab($scope.m, $scope.m.editForm),
            Delete: () => {
                SiHttpUtil.DeleteDataEntry($scope.m.tableName, $scope.m.currentRowData.id).then(() => {
                    $scope.m.editForm.CancelTab();
                    $scope.m.RefreshData();
                });
            },
            SubmitTab: function () {
                $scope.m.editForm.submitted = true;
                if (!$scope.m.editForm.ui.validate.$valid) {
                    console.error($scope.m.editForm.ui.validate);
                    return;
                }
                SiHttpUtil.UpdateDataEntry({
                    tableName: $scope.m.tableName,
                    id: $scope.m.editForm.data.id,
                    name: $scope.m.editForm.data.name,
                    notes: $scope.m.editForm.data.notes,
                    group: $scope.m.editForm.data.group,
                    updatedAt: $scope.m.editForm.data.updatedAt
                }).then(resp => {
                    if (resp.status == 200) {
                        $scope.m.editForm.CancelTab();
                        $scope.m.RefreshData();
                        $scope.m.resetSelection();
                    }
                });
            }
        };
        $scope.m.CreateForm = {
            data: {},
            ui: {},
            submitted: false,
            ResetTab: function (createAnother) {
                SiHttpUtil.ResetForm($scope.m.CreateForm);
                if (!createAnother) {
                    $scope.m.activeTab = "ViewAllTab";
                }
            },
            SubmitTab: function () {
                $scope.m.CreateForm.submitted = true;
                if (!$scope.m.CreateForm.ui.validate.$valid) {
                    console.error($scope.m.CreateForm.ui.validate);
                    return;
                }
                const toCreate = {
                    tableName: $scope.m.tableName,
                    name: $scope.m.CreateForm.data.name,
                    notes: $scope.m.CreateForm.data.notes,
                    group: $scope.m.CreateForm.data.group
                };

                SiHttpUtil.CreateTableEntry(toCreate).then(function (resp) {
                    if (resp.status == 200) {
                        $scope.m.CreateForm.ResetTab($scope.m.CreateForm.data.another);
                        $scope.m.RefreshData();
                    }
                });
            }
        };

        SiHttpUtil.InitRowClick($scope);

        $scope.m.ValidateCreateInput = (FieldName, Type) => SiHttpUtil.ValidateInput($scope.m.CreateForm.ui.validate, $scope.m.CreateForm.submitted, FieldName, Type);
        $scope.m.ValidateEditInput = (FieldName, Type) => SiHttpUtil.ValidateInput($scope.m.editForm.ui.validate, $scope.m.editForm.submitted, FieldName, Type);

        $scope.m.LoadDataList = function () {
            return SiHttpUtil.FetchTableEntries($scope.m.tableName).then(function (resp) {
                return new Promise(function (resolve, reject) {
                    $scope.m.tableData = resp.records;
                    if (resp.enums) {
                        var enumList = JSON.parse(resp.enums);
                        $scope.instrumentGroups = enumList.ENUM_instrumentGroup;
                    }
                    if ($scope.m.tableData && $scope.m.tableData.length > 0) {
                        if ($scope.m.dtColumns.length === 0) {
                            SiHttpUtil.initDtColumns($scope.m.dtColumns, $scope.m.tableData, colName => SiHttpUtil.omitColumnForTable($scope.m.tableName, colName), colName => SiHttpUtil.dbColumnTranslator($scope.m.tableName, colName), colName => SiHttpUtil.hideColumnForTable($scope.m.tableName, colName), SiHttpUtil.tableOrder($scope.m.tableName));
                        }

                        $scope.m.dtColDefs = [DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'createdBy')).renderWith(SiUtil.ColDisplayers.GetHashConvertDisplayer($scope.UserHash)), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'updatedAt')).renderWith(SiUtil.ColDisplayers.ShortDateDisplayer)];

                        $scope.m.dtOptions = SiHttpUtil.initDtOptions($scope.m.dtColumns, $scope.m.tableData, $scope.m.rowCallback, function () {
                            resolve($scope.m.tableData);
                            $scope.m.dataReady = true;
                            if ($scope.m.op === "view" && $scope.m.id) {
                                const records = $scope.m.tableData;
                                for (let i = 0; i < records.length; i++) {
                                    if (records[i].id == $scope.m.id) {
                                        $scope.m.currentRowData = records[i];
                                        break;
                                    }
                                }
                                $scope.m.viewDetail();
                            }
                            if ($scope.op === "create") {
                                $scope.m.activeTab = "CreateTab";
                            }
                        });
                    } else {
                        resolve($scope.m.tableData);
                    }
                });
            });
        };

        // Copy model to views.
        $scope.m.viewDetail = function () {
            if ($scope.m.currentRowData) {
                $scope.m.viewForm.data = angular.copy($scope.m.currentRowData);
                $scope.m.viewForm.data.createdAt = SiUtil.getDateOnly($scope.m.currentRowData.createdAt);
                $scope.m.viewForm.data.updatedAt = SiUtil.getDateOnly($scope.m.currentRowData.updatedAt);
                $scope.m.viewForm.show = true;
                $scope.m.activeTab = "DetailTab";
            }
        };

        $scope.m.editDetail = function () {
            if ($scope.m.currentRowData) {
                $scope.m.editForm.data = angular.copy($scope.m.currentRowData);
                $scope.m.editForm.show = true;
                $scope.m.activeTab = "EditTab";
            }
        };

        $scope.m.dp = SiUtil.dp.bind($scope.m)();
        $scope.m.LoadDataList();
    }
})();
(function () {
    'use strict';

    angular.module('app.project').controller('ProjectsController', ProjectsController);
    ProjectsController.$inject = ['$scope', '$http', 'Global', 'Notify', '$stateParams', 'SiHttpUtil', 'SiUtil', '$state'];

    function ProjectsController($scope, $http, Global, Notify, $stateParams, SiHttpUtil, SiUtil, $state) {
        $scope.tableState = {};
        $scope.projectList = [];
        $scope.tableState.currentTable = "active";
        console.log("table:", $scope.tableState.currentTable);
        $scope.getFormattedStatus = SiUtil.getFormattedStatus;
        $scope.switchProjectTable = function () {
            console.log("table:", $scope.tableState.currentTable);
            if ($scope.tableState.currentTable == 'active') {
                $state.go("app.project");
            } else if ($scope.tableState.currentTable) {
                $state.go("app.project." + $scope.tableState.currentTable);
            }
        };
        $scope.tableName = "projects";
        // Dirty hack to workaround Angular/Chosen <select> off by 1 bug.
        // See: https://github.com/leocaseiro/angular-chosen/issues/8
        $scope.$watch(function () {
            return $(".chosen-select option").length;
        }, function (newvalue, oldvalue) {
            if (newvalue !== oldvalue) {
                $(".chosen-select").trigger("chosen:updated");
            }
        });

        $scope.loadAll = function () {
            $scope.UserHash = null;
            var CacheUsers = SiHttpUtil.CacheUserHash().then(function (UserHash) {
                $scope.UserHash = UserHash.complete;
                $scope.ActiveUserHash = UserHash.active;
                $scope.ActiveUserList = UserHash.activeList;
            });
            var deps = []; // Dependencies.
            deps.push(CacheUsers);
            Promise.all(deps).then(values => {
                var query = { active: true };
                SiHttpUtil.SearchByColumn('project', query).then(resp => {
                    $scope.projectList = resp;
                });
            });
        };
        $scope.loadAll();
    }
})();
(function () {
    'use strict';

    angular.module('app.project').controller('ProjectTableController', ProjectTableController);
    ProjectTableController.$inject = ['$scope', '$state', '$stateParams', 'DTOptionsBuilder', 'DTColumnBuilder', 'DTColumnDefBuilder', 'SiHttpUtil', 'SiUtil'];
    function ProjectTableController($scope, $state, $stateParams, DTOptionsBuilder, DTColumnBuilder, DTColumnDefBuilder, SiHttpUtil, SiUtil) {
        $scope.tableState = {
            currentTable: "projects"
        };
        $scope.m = {
            tableData: [],
            dtColumns: [],
            activeTab: "ViewAllTab"
        };

        $scope.m.editForm = {
            data: {
                usersToRemove: []
            },
            show: false,
            submitted: false,
            ui: {},
            CancelTab: () => SiHttpUtil.HideTab($scope.m, $scope.m.editForm),
            SubmitTab: function () {
                $scope.m.editForm.submitted = true;
                if (!$scope.m.editForm.ui.validate.$valid) {
                    console.error($scope.m.editForm.ui.validate);
                    return;
                }
                SiHttpUtil.UpdateDataEntry({
                    tableName: "project",
                    id: $scope.m.editForm.id,
                    description: $scope.m.editForm.description,
                    targets: $scope.m.editForm.targets,
                    goals: $scope.m.editForm.goals,
                    platforms: $scope.m.editForm.platforms ? angular.toJson($scope.m.editForm.platforms) : null,
                    usersToRemove: $scope.m.editForm.data.usersToRemove,
                    references: angular.toJson($scope.m.editForm.RefLinkList.data),
                    properties: $scope.m.editForm.sharePointGroup,
                    stages: $scope.m.editForm.stages,
                    status: $scope.m.editForm.status,
                    updatedAt: $scope.m.editForm.updatedAt
                }).then(resp => {
                    if (resp.status == 200) {
                        $scope.m.editForm.CancelTab();
                        $scope.m.RefreshData();
                        $scope.m.editForm.data.usersToRemove = [];
                        SiHttpUtil.ResetStateParams();
                    }
                });
            },
            addLeader: () => {
                var entry = {};
                $scope.m.editForm.stages.push(entry);
            },
            removeLeader: index => {
                var currEntry = $scope.m.editForm.stages[index];
                if (currEntry.old) {
                    $scope.m.editForm.data.usersToRemove.push(currEntry.userId);
                }
                $scope.m.editForm.stages.splice(index, 1);
            }
        };
        $scope.m.CreateForm = {
            data: {},
            ui: {},
            submitted: false,
            ResetTab: function () {
                SiHttpUtil.ResetTab($scope.m, $scope.m.CreateForm);
            },
            SubmitTab: function () {
                $scope.m.CreateForm.submitted = true;
                if (!$scope.m.CreateForm.ui.validate.$valid) {
                    console.error($scope.m.CreateForm.ui.validate);
                    return;
                }
                var toCreate = {
                    tableName: "project",
                    description: $scope.m.CreateForm.data.description,
                    targets: $scope.m.CreateForm.data.targets,
                    goals: $scope.m.CreateForm.data.goals,
                    platforms: $scope.m.CreateForm.data.platforms ? angular.toJson($scope.m.CreateForm.data.platforms) : null,
                    stages: $scope.m.CreateForm.data.stages,
                    status: $scope.m.CreateForm.data.status
                };

                SiHttpUtil.CreateTableEntry(toCreate).then(function (resp) {
                    if (resp.status == 200) {
                        $scope.m.CreateForm.ResetTab($scope.m.CreateForm.data.another);
                        $scope.m.RefreshData();
                    }
                });
            }
        };
        $scope.m.ValidateCreateInput = (FieldName, Type) => SiHttpUtil.ValidateInput($scope.m.CreateForm.ui.validate, $scope.m.CreateForm.submitted, FieldName, Type);
        $scope.m.ValidateEditInput = (FieldName, Type) => SiHttpUtil.ValidateInput($scope.m.editForm.ui.validate, $scope.m.editForm.submitted, FieldName, Type);

        $scope.m.DtInstCallback = function (inst) {
            console.log("dt:", inst);
            $scope.m.DtInst = inst;
        };

        $scope.m.RefreshData = () => {
            if ($scope.m.DtInstCallback) {
                if ($scope.m.DtInst) {
                    $scope.m.DtInst.changeData($scope.m.refreshProjects());
                } else {
                    $scope.m.refreshProjects().then(function () {
                        $scope.m.dataReady = true;
                        $scope.$digest();
                    });
                }
            }
        };

        SiHttpUtil.InitRowClick($scope);

        $scope.m.refreshProjects = function () {
            return SiHttpUtil.FetchTableEntries('project').then(function (response) {
                return new Promise(function (resolve, reject) {
                    $scope.m.tableData = response.records;
                    $scope.enums = JSON.parse(response.enums);
                    $scope.sections = $scope.enums.ENUM_sectionName;
                    $scope.statuses = $scope.enums.ENUM_status;
                    $scope.platforms = $scope.enums.ENUM_platform;
                    $scope.stages = $scope.enums.ENUM_stage;

                    if ($scope.m.tableData && $scope.m.tableData.length > 0) {
                        if ($scope.m.dtColumns.length == 0) {
                            SiHttpUtil.initDtColumns($scope.m.dtColumns, $scope.m.tableData, colName => SiHttpUtil.omitColumnForTable('project', colName), colName => SiHttpUtil.dbColumnTranslator('project', colName));
                        }
                        $scope.m.dtColDefs = [DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'description')).renderWith(SiUtil.ColDisplayers.DescriptionDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'projectLeaderId')).renderWith(SiUtil.ColDisplayers.GetHashConvertDisplayer($scope.UserHash)), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'status')).renderWith(SiUtil.ColDisplayers.StatusDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'platforms')).renderWith(SiUtil.ColDisplayers.ListDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'createdBy')).notVisible(), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'updatedAt')).renderWith( //CreatedAt.
                        SiUtil.ColDisplayers.ShortDateDisplayer)];
                        $scope.m.dtOptions = SiHttpUtil.initDtOptions($scope.m.dtColumns, $scope.m.tableData, $scope.m.rowCallback, function () {
                            resolve($scope.m.tableData);
                            $scope.m.projectsReady = true;
                            if ($stateParams.op == "edit" && $stateParams.id) {
                                for (var i = 0; i < $scope.m.tableData.length; i++) {
                                    if ($scope.m.tableData[i].id == $stateParams.id) {
                                        $scope.m.currentRowData = $scope.m.tableData[i];
                                        break;
                                    }
                                }
                                $scope.editProject();
                            }
                        }).withColReorderOrder([0, 1, 2, 3, 7, 8, 4, 5, 6]);
                    }
                });
            });
        };
        $scope.editProject = function () {
            if ($scope.m.currentRowData) {
                $scope.m.editForm.show = true;
                $scope.m.activeTab = "EditTab";
                $scope.m.editForm.id = $scope.m.currentRowData.id;
                $scope.m.editForm.name = $scope.m.currentRowData.name;
                $scope.m.editForm.description = $scope.m.currentRowData.description;
                $scope.m.editForm.targets = $scope.m.currentRowData.targets;
                $scope.m.editForm.goals = $scope.m.currentRowData.goals;
                $scope.m.editForm.platforms = angular.fromJson($scope.m.currentRowData.platforms);
                $scope.m.editForm.stages = [];
                $scope.m.editForm.sharePointGroup = $scope.m.currentRowData.properties;
                $scope.m.editForm.status = $scope.m.currentRowData.status;
                $scope.m.editForm.updatedAt = $scope.m.currentRowData.updatedAt;
                SiHttpUtil.FetchOneEntry('project', $scope.m.currentRowData.id).then(resp => {
                    for (var i = 0; i < resp.Users.length; i++) {
                        $scope.m.editForm.stages.push({
                            userId: resp.Users[i].id,
                            stage: resp.Users[i].ProjectStage.stage,
                            old: true
                        });
                    }
                });

                $scope.m.editForm.RefLinkList = {
                    data: JSON.parse($scope.m.currentRowData.references) || [],
                    nameList: $scope.sections
                };
            }
        };
        $scope.m.refreshProjects();
    }
})();
(function () {
    'use strict';

    angular.module('app.project').controller('ProjectDetailsController', ProjectDetailsController);
    ProjectDetailsController.$inject = ['$scope', '$state', '$stateParams', 'SiHttpUtil', 'SiUtil', '$http', 'DTOptionsBuilder', 'DTColumnBuilder', 'DTColumnDefBuilder'];

    function ProjectDetailsController($scope, $state, $stateParams, SiHttpUtil, SiUtil, $http, DTOptionsBuilder, DTColumnBuilder, DTColumnDefBuilder) {
        $scope.tableState.currentTable = "";
        $scope.m = {
            viewDetails: {
                id: $stateParams.id
            }
        };

        $scope.m.plasmids = {
            DtInstCallback: inst => {
                $scope.m.plasmids.DtInst = inst;
            },
            dtColumns: [],
            tableData: [],
            initData: () => {
                SiHttpUtil.SearchByProject('plasmids', $scope.m.viewDetails.id).then(resp => {
                    $scope.m.plasmids.tableData = resp;
                    if ($scope.m.plasmids.tableData && $scope.m.plasmids.tableData.length > 0) {
                        if ($scope.m.plasmids.dtColumns.length == 0) {
                            SiHttpUtil.initDtColumns($scope.m.plasmids.dtColumns, $scope.m.plasmids.tableData, colName => SiHttpUtil.omitColumnForTable('plasmid', colName), colName => SiHttpUtil.dbColumnTranslator('plasmid', colName));
                        }
                        $scope.m.plasmids.dtColDefs = [DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.plasmids.dtColumns, 'name')).renderWith((data, type, full) => {
                            return '<a href="#!/app/research/plasmids?op=view&id=' + full.id + '">' + data + '</a>';
                        }), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.plasmids.dtColumns, 'createdBy')).renderWith(SiUtil.ColDisplayers.GetHashConvertDisplayer($scope.UserHash))];
                        $scope.m.plasmids.dtOptions = SiHttpUtil.initDtOptions($scope.m.plasmids.dtColumns, $scope.m.plasmids.tableData, null, function () {
                            $scope.m.plasmids.dataReady = true;
                            resolve($scope.m.plasmids.tableData);
                        });
                    }
                });
            }
        };
        $scope.m.proteins = {
            DtInstCallback: inst => {
                $scope.m.proteins.DtInst = inst;
            },
            dtColumns: [],
            tableData: [],
            initData: () => {
                SiHttpUtil.SearchByProject('protein', $scope.m.viewDetails.id).then(resp => {
                    $scope.m.proteins.tableData = resp;
                    if ($scope.m.proteins.tableData && $scope.m.proteins.tableData.length > 0) {
                        if ($scope.m.proteins.dtColumns.length == 0) {
                            SiHttpUtil.initDtColumns($scope.m.proteins.dtColumns, $scope.m.proteins.tableData, colName => SiHttpUtil.omitColumnForTable('protein', colName), colName => SiHttpUtil.dbColumnTranslator('protein', colName));
                        }
                        $scope.m.proteins.dtColDefs = [DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.proteins.dtColumns, 'name')).renderWith((data, type, full) => {
                            return '<a href="#!/app/research/proteins?op=view&id=' + full.id + '">' + data + '</a>';
                        }), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.proteins.dtColumns, 'createdBy')).renderWith(SiUtil.ColDisplayers.GetHashConvertDisplayer($scope.UserHash))];
                        $scope.m.proteins.dtOptions = SiHttpUtil.initDtOptions($scope.m.proteins.dtColumns, $scope.m.proteins.tableData, null, function () {
                            $scope.m.proteins.dataReady = true;
                            resolve($scope.m.proteins.tableData);
                        });
                    }
                });
            }
        };
        $scope.m.ade = {
            DtInstCallback: inst => {
                $scope.m.ade.DtInst = inst;
            },
            dtColumns: [],
            tableData: [],
            initData: () => {
                SiHttpUtil.SearchByProject('adeSummary', $scope.m.viewDetails.id).then(resp => {
                    $scope.m.ade.tableData = resp;
                    if ($scope.m.ade.tableData && $scope.m.ade.tableData.length > 0) {
                        if ($scope.m.ade.dtColumns.length == 0) {
                            SiHttpUtil.initDtColumns($scope.m.ade.dtColumns, $scope.m.ade.tableData, colName => SiHttpUtil.omitColumnForTable('adeSummary', colName), colName => SiHttpUtil.dbColumnTranslator('adeSummary', colName));
                        }
                        $scope.m.ade.dtColDefs = [DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.ade.dtColumns, 'name')).renderWith((data, type, full) => {
                            return '<a href="#!/app/ade/activation?op=view&id=' + full.id + '">' + data + '</a>';
                        }), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.ade.dtColumns, 'date')).renderWith(SiUtil.ColDisplayers.ShortDateDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.ade.dtColumns, 'createdBy')).renderWith(SiUtil.ColDisplayers.GetHashConvertDisplayer($scope.UserHash))];
                        $scope.m.ade.dtOptions = SiHttpUtil.initDtOptions($scope.m.ade.dtColumns, $scope.m.ade.tableData, null, function () {
                            $scope.m.ade.dataReady = true;
                            resolve($scope.m.ade.tableData);
                        }).withColReorderOrder([0, 1, 2, 6, 7, 4, 5, 3, 8, 9]);
                    }
                });
            }
        };
        $scope.m.cellLines = {
            DtInstCallback: inst => {
                $scope.m.cellLines.DtInst = inst;
            },
            dtColumns: [],
            tableData: [],
            initData: () => {
                SiHttpUtil.SearchByProject('cellLineHarvest', $scope.m.viewDetails.id).then(resp => {
                    $scope.m.cellLines.tableData = resp;
                    if ($scope.m.cellLines.tableData && $scope.m.cellLines.tableData.length > 0) {
                        if ($scope.m.cellLines.dtColumns.length == 0) {
                            SiHttpUtil.initDtColumns($scope.m.cellLines.dtColumns, $scope.m.cellLines.tableData, colName => SiHttpUtil.omitColumnForTable('cellLineHarvest', colName), colName => SiHttpUtil.dbColumnTranslator('cellLineHarvest', colName));
                        }
                        $scope.m.cellLines.dtColDefs = [DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.cellLines.dtColumns, 'name')).notVisible(), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.cellLines.dtColumns, 'wellName')).renderWith((data, type, full) => {
                            return '<a href="#!/app/pd/cellLineHarvest?op=view&id=' + full.id + '">' + data + '</a>';
                        }), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.cellLines.dtColumns, 'harvestDate')).renderWith(SiUtil.ColDisplayers.ShortDateDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.cellLines.dtColumns, 'purificationDate')).renderWith(SiUtil.ColDisplayers.ShortDateDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.cellLines.dtColumns, 'createdBy')).renderWith(SiUtil.ColDisplayers.GetHashConvertDisplayer($scope.UserHash))];
                        $scope.m.cellLines.dtOptions = SiHttpUtil.initDtOptions($scope.m.cellLines.dtColumns, $scope.m.cellLines.tableData, null, function () {
                            $scope.m.cellLines.dataReady = true;
                            resolve($scope.m.cellLines.tableData);
                        }).withColReorderOrder([0, 1, 2, 6, 7, 4, 5, 3, 8, 9]);
                    }
                });
            }
        };
        $scope.m.bioreactorExp = {
            DtInstCallback: inst => {
                $scope.m.bioreactorExp.DtInst = inst;
            },
            dtColumns: [],
            tableData: [],
            initData: () => {
                SiHttpUtil.SearchByProject('bioreactorExperiment', $scope.m.viewDetails.id).then(resp => {
                    $scope.m.bioreactorExp.tableData = resp;
                    if ($scope.m.bioreactorExp.tableData && $scope.m.bioreactorExp.tableData.length > 0) {
                        if ($scope.m.bioreactorExp.dtColumns.length == 0) {
                            SiHttpUtil.initDtColumns($scope.m.bioreactorExp.dtColumns, $scope.m.bioreactorExp.tableData, colName => SiHttpUtil.omitColumnForTable('bioreactorExperiment', colName), colName => SiHttpUtil.dbColumnTranslator('bioreactorExperiment', colName));
                        }
                        $scope.m.bioreactorExp.dtColDefs = [DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.bioreactorExp.dtColumns, 'name')).renderWith((data, type, full) => {
                            return '<a href="#!/app/pd/bioreactorExperiment?op=view&id=' + full.id + '">' + data + '</a>';
                        }), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.bioreactorExp.dtColumns, 'createdBy')).renderWith(SiUtil.ColDisplayers.GetHashConvertDisplayer($scope.UserHash)), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.bioreactorExp.dtColumns, 'inoculationDate')).renderWith(SiUtil.ColDisplayers.DateTimeDisplayer)];
                        $scope.m.bioreactorExp.dtOptions = SiHttpUtil.initDtOptions($scope.m.bioreactorExp.dtColumns, $scope.m.bioreactorExp.tableData, null, function () {
                            $scope.m.bioreactorExp.dataReady = true;
                            resolve($scope.m.bioreactorExp.tableData);
                        });
                    }
                });
            }
        };

        $scope.m.loadDetails = () => {
            SiHttpUtil.FetchOneEntry('project', $scope.m.viewDetails.id).then(resp => {
                $scope.projectGraphs($scope.m.viewDetails.id);
                $scope.m.viewDetails.name = resp.name;
                $scope.m.viewDetails.description = resp.description;
                $scope.m.viewDetails.Users = resp.Users;
                $scope.m.viewDetails.status = SiUtil.getFormattedStatus(resp.status);
                $scope.m.viewDetails.platforms = angular.fromJson(resp.platforms);
                $scope.m.viewDetails.targets = resp.targets;
                $scope.m.viewDetails.references = angular.fromJson(resp.references) || [];
                $scope.m.viewDetails.sharePointGroup = resp.properties;
            });
            $scope.m.plasmids.initData();
        };

        $scope.m.initProteins = () => {
            SiHttpUtil.SearchByProject('protein', $scope.m.viewDetails.id).then(resp => {
                $scope.m.proteinRowData = resp.records;
            });
        };

        $scope.projectGraphs = id => {
            $http({
                url: SiHttpUtil.helperAPIUrl + "/projectgraphapi/" + id,
                method: "GET"
            }).then(resp => {
                $scope.m.viewDetails.sparklines = resp.data.projectCounts;
                $scope.dataReady = true;
            });
        };

        $scope.m.loadDetails();
    }
})();

(function () {
    'use strict';

    angular.module('app.dashboard').controller('AdministrationController', AdministrationController);
    AdministrationController.$inject = ['$scope', '$http', 'Global', 'SiHttpUtil', 'SiUtil', 'DTColumnDefBuilder', 'DTColumnBuilder', '$uibModal', '$compile'];

    function AdministrationController($scope, $http, Global, SiHttpUtil, SiUtil, DTColumnDefBuilder, DTColumnBuilder, $uibModal, $compile) {
        // Fixes the angular chosen off by one error
        $scope.$watch(function () {
            return $(".chosen-select option").length;
        }, function (newvalue, oldvalue) {
            if (newvalue !== oldvalue) {
                $(".chosen-select").trigger("chosen:updated");
            }
        });
        $scope.global = Global;
        $scope.m = {
            tableData: [],
            dtColumns: [],
            DtInstCallback: inst => {
                $scope.m.DtInst = inst;
            }
        };
        $scope.getReadableTimestamp = SiUtil.getReadableTimestamp;

        $scope.m.RefreshData = () => {
            if ($scope.m.DtInstCallback) {
                if ($scope.m.DtInst) {
                    $scope.m.DtInst.changeData($scope.m.LoadUserList());
                } else {
                    $scope.m.LoadUserList();
                }
            }
        };

        $scope.m.LoadUserList = function () {
            return $http.get($scope.global.gateway + "/getuserlist/").then(function (resp) {
                return new Promise(function (resolve, reject) {
                    $scope.m.tableData = resp.data;
                    $scope.m.UsersDisplayData = SiHttpUtil.GetDependencyList(resp.data);
                    if (resp.enums) {
                        var enumList = JSON.parse(resp.enums);
                    }
                    if ($scope.m.tableData && $scope.m.tableData.length > 0) {
                        if ($scope.m.dtColumns.length == 0) {
                            SiHttpUtil.initDtColumns($scope.m.dtColumns, $scope.m.tableData, colName => SiHttpUtil.omitColumnForTable('user', colName), colName => SiHttpUtil.dbColumnTranslator('user', colName), colName => SiHttpUtil.hideColumnForTable('user', colName));
                            $scope.m.dtColumns.push(DTColumnBuilder.newColumn(null).withTitle('Actions').renderWith($scope.m.actionsHtml));
                        }

                        $scope.m.dtColDefs = [DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'updatedAt')).renderWith(SiUtil.ColDisplayers.DateTimeDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'roles')).renderWith(SiUtil.ColDisplayers.DescriptionDisplayer)];
                        $scope.m.dtOptions = SiHttpUtil.initDtOptions($scope.m.dtColumns, $scope.m.tableData, $scope.m.rowCallback, function () {
                            resolve($scope.m.tableData);
                            $scope.m.dataReady = true;
                        }).withOption('order', [[0, 'desc']]).withDisplayLength(25).withOption('createdRow', createdRow);;
                    } else {
                        resolve($scope.m.tableData);
                    }
                });
            });
        };

        $scope.m.LoadRoleList = function () {
            $http.get($scope.global.gateway + "/getRoleList/").then(function (resp) {
                $scope.m.roleData = resp.data;
            });
            SiHttpUtil.FetchEnumList(['roles']).then(function (resp) {
                $scope.m.permissions = resp.permissions;
            });
        };

        $scope.m.UserForm = {
            data: {},
            Delete: id => {
                $http({
                    url: $scope.global.gateway + "/deleteuser/",
                    method: "POST",
                    data: { id: id }
                }).then(function (response) {
                    $scope.m.RefreshData();
                    SiHttpUtil.NotifyOk("User deleted successfully");
                }, function (error) {
                    SiHttpUtil.NotifyErr(error, "Delete User failed");
                    console.log("deleteUserPayload error:", error);
                });
            },
            Edit: id => {
                angular.copy($scope.m.UsersDisplayData.ListHash[id], $scope.m.UserForm.data);
                $scope.m.UserForm.data.tableHistoryDisplayList = [];
                const histories = $scope.m.UserForm.data.tableHistories ? angular.fromJson($scope.m.UserForm.data.tableHistories) : [];
                $scope.m.UserForm.data.tableHistoryDisplayList = histories.map(entry => {
                    return {
                        tableName: SiUtil.dbTableTranslator(entry.tableName),
                        time: SiUtil.getReadableTimestamp(entry.time)
                    };
                });
                const modalInstance = $uibModal.open({
                    animation: true,
                    scope: $scope,
                    templateUrl: 'editUser.html',
                    size: 'lg',
                    controller: function ($scope) {
                        $scope.m.UserForm.Edit.close = () => {
                            modalInstance.close();
                        };
                    }
                });
            },
            AddRole: role => {
                $http({
                    url: $scope.global.gateway + "/associateRole/",
                    method: "POST",
                    data: { id: $scope.m.UserForm.data.id, roleId: role.id, type: "add" }
                }).then(function (response) {
                    $scope.m.UserForm.data.Roles.push(role);
                    $scope.m.RefreshData();
                    SiHttpUtil.NotifyOk("Added role successfully");
                }, function (error) {
                    SiHttpUtil.NotifyErr(error, "Add role failed");
                });
            },
            RemoveRole: index => {
                var roleId = $scope.m.UserForm.data.Roles[index].id;
                $http({
                    url: $scope.global.gateway + "/associateRole/",
                    method: "POST",
                    data: { id: $scope.m.UserForm.data.id, roleId: roleId, type: "remove" }
                }).then(function (response) {
                    $scope.m.UserForm.data.Roles.splice(index, 1);
                    $scope.m.RefreshData();
                    SiHttpUtil.NotifyOk("Added role successfully");
                }, function (error) {
                    SiHttpUtil.NotifyErr(error, "Add role failed");
                });
            }
        };

        $scope.m.RoleForm = {
            data: {},
            Edit: role => {
                angular.copy(role, $scope.m.RoleForm.data);
                $scope.m.RoleForm.data.permissions = angular.fromJson($scope.m.RoleForm.data.permissions);
                var modalInstance = $uibModal.open({
                    animation: true,
                    scope: $scope,
                    templateUrl: 'editRole.html',
                    //size: 'lg',
                    controller: function ($scope) {
                        $scope.m.RoleForm.close = () => {
                            modalInstance.close();
                        };
                    }
                });
            },
            AddPerm: () => {
                let perm = $scope.m.RoleForm.data.permToAdd;
                if ($scope.m.RoleForm.data.permissions.indexOf(perm) > 0) {
                    SiHttpUtil.NotifyOperationErr("Permission already added");
                    return;
                }
                $scope.m.RoleForm.data.permissions.push(perm);
            },
            RemovePerm: index => {
                $scope.m.RoleForm.data.permissions.splice(index, 1);
            },
            Save: () => {
                var permissionsJson = angular.toJson($scope.m.RoleForm.data.permissions);
                $http({
                    url: $scope.global.gateway + "/updateRole/",
                    method: "POST",
                    data: {
                        id: $scope.m.RoleForm.data.id,
                        name: $scope.m.RoleForm.data.name,
                        permissions: permissionsJson
                    }
                }).then(function (response) {
                    $scope.m.LoadRoleList();
                    $scope.m.RoleForm.close();
                    SiHttpUtil.NotifyOk("Role updated successfully");
                }, function (error) {
                    SiHttpUtil.NotifyErr(error, "Role update failed");
                });
            },
            Delete: id => {
                $http({
                    url: $scope.global.gateway + "/deleteRole/",
                    method: "POST",
                    data: { id: id }
                }).then(function (response) {
                    $scope.m.LoadRoleList();
                    SiHttpUtil.NotifyOk("Role deleted successfully");
                }, function (error) {
                    SiHttpUtil.NotifyErr(error, "Role User failed");
                    console.log("deleteRole error:", error);
                });
            }
        };

        $scope.m.CreateRoleForm = {
            data: {
                permissions: []
            },
            Open: () => {
                var modalInstance = $uibModal.open({
                    animation: true,
                    scope: $scope,
                    templateUrl: 'createRole.html',
                    //size: 'lg',
                    controller: function ($scope) {
                        $scope.m.CreateRoleForm.close = () => {
                            modalInstance.close();
                        };
                    }
                });
            },
            AddPerm: () => {
                let perm = $scope.m.CreateRoleForm.data.permToAdd;
                if ($scope.m.CreateRoleForm.data.permissions.indexOf(perm) > 0) {
                    SiHttpUtil.NotifyOperationErr("Permission already added");
                    return;
                }
                $scope.m.CreateRoleForm.data.permissions.push(perm);
            },
            RemovePerm: index => {
                $scope.m.CreateRoleForm.data.permissions.splice(index, 1);
            },
            Save: () => {
                var permissionsJson = angular.toJson($scope.m.CreateRoleForm.data.permissions);
                $http({
                    url: $scope.global.gateway + "/createRole/",
                    method: "POST",
                    data: {
                        name: $scope.m.CreateRoleForm.data.name,
                        permissions: permissionsJson
                    }
                }).then(function (response) {
                    $scope.m.LoadRoleList();
                    $scope.m.CreateRoleForm.data = {
                        permissions: []
                    };
                    $scope.m.CreateRoleForm.close();
                    SiHttpUtil.NotifyOk("Role created successfully");
                }, function (error) {
                    SiHttpUtil.NotifyErr(error, "Create Role failed");
                    console.log("createRole error:", error);
                });
            }
        };

        function createdRow(row, data, dataIndex) {
            // Recompiling so we can bind Angular directive to the DT
            // Required for the button functions to work (ng-click)
            $compile(angular.element(row).contents())($scope);
        }

        $scope.m.actionsHtml = (data, type, full, meta) => {
            return '<button class="btn btn-sm btn-warning" ng-click="m.UserForm.Edit(' + data.id + ')">' + '   <i class="far fa-edit"></i>' + '</button>&nbsp;' + '<button class="btn btn-sm btn-danger" ng-click="m.UserForm.Delete(' + data.id + ')" )"="">' + '   <i class="fas fa-trash"></i>' + '</button>';
        };

        $scope.m.LoadUserList();
        $scope.m.LoadRoleList();
    }
})();

(function () {
    'use strict';

    angular.module('app.dashboard').controller('UserController', UserController);
    UserController.$inject = ['$scope', 'Global'];

    function UserController($scope, Global) {
        $scope.global = Global;
    }
})();

(function () {
    'use strict';

    angular.module('systimu').controller('EnumsController', EnumsController);
    EnumsController.$inject = ['$scope', '$http', '$state', 'Global', 'Notify', 'SiUtil'];

    function EnumsController($scope, $http, $state, Global, Notify, SiUtil) {
        $scope.global = Global;
        $scope.$state = $state.current.name;
        $scope.tableTranslator = SiUtil.dbTableTranslator;
        $scope.enumData = {};
        $scope.enumOptions = {};
        $scope.enumsReady = false;
        $scope.defaultListClass = "bg-green-light";
        // Add enums here to show up on the editor
        $scope.enumList = {
            research: {
                'plasmid': {
                    'vector': 'Vectors',
                    'plasmidTag': 'Plasmid Tags',
                    'bacteria': 'Bacterias',
                    'mammalian': 'Mammalians'
                },
                'protein': {
                    'moleculeType': 'Molecule Types'
                },
                'transfectionRequest': {
                    'transfectionTag': 'Purification Tags',
                    'transfectionScale': 'Transfection Scales',
                    'transfectionType': 'Transfection Types',
                    'transfectionCellLine': 'Transfection Cell Lines',
                    'transfectionPurificationMethod': 'Purification Methods'
                },
                'proteinPurification': {
                    'proteinColumnType': 'Column Types',
                    'proteinStepType': 'Step Types',
                    'proteinSECTypes': "SEC Types"
                },
                'stableCellLine': {
                    'parentalCellLine': 'Parental Cell Lines',
                    'transfectionMethod': 'Transfection Methods',
                    'selectionMarker': 'Selection Markers'
                },
                'proteinAnalysisRequest': {
                    'method': 'Analysis Methods',
                    'secondarySECType': 'SEC Types'
                }
            },
            ade: {
                'sort': {
                    'sortMode': 'Sort Modes',
                    'population': 'Sort Populations',
                    'antigenSpecificity': 'Antigen Specificities',
                    'sorterUsed': 'Sorters'
                },
                'mixCondition': {
                    'eL4B5Lot': 'EL4-B5 Lot #',
                    'tsnLotNumber': 'TSN Lot #',
                    'fbsLot': 'FBS Lot #',
                    'plateType': 'Type of Plate'
                },
                'bCellSource': {
                    'tissue': 'Tissues',
                    'enrichmentType': 'Enrichment Types',
                    'stainType': 'Stain Types'
                },
                'supernatentPlate': {
                    'methodOfHarvest': 'Method of Harvest',
                    'reagent': 'Reagents'
                },
                'wellRescue': {
                    'pCRBlock': 'PCR Block Types'
                },
                'cloningAndSequence': {
                    'chainType': 'Chain Types'
                }
            },
            pd: {
                'cellLineExperiment': {
                    'cultureMedia': 'Culture Medias'
                },
                'cellLineHarvest': {
                    'harvestMethod': 'Harvest Methods',
                    'titerMethod': 'Titer Methods'
                },
                'cellLinePurification': {
                    'clColumnType': "Column Types"
                },
                'cellLineAnalytic': {
                    'clAnalyticSectionName': 'Section Names'
                },
                'cellLinePackage': {
                    'packageSectionName': "Section Names"
                },
                'bioreactor': {
                    'bioreactorHarvestMethod': 'Harvest Methods',
                    "primaryRecovery": "Primary Recoveries",
                    "pointStyle": "Point Styles",
                    "lineColor": "Line Colors"
                },
                'bioreactorCondition': {
                    'vesselScale': 'Vessel Scales (L)',
                    'basalMedium': 'Basal Mediums',
                    'feedMedium': 'Feed Mediums'
                },
                'bioreactorPurification': {
                    'bioreactorPurificationSectionName': 'Section Names',
                    'columnType': "Column Types",
                    'membraneType': "Membrane Types"
                },
                'bioreactorAnalytic': {
                    'bioreactorAnalyticSectionName': 'Section Names'
                },
                'pdAnalysisRequest': {
                    'pdMethods': 'Analysis Methods'
                }

            },
            project: {
                'project': {
                    'sectionName': 'Section Names',
                    'platform': 'Platforms',
                    'stage': 'Stages',
                    'status': 'Statuses'
                }
            },
            io: {
                'task': {
                    'taskType': 'Task Type',
                    'instrument': 'Instrument'
                }
            },
            ct: {
                'cellSource': {
                    'cellVendor': 'Vendor',
                    'cellSourceType': 'Cell Source Type'
                },
                'vessel': {
                    'vesselType': 'Vessel Types'
                }
            },
            //accounting: {
            //    'projectBilling': {
            //        'BoaStatements': 'BoaStatements'
            //    }
            //},
            facilities: {
                'instrument': {
                    'instrumentGroup': 'Instrument Group'
                }
            }
        };

        $scope.addEnumValue = function (enumName) {
            $scope.enumData[enumName].push('New' + enumName);
            $scope.enumOptions['disableEdit' + enumName] = true;
            $scope.enumOptions[enumName + 'ListClass'] = $scope.defaultListClass;
        };
        $scope.sortableCallback = function (sourceModel, destModel, start, end) {
            console.log(start + ' -> ' + end);
        };
        $scope.sortableOptions = {
            placeholder: '<div class="box-placeholder p0 m0"><div></div></div>',
            forcePlaceholderSize: true
        };
        $scope.enableEditEnumValue = function (enumValue) {
            $scope.enumOptions['disableEdit' + enumValue] = false;
            $scope.enumOptions[enumValue + 'ListClass'] = "bg-grey-light";
        };
        $scope.deleteEnumValue = function ($index, enumValue) {
            // console.log("cur target: ", $event.currentTarget);
            $scope.enumData[enumValue].splice($index, 1);
        };
        $scope.saveEnumValue = function (EnumValue, tableName) {
            $scope.enumOptions['disableEdit' + EnumValue] = true;
            $scope.enumOptions[EnumValue + 'ListClass'] = $scope.defaultListClass;
            // Remove empty ones.
            var newEnumValues = [];
            $("." + EnumValue + "Item").each(function () {
                // console.log("vv:", $(this).val());
                var newValue = $(this).val();
                if (newValue) {
                    newEnumValues.push(newValue);
                } else {
                    $(this).parent().remove();
                }
            });
            var newEnumValuesJson = JSON.stringify(newEnumValues);
            // Save new vectors.
            $http({
                url: $scope.global.gateway + "/updateEnum",
                method: "POST",
                data: {
                    tableName: tableName + 's',
                    key: "ENUM_" + EnumValue,
                    value: newEnumValuesJson,
                    createKeyIfNotExist: "yes"
                }
            }).then(function (resp) {
                if (resp.data.message == "ok") {
                    Notify.alert(EnumValue + ' saved successfully', { status: 'success' });
                }
            }, function (err) {
                console.log("save" + EnumValue + "err:", err);
            });
        };

        $scope.refreshEnums = function () {
            $http({
                url: $scope.global.gateway + "/getEnumForManyTable",
                method: "POST"
            }).then(function (resp) {
                var allEnums = resp.data;
                for (var section in $scope.enumList) {
                    for (var table in $scope.enumList[section]) {
                        for (var enumEntry in $scope.enumList[section][table]) {
                            $scope.enumOptions['disableEdit' + enumEntry] = true;
                            $scope.enumOptions[enumEntry + 'ListClass'] = $scope.defaultListClass;
                            $scope.enumData[enumEntry] = allEnums['ENUM_' + enumEntry] || [];
                        }
                    }
                }
                $scope.enumsReady = true;
            }, function (err) {
                console.log("err:", err);
            });
        };
        $scope.refreshEnums();
    }
})();
(function () {
    'use strict';

    angular.module('systimu').controller('QueriesController', QueriesController);
    QueriesController.$inject = ['$scope', '$timeout', '$state', '$http', 'Notify', 'Global', '$filter', '$resource', 'DTOptionsBuilder', 'DTColumnBuilder', 'ngTableParams', 'PermPermissionStore', 'SiHttpUtil'];

    function QueriesController($scope, $timeout, $state, $http, Notify, Global, $filter, $resource, DTOptionsBuilder, DTColumnBuilder, ngTableParams, PermPermissionStore, SiHttpUtil) {
        $scope.global = Global;
        $scope.querylibsData = [];
        $scope.dtColumns = [];
        $scope.querylibsReady = false;
        // TODO: change to query manager
        $scope.userAllowed = PermPermissionStore.getPermissionDefinition('adminQuery');
        $scope.selected = {};
        $scope.editing = false;
        $scope.updateQuery = "Save Query";
        $scope.testQuery = {};
        $scope.userPerm = "";
        //$scope.tableState.currentResearchTable="querylibs";
        function verifyQuery(query) {
            // Unfinished.
            var q = query.trim();
            if (q.startsWith("update") || q.startsWith("delete") || q.startsWith("create") || q.startsWith("insert") || q.startsWith("drop") || q.startsWith("alter")) return false;else return true;
        }
        $scope.lastRowClicked = null;
        $scope.currentRowData = null;
        $scope.resetSelection = function () {
            $scope.lastRowClicked = null;
            $scope.currentRowData = null;
        };
        $scope.editorOptions = {
            lineWrapping: true,
            lineNumbers: true,
            mode: 'text/x-mariadb',
            smartIndent: true
        };
        $scope.rowClickHandler = function (data) {
            // A hack to find the row, regardless of re-ordering/sorting.
            var rowId = "queryID_" + data.id;
            var row = $("#" + rowId);
            // ww: Must find all children, otherwise class would be overriden
            // by <td> classes.
            if ($scope.lastRowClicked) {
                $scope.selected = {};
                $scope.lastRowClicked.find('*').removeClass("bg-green-light");
                // Clicked the same row, do de-selection.
                if ($scope.currentRowData && $scope.currentRowData.id == data.id) {
                    // console.log("de-selection of id:", data.id);
                    $scope.resetSelection();
                    return;
                }
            }
            $scope.selected = data;
            row.find('*').addClass("bg-green-light");
            $scope.lastRowClicked = row;
            // console.log("data for row:", data);
            $scope.bottom_info = "Selected:  Query with ID: " + data.id + " , and with name:" + data.name + "\n" + "Query :" + data.query;
            $scope.currentRowData = data;
        };
        $scope.rowCallback = function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
            // Unbind first in order to avoid any duplicate handler (see https://github.com/l-lin/angular-datatables/issues/87)
            $('td', nRow).unbind('click');
            $('td', nRow).bind('click', function () {
                $scope.$apply(function () {
                    $scope.rowClickHandler(aData);
                });
            });
            // ww:Hack: Mark the row with an ID.
            $('td', nRow).closest('tr').attr('id', "queryID_" + aData.id);
            return nRow;
        };
        $scope.translateQueryLibsColumnTitle = function (dbColName) {
            switch (dbColName) {
                case "name":
                    return "Query Description";
                case "group":
                    return "Allowed Groups";
            }
            return dbColName;
        };
        $scope.ifNeedOmit = function (dbColName) {
            var omitCols = ["id", "isDeleted", "createdAt", "updatedAt", "query"];
            return omitCols.indexOf(dbColName) != -1;
        };
        $scope.refreshQueryLibs = function () {
            return new Promise(function (resolve, reject) {
                SiHttpUtil.FetchTableEntries('querylibs').then(function (response) {
                    $scope.querylibsData = [];
                    for (var i = 0; i < response.records.length; i++) {
                        if ($scope.userAllowed) {
                            $scope.querylibsData.push(response.records[i]);
                            continue;
                        }
                        var group = [];
                        if (response.records[i].group) group = response.records[i].group.split(";");
                        for (var j = 0; j < group.length - 1; j++) {
                            if ($scope.userPerm.indexOf(group[j]) != -1) {
                                $scope.querylibsData.push(response.records[i]);
                                break;
                            }
                        }
                    }
                    if ($scope.dtColumns.length == 0) {
                        if ($scope.querylibsData[0]) {
                            for (var h in $scope.querylibsData[0]) {
                                if (!$scope.ifNeedOmit(h)) {
                                    $scope.dtColumns.push(DTColumnBuilder.newColumn(h).withTitle($scope.translateQueryLibsColumnTitle(h)));
                                }
                            }
                        }
                    }
                    $scope.dtOptions = DTOptionsBuilder.fromFnPromise(new Promise(function (resolve, reject) {
                        $scope.querylibsReady = true;
                        resolve($scope.querylibsData);
                    })).withOption('rowCallback', $scope.rowCallback);
                }, function (error) {
                    console.log("querylibs get error:", error);
                });
            });
        };
        $scope.dtInst = {};
        $scope.dtInstCallback = function (inst) {
            $scope.dtInst = inst;
        };
        $scope.initLoadQuerylibs = function () {
            if ($scope.querylibsData.length > 0) {
                return;
            }
            if (PermPermissionStore.getPermissionDefinition('readResearch') || PermPermissionStore.getPermissionDefinition('adminResearch')) {
                $scope.userPerm += "Research";
            }
            if (PermPermissionStore.getPermissionDefinition('readADE') || PermPermissionStore.getPermissionDefinition('adminADE')) {
                $scope.userPerm += "ADE";
            }
            if (PermPermissionStore.getPermissionDefinition('readPD') || PermPermissionStore.getPermissionDefinition('adminPD')) {
                $scope.userPerm += "PD";
            }
            if (PermPermissionStore.getPermissionDefinition('readProject') || PermPermissionStore.getPermissionDefinition('adminProject')) {
                $scope.userPerm += "Project";
            }

            $scope.refreshQueryLibs();
        };
        $scope.testQuery = {};
        $scope.ckboxes = [{
            label: "Research",
            val: false
        }, {
            label: "ADE",
            val: false
        }, {
            label: "PD",
            val: false
        }, {
            label: "Project",
            val: false
        }];

        $scope.editQuery = function () {
            $scope.editing = true;
            $scope.testQuery.expression = $scope.selected.query;
            $scope.testQuery.name = $scope.selected.name;
            var groups = $scope.selected.group ? $scope.selected.group.split(";") : [];
            var cur = 0;
            for (var i = 0; i < $scope.ckboxes.length; i++) {
                if ($scope.ckboxes[i].label == groups[cur]) {
                    $scope.ckboxes[i].val = true;
                    cur++;
                } else {
                    $scope.ckboxes[i].val = false;
                }
            }
            $scope.updateQuery = "Update Query";
        };
        $scope.testQuery.results = [];
        $scope.testQuery.save = function () {
            if (!verifyQuery($scope.testQuery.expression)) {
                $scope.testQuery.error = "Invalid query. Only select query allowed.";
                return;
            }
            var group = "";
            for (var i = 0; i < $scope.ckboxes.length; i++) {
                if ($scope.ckboxes[i].val === true) group += $scope.ckboxes[i].label + ";";
            }
            if ($scope.editing) {
                $http({
                    url: $scope.global.gateway + "/updateEntry",
                    method: "POST",
                    data: {
                        tableName: "querylibs",
                        userId: $scope.global.user.id,
                        id: $scope.selected.id,
                        name: $scope.testQuery.name,
                        query: $scope.testQuery.expression,
                        group: group
                    }
                }).then(function (resp) {
                    $scope.editing = false;
                    $scope.testQuery.error = "";
                    console.log("resp:", resp);
                    Notify.alert('Query updated successfully', { status: 'success' });
                    if ($scope.dtInst) {
                        $scope.dtInst.changeData($scope.refreshQueryLibs());
                    } else {
                        $scope.initLoadQuerylibs();
                    }
                    $scope.testQuery.expression = "";
                    $scope.testQuery.name = "";
                    $scope.updateQuery = "Save Query";
                }, function (err) {
                    $scope.testQuery.error = err.data.detail.body.error;
                    //$scope.editing = false;
                    console.log("Error: failed to updating query.", err);
                });
            } else {
                console.log("saving as: ", $scope.testQuery.name);
                $http({
                    url: $scope.global.gateway + "/createEntry",
                    method: "POST",
                    data: {
                        tableName: "querylibs",
                        name: $scope.testQuery.name,
                        query: $scope.testQuery.expression,
                        userId: $scope.global.user.id,
                        group: group
                    }
                }).then(function (resp) {
                    $scope.testQuery.error = "";
                    console.log("resp:", resp);
                    Notify.alert('Query created successfully', { status: 'success' });
                    if ($scope.dtInst) {
                        $scope.dtInst.changeData($scope.refreshQueryLibs());
                    } else {
                        $scope.initLoadQuerylibs();
                    }
                    $scope.testQuery.expression = "";
                    $scope.testQuery.name = "";
                }, function (err) {
                    console.log("err:", err);
                    $scope.testQuery.error = err.data.detail.error;
                });
            }
        };

        $scope.query = {
            tableData: null,
            dtColumns: [],
            DtInstCallback: inst => {
                $scope.query.DtInst = inst;
            },
            initTable: () => {
                $scope.query.dataReady = false;
                return $http({
                    url: $scope.global.gateway + "/submitQuery",
                    method: "POST",
                    data: {
                        id: $scope.currentRowData.id,
                        queryExpression: $scope.currentRowData.query.trim()
                    }
                }).then(function (resp) {
                    return new Promise(function (resolve, reject) {
                        $scope.query.tableData = resp.data;
                        if ($scope.query.DtInst) {
                            $scope.query.DtInst.DataTable.ngDestroy();
                            $scope.query.dtOptions = null;
                            $scope.query.dtColumns = [];
                            angular.element('#query').children('thead').children().remove();
                            angular.element('#query').children('tbody').children().remove();
                            angular.element('#query').empty();
                        }
                        if ($scope.query.tableData && $scope.query.tableData.length > 0) {
                            SiHttpUtil.initDtColumns($scope.query.dtColumns, $scope.query.tableData, colName => SiHttpUtil.omitColumnForTable('query', colName), colName => SiHttpUtil.dbColumnTranslator('query', colName));
                            $scope.query.dtOptions = SiHttpUtil.initDtOptions($scope.query.dtColumns, $scope.query.tableData, $scope.query.rowCallback, function () {
                                $scope.query.dataReady = true;
                                resolve($scope.query.tableData);
                            }).withOption('order', [[0, 'desc']]);
                        } else {
                            resolve($scope.query.tableData);
                        }
                    });
                });
            }
        };
        $scope.executeTestQuery = function () {
            if (!$scope.testQuery.expression) return;
            if (!verifyQuery($scope.testQuery.expression)) {
                $scope.testQuery.error = "Invalid query. Only select query allowed.";
                return;
            }
            $scope.tableParams = undefined;
            $http({
                url: $scope.global.gateway + "/submitQuery",
                method: "POST",
                data: {
                    queryExpression: $scope.testQuery.expression.trim()
                }
            }).then(function (response) {
                $scope.testQuery.results = response.data;
                console.log("my resulst:", $scope.testQuery.results);
                $scope.testQuery.error = "";
                console.log("tp?", $scope.tableParams);
                $scope.tableParams = new ngTableParams({
                    page: 1, // show first page
                    count: 25 // count per page
                }, {
                    total: $scope.testQuery.results.length, // length of data4
                    getData: function ($defer, params) {
                        console.log("not here");
                        $defer.resolve($scope.testQuery.results.slice((params.page() - 1) * params.count(), params.page() * params.count()));
                    }
                });
                $scope.tableParams.data = $scope.testQuery.results.slice(0, 25);
                $scope.tableParams.$params.count = 25;
            }, function (error) {
                console.log(error);
                // $scope.errorFound = true;
                $scope.testQuery.error = error.data.detail.body.message;
                $scope.testQuery.results = undefined;
            });
        };

        $scope.initLoadQuerylibs();
    }
})();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(14)))

/***/ }),

/***/ 225:
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function($, _) {(function () {
    'use strict';

    angular.module('app.research').controller('ResearchController', ResearchController);
    ResearchController.$inject = ['$scope', '$state', 'SiHttpUtil', '$http'];

    function ResearchController($scope, $state, SiHttpUtil, $http) {
        // console.log("hello Research controller");
        $scope.tableState = {};
        // Dirty hack to workaround Angular/Chosen <select> off by 1 bug.
        // See: https://github.com/leocaseiro/angular-chosen/issues/8
        $scope.$watch(function () {
            return $(".chosen-select option").length;
        }, function (newvalue, oldvalue) {
            if (newvalue !== oldvalue) {
                $(".chosen-select").trigger("chosen:updated");
            }
        });
        $scope.tableState.currentResearchTable = "";
        $scope.switchResearchTable = function () {
            if ($scope.tableState.currentResearchTable) {
                $state.go("app.research." + $scope.tableState.currentResearchTable);
            }
        };
        $scope.UserHash = null;
        $scope.ActiveUserHash = null;
        SiHttpUtil.CacheUserHash().then(function (UserHash) {
            $scope.UserHash = UserHash.complete;
            $scope.ActiveUserHash = UserHash.active;
            $scope.ActiveUserList = UserHash.activeList;
        });

        $scope.trOptions = {
            legend: {
                display: false
            },
            title: {
                display: true,
                text: 'Transfection Status (Last 2 Months)'
            }
        };

        $scope.proteinOptions = {
            legend: {
                display: false
            },
            title: {
                display: true,
                text: 'New Proteins (Last 2 Months)'
            }
        };

        $scope.newTrOptions = {
            legend: {
                display: false
            },
            title: {
                display: true,
                text: 'New TRs (Last 2 Months)'
            }
        };

        $scope.graphColors = SiHttpUtil.GraphColors();

        $scope.colorOverride = { hoverBackgroundColor: $scope.graphColors };

        $scope.countDatasetOverride = [{
            label: 'Plasmids',
            backgroundColor: 'rgba(114,102,186,0.2)',
            borderColor: 'rgba(114,102,186,1)',
            pointBackgroundColor: 'rgba(114,102,186,1)',
            pointBorderColor: '#fff'
        }, {
            label: 'Proteins',
            backgroundColor: 'rgba(35,183,229,0.2)',
            borderColor: 'rgba(35,183,229,1)',
            pointBackgroundColor: 'rgba(35,183,229,1)',
            pointBorderColor: '#fff'
        }, {
            label: 'Transfections',
            backgroundColor: 'rgba(39,194,76,0.2)',
            borderColor: 'rgba(39,194,76,1)',
            pointBackgroundColor: 'rgba(39,194,76,1)',
            pointBorderColor: '#fff'
        }, {
            label: 'Purifications',
            backgroundColor: 'rgba(240,80,80,0.2)',
            borderColor: 'rgba(240,80,80,1)',
            pointBackgroundColor: 'rgba(240,80,80,1)',
            pointBorderColor: '#fff'
        }];

        $scope.countOptions = {
            legend: {
                display: false
            },
            title: {
                display: true,
                text: 'New Entries (Per Week)'
            },
            tooltips: {
                mode: 'index',
                intersect: false
            },
            hover: {
                mode: 'index',
                intersect: false
            }
        };

        $scope.graphs = function () {
            $http({
                url: SiHttpUtil.helperAPIUrl + "graphapi/",
                method: "GET"
            }).then(function (resp) {
                $scope.countData = {
                    labels: resp.data.countData.dates,
                    data: [resp.data.countData.plasmids, resp.data.countData.proteins, resp.data.countData.transfections, resp.data.countData.purifications],
                    colors: ['rgba(114,102,186,1)', 'rgba(35,183,229,1)', 'rgba(39,194,76,1)', 'rgba(240,80,80,1)']
                };

                $scope.proteinData = {
                    labels: resp.data.proteinByType.type,
                    data: resp.data.proteinByType.count
                    // colors: ['rgba(114,102,186,1)', 'rgba(35,183,229,1)', 'rgba(39,194,76,1)', 'rgba(240,80,80,1)']
                };

                $scope.newTrData = {
                    labels: resp.data.newTransfections.project,
                    data: resp.data.newTransfections.count
                    // colors: ['rgba(114,102,186,1)', 'rgba(35,183,229,1)', 'rgba(39,194,76,1)', 'rgba(240,80,80,1)']
                };

                $scope.trData = {
                    labels: resp.data.trData.labels,
                    data: resp.data.trData.data,
                    colors: resp.data.trData.colors,
                    override: {
                        hoverBackgroundColor: resp.data.trData.colors
                    }
                };
            }, function (err) {
                console.log("fetch graph err:", err);
            });
        };
        $scope.graphs();
        $scope.proteinSummary = function () {
            $http({
                url: SiHttpUtil.helperAPIUrl + "proteinstatus/",
                method: "GET"
            }).then(function (resp) {
                $scope.proteinStatusData = resp.data;
            }, function (err) {
                console.log("fetch graph err:", err);
            });
        };
        $scope.proteinSummary();
    }
})();

//Construct Request Controller
(function () {
    'use strict';

    angular.module('app.research').controller('ConstructRequestController', ConstructRequestController);

    ConstructRequestController.$inject = ['$scope', 'SiHttpUtil', 'DTOptionsBuilder', 'DTColumnBuilder', 'DTColumnDefBuilder', 'SiUtil', '$stateParams', '$state'];

    function ConstructRequestController($scope, SiHttpUtil, DTOptionsBuilder, DTColumnBuilder, DTColumnDefBuilder, SiUtil, $stateParams, $state) {
        // Main model.
        $scope.m = {
            tableData: null,
            dtColumns: [],
            getDateOnly: SiUtil.getDateOnly,
            getProgress: SiUtil.progress,
            getFormattedStatus: SiUtil.getFormattedStatus,
            tableName: "constructRequest",
            activeTab: "ViewAllTab",
            op: $stateParams.op,
            id: $stateParams.id,
            sectionNames: ['Links'],
            statuses: ['Pending', 'On Hold', 'Approved', 'In Progress', 'Completed'],
            DtInstCallback: inst => {
                $scope.m.DtInst = inst;
            },
            statusFilter: {
                includePending: true,
                includeApproved: true,
                includeInProg: true,
                includeCompleted: false,
                includeOnHold: false
            },
            RefreshData: () => {
                if ($scope.m.DtInstCallback) {
                    if ($scope.m.DtInst) {
                        $scope.m.DtInst.changeData($scope.m.LoadDataList());
                    } else {
                        $scope.m.LoadDataList();
                    }
                }
            },
            createConstructs: id => {
                if (id) {
                    $state.go("app.research.constructStatus", { op: "create", id: id });
                }
            },
            approveRequest: id => {
                if (!id) {
                    id = $scope.m.currentRowData.id;
                }
                SiHttpUtil.UpdateDataEntry({
                    tableName: $scope.m.tableName,
                    id: id,
                    status: "Approved",
                    approvedBy: SiHttpUtil.GetUserId()
                }).then(() => {
                    $scope.m.RefreshData();
                    $scope.m.resetSelection();
                });
            }
        };
        $scope.m.viewForm = SiHttpUtil.InitViewForm($scope.m);
        $scope.tableState.currentTable = $scope.m.tableName;

        $scope.m.getQuery = () => {
            var query = {
                $or: []
            };
            if ($scope.m.statusFilter.includePending) {
                query.$or.push({ status: "Pending" });
            }
            if ($scope.m.statusFilter.includeInProg) {
                query.$or.push({ status: "In Progress" });
            }
            if ($scope.m.statusFilter.includeOnHold) {
                query.$or.push({ status: "On Hold" });
            }
            if ($scope.m.statusFilter.includeCompleted) {
                query.$or.push({ status: "Completed" });
            }
            if ($scope.m.statusFilter.includeApproved) {
                query.$or.push({ status: "Approved" });
            }
            if (query.$or.length == 0) {
                query = {};
            }
            $scope.m.query = query;
        };
        $scope.m.onStatusChange = function () {
            $scope.m.getQuery();
            $scope.m.RefreshData();
        };

        $scope.m.editForm = {
            data: {},
            show: false,
            submitted: false,
            ui: {},
            CancelTab: () => SiHttpUtil.HideTab($scope.m, $scope.m.editForm),
            Delete: () => {
                SiHttpUtil.DeleteDataEntry($scope.m.tableName, $scope.m.currentRowData.id).then(() => {
                    $scope.m.editForm.CancelTab();
                    $scope.m.RefreshData();
                });
            },
            SubmitTab: function () {
                $scope.m.editForm.submitted = true;
                if (!$scope.m.editForm.ui.validate.$valid) {
                    console.error($scope.m.editForm.ui.validate);
                    return;
                }
                SiHttpUtil.UpdateDataEntry({
                    tableName: $scope.m.tableName,
                    id: $scope.m.editForm.data.id,
                    projectId: $scope.m.editForm.data.projectId,
                    notes: $scope.m.editForm.data.notes,
                    estimatedTimeline: $scope.m.editForm.data.estimatedTimeline.dt,
                    numConstructs: $scope.m.editForm.data.numConstructs,
                    references: $scope.m.editForm.data.references ? angular.toJson($scope.m.editForm.data.references) : null,
                    newSequence: $scope.m.editForm.data.newSequence,
                    status: $scope.m.editForm.data.status
                }).then(resp => {
                    if (resp.status === 200) {
                        $scope.m.editForm.CancelTab();
                        $scope.m.RefreshData();
                        $scope.m.resetSelection();
                    }
                });
            }
        };

        $scope.m.CreateForm = {
            data: {},
            ui: {},
            submitted: false,
            ResetTab: function () {
                SiHttpUtil.ResetForm($scope.m.CreateForm);
                $scope.m.dp.initDp('CreateForm', 'estimatedTimeline', false);
                $scope.m.activeTab = "ViewAllTab";
            },
            SubmitTab: function () {
                $scope.m.CreateForm.submitted = true;
                if (!$scope.m.CreateForm.ui.validate.$valid) {
                    console.error($scope.m.CreateForm.ui.validate);
                    return;
                }
                const RequestEntry = {
                    tableName: $scope.m.tableName,
                    projectId: $scope.m.CreateForm.data.projectId,
                    notes: $scope.m.CreateForm.data.notes,
                    estimatedTimeline: $scope.m.CreateForm.data.estimatedTimeline.dt,
                    numConstructs: $scope.m.CreateForm.data.numConstructs,
                    references: $scope.m.CreateForm.data.references ? angular.toJson($scope.m.CreateForm.data.references) : null,
                    newSequence: $scope.m.CreateForm.data.newSequence
                };
                SiHttpUtil.CreateTableEntry(RequestEntry).then(function (resp) {
                    if (resp.status === 200) {
                        $scope.m.CreateForm.ResetTab();
                        $scope.m.RefreshData();
                    }
                });
            }
        };

        SiHttpUtil.InitRowClick($scope);

        $scope.m.ValidateCreateInput = (FieldName, Type) => SiHttpUtil.ValidateInput($scope.m.CreateForm.ui.validate, $scope.m.CreateForm.submitted, FieldName, Type);
        $scope.m.ValidateEditInput = (FieldName, Type) => SiHttpUtil.ValidateInput($scope.m.editForm.ui.validate, $scope.m.editForm.submitted, FieldName, Type);

        $scope.m.LoadDataList = function () {
            return SiHttpUtil.SearchByColumn($scope.m.tableName, $scope.m.query).then(function (resp) {
                return new Promise(function (resolve, reject) {
                    $scope.m.tableData = resp;
                    if ($scope.m.tableData && $scope.m.tableData.length > 0) {
                        if ($scope.m.dtColumns.length === 0) {
                            SiHttpUtil.initDtColumns($scope.m.dtColumns, $scope.m.tableData, colName => SiHttpUtil.omitColumnForTable($scope.m.tableName, colName), colName => SiHttpUtil.dbColumnTranslator($scope.m.tableName, colName), colName => SiHttpUtil.hideColumnForTable($scope.m.tableName, colName), SiHttpUtil.tableOrder($scope.m.tableName));
                        }

                        $scope.m.dtColDefs = [DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'projectId')).renderWith(SiUtil.ColDisplayers.GetHashConvertDisplayer($scope.m.ProjectDisplayData.Hash)), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'notes')).renderWith(SiUtil.ColDisplayers.DescriptionDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'requestedBy')).renderWith(SiUtil.ColDisplayers.GetHashConvertDisplayer($scope.UserHash)), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'newSequence')).renderWith(SiUtil.ColDisplayers.CheckDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'status')).renderWith(SiUtil.ColDisplayers.StatusDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'estimatedTimeline')).renderWith(SiUtil.ColDisplayers.ShortDateDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'progress')).renderWith(SiUtil.ColDisplayers.ProgressDisplayer),
                        // DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'createdBy'))
                        //     .renderWith(
                        //         SiUtil.ColDisplayers.GetHashConvertDisplayer($scope.UserHash)
                        //     ),
                        DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'updatedAt')).renderWith(SiUtil.ColDisplayers.ShortDateDisplayer)];

                        $scope.m.dtOptions = SiHttpUtil.initDtOptions($scope.m.dtColumns, $scope.m.tableData, $scope.m.rowCallback, function () {
                            resolve($scope.m.tableData);
                            $scope.m.dataReady = true;
                            if ($scope.m.op === "view" && $scope.m.id) {
                                $scope.m.currentRowData = {
                                    id: $scope.m.id
                                };
                                $scope.m.viewDetail();
                            }
                            if ($scope.op === "create") {
                                $scope.m.activeTab = "CreateTab";
                            }
                        }).withOption('order', [['0', 'desc']]);
                    } else {
                        resolve($scope.m.tableData);
                    }
                });
            });
        };

        $scope.m.viewDetail = function () {
            if ($scope.m.currentRowData) {
                $scope.m.viewForm.show = true;
                SiHttpUtil.FetchOneEntry('constructRequest', $scope.m.currentRowData.id).then(resp => {
                    $scope.m.viewForm.data = angular.copy(resp);
                    $scope.m.viewForm.data.references = angular.fromJson($scope.m.viewForm.data.references);
                });
                $scope.m.viewForm.refInit();
                $scope.m.activeTab = "DetailTab";
            }
        };

        $scope.m.editDetail = function () {
            if ($scope.m.currentRowData) {
                $scope.m.editForm.data = angular.copy($scope.m.currentRowData);
                $scope.m.editForm.data.references = angular.fromJson($scope.m.editForm.data.references);
                $scope.m.editForm.data.estimatedTimeline = {
                    dt: $scope.m.editForm.data.estimatedTimeline ? new Date($scope.m.editForm.data.estimatedTimeline) : null
                };
                $scope.m.editForm.show = true;
                $scope.m.activeTab = "EditTab";
            }
        };
        $scope.m.loadAll = function () {
            $scope.m.dp = SiUtil.dp.bind($scope.m)();
            $scope.m.dp.initDp('CreateForm', 'estimatedTimeline', false);
            $scope.m.getQuery();
            var CacheProjects = SiHttpUtil.FetchIdNameMapping('project').then(function (resp) {
                $scope.m.ProjectList = resp;
                $scope.m.ProjectDisplayData = SiHttpUtil.GetDependencyList($scope.m.ProjectList);
                $scope.m.ProjectListReady = true;
            });

            var deps = []; // Dependencies.
            deps.push(CacheProjects);
            Promise.all(deps).then(() => {
                $scope.m.LoadDataList();
            });
        };

        $scope.m.loadAll();
    }
})();

//Construct Request Status Controller
(function () {
    'use strict';

    angular.module('app.research').controller('ConstructStatusController', ConstructStatusController);

    ConstructStatusController.$inject = ['$scope', 'SiHttpUtil', 'DTOptionsBuilder', 'DTColumnBuilder', 'DTColumnDefBuilder', 'SiUtil', '$stateParams'];

    function ConstructStatusController($scope, SiHttpUtil, DTOptionsBuilder, DTColumnBuilder, DTColumnDefBuilder, SiUtil, $stateParams) {
        // Main model.
        $scope.m = {
            tableData: null,
            dtColumns: [],
            tableName: "constructStatus",
            activeTab: "ViewAllTab",
            op: $stateParams.op,
            id: $stateParams.id,
            sectionNames: ['Links'],
            DtInstCallback: inst => {
                $scope.m.DtInst = inst;
            },
            statusFilter: {
                includeNotCompleted: true,
                includeCompleted: false
            },
            RefreshData: () => {
                if ($scope.m.DtInstCallback) {
                    if ($scope.m.DtInst) {
                        $scope.m.DtInst.changeData($scope.m.LoadDataList());
                    } else {
                        $scope.m.LoadDataList();
                    }
                }
            }
        };
        $scope.m.viewForm = SiHttpUtil.InitViewForm($scope.m);
        $scope.tableState.currentTable = $scope.m.tableName;

        $scope.m.getQuery = () => {
            const query = {
                $or: []
            };
            if ($scope.m.statusFilter.includeNotCompleted) {
                query.$or.push({ completed: false });
            }
            if ($scope.m.statusFilter.includeCompleted) {
                query.$or.push({ completed: true });
            }
            if ($scope.m.statusFilter.includeOnHold) {
                query.$or.push({ onHold: true });
            } else {
                query.onHold = false;
            }
            if (query.$or.length == 0) {
                query = {};
            }
            $scope.m.query = query;
        };
        $scope.m.onStatusChange = function () {
            $scope.m.getQuery();
            $scope.m.RefreshData();
        };

        $scope.m.editForm = {
            data: {},
            show: false,
            submitted: false,
            ui: {},
            CancelTab: () => SiHttpUtil.HideTab($scope.m, $scope.m.editForm),
            Delete: () => {
                SiHttpUtil.DeleteDataEntry($scope.m.tableName, $scope.m.currentRowData.id).then(() => {
                    $scope.m.editForm.CancelTab();
                    $scope.m.RefreshData();
                });
            },
            assign: () => {
                $scope.m.editForm.data.assignedTo = SiHttpUtil.GetUserId();
            },
            SubmitTab: function () {
                $scope.m.editForm.submitted = true;
                if (!$scope.m.editForm.ui.validate.$valid) {
                    console.error($scope.m.editForm.ui.validate);
                    return;
                }
                SiHttpUtil.UpdateDataEntry({
                    tableName: $scope.m.tableName,
                    id: $scope.m.editForm.data.id,
                    constructRequestId: $scope.m.editForm.data.constructRequestId,
                    assignedTo: $scope.m.editForm.data.assignedTo,
                    priority: $scope.m.editForm.data.priority,
                    sequenceReviewed: $scope.m.editForm.data.sequenceReviewed,
                    designed: $scope.m.editForm.data.designed,
                    ordered: $scope.m.editForm.data.ordered,
                    cloned: $scope.m.editForm.data.cloned,
                    maxiprep: $scope.m.editForm.data.maxiprep,
                    sequenceVerified: $scope.m.editForm.data.sequenceVerified,
                    onHold: $scope.m.editForm.data.onHold,
                    status: $scope.m.editForm.data.status,
                    notes: $scope.m.editForm.data.notes,
                    adminNotes: $scope.m.editForm.data.adminNotes
                }).then(resp => {
                    if (resp.status === 200) {
                        $scope.m.editForm.CancelTab();
                        $scope.m.RefreshData();
                        $scope.m.resetSelection();
                    }
                });
            }
        };

        $scope.m.CreateForm = {
            data: {},
            ui: {},
            submitted: false,
            ResetTab: function () {
                SiHttpUtil.ResetForm($scope.m.CreateForm);
                $scope.m.dp.initDp('CreateForm', 'requestDate', true);
                $scope.m.activeTab = "ViewAllTab";
            },
            initTab: choose => {
                const query = { status: ["Approved", "In Progress"] };
                SiHttpUtil.SearchByColumn("constructRequest", query).then(resp => {
                    $scope.m.RequestDisplayData = SiHttpUtil.GetDependencyDisplayItemList(resp);
                    $scope.m.RequestListReady = true;
                    if (choose) {
                        $scope.m.CreateForm.chooseRequest();
                    }
                });
            },
            chooseRequest: () => {
                $scope.m.CreateForm.data.currConstructs = [];
                $scope.m.CreateForm.currRequest = $scope.m.RequestDisplayData.ListHash[$scope.m.CreateForm.data.constructRequestId];
                const toCreate = $scope.m.CreateForm.currRequest.status == 'In Progress' ? 1 : $scope.m.CreateForm.currRequest.numConstructs;
                for (let i = 0; i < toCreate; i++) {
                    $scope.m.CreateForm.data.currConstructs.push({
                        constructRequestId: $scope.m.CreateForm.currRequest.id
                    });
                }
            },
            addEntry: () => {
                $scope.m.CreateForm.data.currConstructs.push({
                    constructRequestId: $scope.m.CreateForm.currRequest.id
                });
            },
            removeEntry: index => {
                $scope.m.CreateForm.data.currConstructs.splice(index, 1);
            },
            SubmitTab: function () {
                $scope.m.CreateForm.submitted = true;
                if (!$scope.m.CreateForm.ui.validate.$valid) {
                    console.error($scope.m.CreateForm.ui.validate);
                    return;
                }
                const toCreate = {
                    tableName: $scope.m.tableName,
                    list: $scope.m.CreateForm.data.currConstructs
                };
                const toUpdate = {
                    tableName: "constructRequest",
                    id: $scope.m.CreateForm.data.constructRequestId,
                    status: "In Progress"
                };
                SiHttpUtil.CreateTableEntries(toCreate).then(function (resp) {
                    if (resp.status === 200) {
                        SiHttpUtil.UpdateDataEntry(toUpdate);
                        $scope.m.CreateForm.ResetTab();
                        $scope.m.RefreshData();
                    }
                });
            }
        };

        $scope.m.BulkEditForm = {
            data: {
                currCRs: []
            },
            ui: {},
            submitted: false,
            ResetTab: function () {
                SiHttpUtil.ResetForm($scope.m.BulkEditForm);
                $scope.m.activeTab = "ViewAllTab";
                $scope.m.BulkEditForm.ResetData();
            },
            updateCurrCRs: onHold => {
                $scope.m.BulkEditForm.data.currCRs = [];
                let query;
                if (onHold) {
                    query = { onHold: true, completed: false };
                } else {
                    query = { assignedTo: $scope.m.BulkEditForm.data.assignedTo, onHold: false, completed: false };
                }
                SiHttpUtil.SearchByColumn('constructStatus', query).then(function (resp) {
                    $scope.m.BulkEditForm.data.currCRs = resp;
                });
            },
            assignedToMe: function () {
                $scope.m.BulkEditForm.data.assignedTo = SiHttpUtil.GetUserId();
                $scope.m.BulkEditForm.updateCurrCRs();
            },
            assign: function (entry) {
                entry.assignedTo = SiHttpUtil.GetUserId();
            },
            ResetData: function () {
                $scope.m.BulkEditForm.data = {
                    currCRs: []
                };
            },
            removeEntry: function (i) {
                $scope.m.BulkEditForm.data.currCRs.splice(i, 1);
            },
            Update: function (entry) {
                const toUpdate = {
                    tableName: "constructStatus",
                    id: entry.id,
                    constructRequestId: entry.constructRequestId,
                    sequenceReviewed: entry.sequenceReviewed,
                    designed: entry.designed,
                    ordered: entry.ordered,
                    cloned: entry.cloned,
                    maxiprep: entry.maxiprep,
                    sequenceVerified: entry.sequenceVerified,
                    onHold: entry.onHold,
                    assignedTo: entry.assignedTo
                };
                SiHttpUtil.UpdateDataEntry(toUpdate).then(function (resp) {
                    if (resp.status == 200) {
                        angular.extend(entry, resp.data.newData);
                        $scope.m.RefreshData();
                    }
                });
            }
        };

        SiHttpUtil.InitRowClick($scope);

        $scope.m.ValidateCreateInput = (FieldName, Type) => SiHttpUtil.ValidateInput($scope.m.CreateForm.ui.validate, $scope.m.CreateForm.submitted, FieldName, Type);
        $scope.m.ValidateEditInput = (FieldName, Type) => SiHttpUtil.ValidateInput($scope.m.editForm.ui.validate, $scope.m.editForm.submitted, FieldName, Type);

        $scope.m.LoadDataList = function () {
            return SiHttpUtil.SearchByColumn($scope.m.tableName, $scope.m.query).then(function (resp) {
                return new Promise(function (resolve, reject) {
                    $scope.m.tableData = resp;
                    if (resp.enums) {
                        var enumList = JSON.parse(resp.enums);
                        $scope.sectionNames = angular.copy(enumList.ENUM_packageSectionName);
                    }
                    if ($scope.m.tableData && $scope.m.tableData.length > 0) {
                        if ($scope.m.dtColumns.length === 0) {
                            SiHttpUtil.initDtColumns($scope.m.dtColumns, $scope.m.tableData, colName => SiHttpUtil.omitColumnForTable($scope.m.tableName, colName), colName => SiHttpUtil.dbColumnTranslator($scope.m.tableName, colName), colName => SiHttpUtil.hideColumnForTable($scope.m.tableName, colName), SiHttpUtil.tableOrder($scope.m.tableName));
                        }

                        $scope.m.dtColDefs = [DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'description')).renderWith(SiUtil.ColDisplayers.DescriptionDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'requestDate')).renderWith(SiUtil.ColDisplayers.ShortDateDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'sequenceReviewed')).renderWith(SiUtil.ColDisplayers.CheckDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'priority')).renderWith(SiUtil.ColDisplayers.CheckDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'assignedTo')).renderWith(SiUtil.ColDisplayers.GetHashConvertDisplayer($scope.UserHash)), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'designed')).renderWith(SiUtil.ColDisplayers.CheckDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'ordered')).renderWith(SiUtil.ColDisplayers.CheckDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'cloned')).renderWith(SiUtil.ColDisplayers.CheckDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'maxiprep')).renderWith(SiUtil.ColDisplayers.CheckDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'sequenceVerified')).renderWith(SiUtil.ColDisplayers.CheckDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'completed')).renderWith(SiUtil.ColDisplayers.CheckDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'progress')).renderWith(SiUtil.ColDisplayers.ProgressDisplayer),
                        // DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'createdBy'))
                        //     .renderWith(
                        //         SiUtil.ColDisplayers.GetHashConvertDisplayer($scope.UserHash)
                        //     ),
                        DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'updatedAt')).renderWith(SiUtil.ColDisplayers.ShortDateDisplayer)];

                        $scope.m.dtOptions = SiHttpUtil.initDtOptions($scope.m.dtColumns, $scope.m.tableData, $scope.m.rowCallback, function () {
                            resolve($scope.m.tableData);
                            $scope.m.dataReady = true;
                        }).withOption('order', [['0', 'desc']]);
                    } else {
                        resolve($scope.m.tableData);
                    }
                });
            });
        };

        $scope.m.viewDetail = function () {
            if ($scope.m.currentRowData) {
                $scope.m.viewForm.show = true;
                SiHttpUtil.FetchOneEntry('constructStatus', $scope.m.currentRowData.id).then(resp => {
                    $scope.m.viewForm.data = angular.copy(resp);
                    $scope.m.viewForm.data.createdAt = SiUtil.getDateOnly(resp.createdAt);
                    $scope.m.viewForm.data.updatedAt = SiUtil.getDateOnly(resp.updatedAt);
                });
                $scope.m.activeTab = "DetailTab";
            }
        };

        $scope.m.editDetail = function () {
            if ($scope.m.currentRowData) {
                $scope.m.editForm.data = angular.copy($scope.m.currentRowData);
                $scope.m.editForm.data.references = angular.fromJson($scope.m.editForm.data.references);
                $scope.m.editForm.data.requestDate = {
                    dt: $scope.m.editForm.data.requestDate ? new Date($scope.m.editForm.data.requestDate) : null
                };
                $scope.m.editForm.show = true;
                $scope.m.activeTab = "EditTab";
            }
        };
        $scope.m.loadAll = function () {
            $scope.m.dp = SiUtil.dp.bind($scope.m)();
            $scope.m.getQuery();
            $scope.m.LoadDataList();
            if ($scope.m.op === "create") {
                $scope.m.activeTab = "CreateTab";
                $scope.m.CreateForm.data.constructRequestId = parseInt($scope.m.id);
                $scope.m.CreateForm.initTab(true);
            }
            if ($scope.m.op === "view" && $scope.m.id) {
                $scope.m.currentRowData = {
                    id: $scope.m.id
                };
                $scope.m.viewDetail();
            }
        };

        $scope.m.loadAll();
    }
})();

(function () {
    'use strict';

    angular.module('systimu').controller('PlasmidsController', PlasmidsController);
    PlasmidsController.$inject = ['$scope', 'DTOptionsBuilder', 'DTColumnBuilder', 'SiUtil', '$stateParams', 'SiHttpUtil', 'DTColumnDefBuilder'];

    function PlasmidsController($scope, DTOptionsBuilder, DTColumnBuilder, SiUtil, $stateParams, SiHttpUtil, DTColumnDefBuilder) {
        $scope.m = {};
        $scope.m.tableName = "plasmids";
        $scope.tableState.currentResearchTable = "plasmids";
        $scope.m.activeTab = "ViewAllTab";
        $scope.m.dtColumns = [];
        $scope.m.tableData = null;
        $scope.op = $stateParams.op;
        $scope.opId = $stateParams.id;
        $scope.dateFormat = date => {
            return date.split('T')[0].replace(/-/g, '');
        };

        $scope.markerClick = function (event, marker) {
            $scope.$apply(function () {
                $scope.selectedmarker = marker;
            });
        };

        $scope.dismissPopup = function () {
            $scope.selectedmarker = null;
        };

        $scope.m.statusFilter = {
            includeComplete: false,
            includeNotComplete: false
        };

        $scope.m.onStatusChange = function () {
            var table = $('#plasmids').DataTable();
            var val = [];
            if ($scope.m.statusFilter.includeComplete) {
                val.push(true);
            }
            if ($scope.m.statusFilter.includeNotComplete) {
                val.push(false);
            }
            table.columns(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'completed')).search(val.join('|'), true, false).draw();
        };

        $scope.m.updateStatus = function () {
            SiHttpUtil.UpdateDataEntry({
                tableName: $scope.m.tableName,
                id: $scope.m.currentRowData.id,
                completed: true,
                updatedAt: $scope.m.currentRowData.updatedAt
            }).then(resp => {
                if (resp.status == 200) {
                    $scope.m.RefreshData();
                    SiHttpUtil.tableRowResetSelection($scope.m);
                }
            });
        };

        $scope.m.loadRequestDetails = plasmidEntry => {
            if (plasmidEntry.constructStatusId) {
                SiHttpUtil.FetchOneEntry("constructStatus", plasmidEntry.constructStatusId).then(resp => {
                    plasmidEntry.description = resp.description;
                    plasmidEntry.projectId = resp.ConstructRequest.requestProject.id;
                });
            } else {
                plasmidEntry.description = null;
                plasmidEntry.projectId = null;
            }
        };

        $scope.m.loadRequestList = () => {
            SiHttpUtil.FetchIdNameMapping("constructStatus").then(resp => {
                $scope.m.ConstructStatusDisplayData = SiHttpUtil.GetDependencyList(resp);
                $scope.m.ConstructListReady = true;
            });
        };

        $scope.m.BulkCreateForm = {
            data: {
                plasmidsToAdd: []
            },
            ui: {},
            submitted: false,
            ResetTab: function () {
                SiHttpUtil.ResetForm($scope.m.BulkCreateForm);
                $scope.m.BulkCreateForm.data = {};
                $scope.m.BulkCreateForm.data.plasmidsToAdd = [];
            },
            addEntry: function () {
                $scope.m.BulkCreateForm.data.plasmidsToAdd.push({});
            },
            removeEntry: function (index) {
                $scope.m.BulkCreateForm.data.plasmidsToAdd.splice(index, 1);
            },
            copyData: function (column) {
                var len = $scope.m.BulkCreateForm.data.plasmidsToAdd.length;
                var entry = $scope.m.BulkCreateForm.data.plasmidsToAdd[0][column];
                for (var i = 0; i < len; i++) {
                    $scope.m.BulkCreateForm.data.plasmidsToAdd[i][column] = entry;
                }
            },
            parseCSV: function () {
                var formData = new FormData();
                $scope.m.ShowImportBtn = false;
                formData.append('file', document.getElementById('file').files[0]);
                SiHttpUtil.POSTRequest(SiHttpUtil.helperAPIUrl + "parsePlasmidData/", formData).then(function (resp) {
                    SiHttpUtil.NotifyOk("Please review data changes");
                    var curr;
                    for (var i = 0; i < resp.length; i++) {
                        curr = resp[i];
                        $scope.m.BulkCreateForm.data.plasmidsToAdd.push({
                            projectId: parseInt(curr.projectId),
                            description: curr.description,
                            ENUM_vector: curr.vector,
                            ENUM_bacteria: curr.bacteria,
                            ENUM_plasmidTag: curr.plasmidTag,
                            ENUM_mammalian: curr.selectionMarker
                        });
                    }
                }, function (err) {
                    SiHttpUtil.NotifyOperationErr("CSV Parse Error");
                    $scope.m.ShowImportBtn = true;
                });
            },
            SubmitTab: function () {
                $scope.m.BulkCreateForm.submitted = true;
                if (!$scope.m.BulkCreateForm.ui.validate.$valid) {
                    console.error($scope.m.BulkCreateForm.ui.validate);
                    return;
                }

                var newEntries = [];
                for (var i = 0; i < $scope.m.BulkCreateForm.data.plasmidsToAdd.length; i++) {
                    var temp = {};
                    temp.projectId = $scope.m.BulkCreateForm.data.plasmidsToAdd[i].projectId, temp.description = $scope.m.BulkCreateForm.data.plasmidsToAdd[i].description;
                    temp.ENUM_vector = $scope.m.BulkCreateForm.data.plasmidsToAdd[i].ENUM_vector;
                    temp.ENUM_bacteria = $scope.m.BulkCreateForm.data.plasmidsToAdd[i].ENUM_bacteria;
                    temp.ENUM_plasmidTag = $scope.m.BulkCreateForm.data.plasmidsToAdd[i].ENUM_plasmidTag;
                    temp.ENUM_mammalian = $scope.m.BulkCreateForm.data.plasmidsToAdd[i].ENUM_mammalian;
                    temp.constructStatusId = $scope.m.BulkCreateForm.data.plasmidsToAdd[i].constructStatusId;
                    newEntries.push(temp);
                }
                var toCreate = {
                    tableName: "plasmids",
                    list: newEntries
                };

                SiHttpUtil.CreateTableEntries(toCreate).then(function (resp) {
                    if (resp.status == 200) {
                        $scope.m.BulkCreateForm.ResetTab();
                        $scope.m.activeTab = "ViewAllTab";
                        $scope.m.RefreshData();
                    }
                });
            }
        };

        $scope.m.BulkLotCreate = {
            data: {
                lotsToAdd: []
            },
            ui: {},
            submitted: false,
            ResetTab: function () {
                SiHttpUtil.ResetForm($scope.m.BulkLotCreate);
                $scope.m.BulkLotCreate.data.lotsToAdd = [];
            },
            copyData: function (column) {
                var len = $scope.m.BulkCreateForm.data.plasmidsToAdd.length;
                var entry = $scope.m.BulkCreateForm.data.plasmidsToAdd[0][column];
                for (var i = 0; i < len; i++) {
                    $scope.m.BulkCreateForm.data.plasmidsToAdd[i][column] = entry;
                }
            },
            dpOpen: function ($event, input) {
                $event.preventDefault();
                $event.stopPropagation();
                input.opened = !input.opened;
            },
            initTab: () => {
                SiHttpUtil.FetchIdNameMapping('plasmids').then(resp => {
                    $scope.m.BulkLotCreate.plasmids = SiHttpUtil.GetDependencyList(resp);
                });
            },
            addEntry: function () {
                $scope.m.BulkLotCreate.data.lotsToAdd.push({
                    prepDate: {
                        dt: new Date()
                    },
                    operator: SiHttpUtil.GetUserId()
                });
            },
            removeEntry: function (index) {
                $scope.m.BulkLotCreate.data.lotsToAdd.splice(index, 1);
            },
            parseCSV: function () {
                var formData = new FormData();
                $scope.m.ShowImportBtn = false;
                formData.append('file', document.getElementById('lot').files[0]);
                SiHttpUtil.POSTRequest(SiHttpUtil.helperAPIUrl + "parsePlasmidLotData/", formData).then(function (resp) {
                    SiHttpUtil.NotifyOk("Please review data changes");
                    for (let i = 0; i < resp.length; i++) {
                        const curr = resp[i];
                        $scope.m.BulkLotCreate.data.lotsToAdd.push({
                            plasmidId: parseInt(curr.plasmidId),
                            prepDate: {
                                dt: new Date(curr.prepDate)
                            },
                            orderRef: curr.orderRef,
                            concentration: curr.concentration,
                            volume: curr.volume,
                            operator: curr.operator,
                            notes: curr.notes
                        });
                    }
                }, function (err) {
                    SiHttpUtil.NotifyOperationErr("CSV Parse Error");
                    $scope.m.ShowImportBtn = true;
                });
            },
            SubmitTab: () => {
                $scope.m.BulkLotCreate.submitted = true;
                if (!$scope.m.BulkLotCreate.ui.validate.$valid) {
                    console.error($scope.m.BulkLotCreate.ui.validate);
                    return;
                }

                const newEntries = [];
                for (let i = 0; i < $scope.m.BulkLotCreate.data.lotsToAdd.length; i++) {
                    const temp = {
                        prepDate: $scope.m.BulkLotCreate.data.lotsToAdd[i].prepDate.dt,
                        plasmidId: $scope.m.BulkLotCreate.data.lotsToAdd[i].plasmidId,
                        orderRef: $scope.m.BulkLotCreate.data.lotsToAdd[i].orderRef,
                        concentration: $scope.m.BulkLotCreate.data.lotsToAdd[i].concentration,
                        originalVolume: $scope.m.BulkLotCreate.data.lotsToAdd[i].volume,
                        volume: $scope.m.BulkLotCreate.data.lotsToAdd[i].volume,
                        operator: $scope.m.BulkLotCreate.data.lotsToAdd[i].operator,
                        notes: $scope.m.BulkLotCreate.data.lotsToAdd[i].notes
                    };
                    newEntries.push(temp);
                }
                var toCreate = {
                    tableName: "plasmidLot",
                    list: newEntries
                };

                SiHttpUtil.CreateTableEntries(toCreate).then(function (resp) {
                    if (resp.status == 200) {
                        $scope.m.BulkLotCreate.ResetTab();
                        $scope.m.activeTab = "ViewAllTab";
                        $scope.m.RefreshData();
                    }
                });
            }
        };

        $scope.m.ValidateBulkCreateInput = (FieldName, Type) => SiHttpUtil.ValidateInput($scope.m.BulkCreateForm.ui.validate, $scope.m.BulkCreateForm.submitted, FieldName, Type);
        $scope.m.ValidateCreateInput = (FieldName, Type) => SiHttpUtil.ValidateInput($scope.m.CreateForm.ui.validate, $scope.m.CreateForm.submitted, FieldName, Type);
        $scope.m.ValidateEditInput = (FieldName, Type) => SiHttpUtil.ValidateInput($scope.m.editForm.ui.validate, $scope.m.editForm.submitted, FieldName, Type);

        $scope.m.DtInstCallback = function (inst) {
            $scope.m.DtInst = inst;
        };
        SiHttpUtil.InitRowClick($scope);
        $scope.m.InitFileHandler = () => SiHttpUtil.InitJqueryImportCSVChangeHandler($scope, 'file');
        $scope.m.InitLotHandler = () => SiHttpUtil.InitJqueryImportCSVChangeHandler($scope, 'lot');

        $scope.m.RefreshData = () => {
            if ($scope.m.DtInstCallback) {
                if ($scope.m.DtInst) {
                    $scope.m.DtInst.changeData($scope.m.refreshPlasmids());
                } else {
                    $scope.m.refreshPlasmids().then(function () {
                        $scope.m.dataReady = true;
                        $scope.$digest();
                    });
                }
            }
        };

        $scope.m.refreshPlasmids = function () {
            return SiHttpUtil.FetchTableEntries('plasmids').then(function (resp) {
                return new Promise(function (resolve, reject) {
                    if (resp.enums) {
                        var enums = JSON.parse(resp.enums);
                        $scope.enums = enums;
                        $scope.vectors = enums.ENUM_vector;
                        $scope.plasmidTags = enums.ENUM_plasmidTag;
                        $scope.bacterias = enums.ENUM_bacteria;
                        $scope.mammalians = enums.ENUM_mammalian;
                    }
                    $scope.m.tableData = resp.records;
                    $scope.plasmidProteinPairs = resp.plasmidProteinPairs;
                    if ($scope.m.tableData && $scope.m.tableData.length > 0) {
                        if ($scope.m.dtColumns.length == 0) {
                            SiHttpUtil.initDtColumns($scope.m.dtColumns, $scope.m.tableData, colName => SiHttpUtil.omitColumnForTable('plasmid', colName), colName => SiHttpUtil.dbColumnTranslator('plasmid', colName));
                        }

                        $scope.m.dtColDefs = [DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'projectId')).renderWith( // Operator.
                        SiUtil.ColDisplayers.GetHashConvertDisplayer($scope.m.ProjectDisplayData.Hash)).withOption('type', 'natural').withOption('defaultContent', ''), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'completed')).renderWith(SiUtil.ColDisplayers.CheckDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'createdBy')).renderWith( // Operator.
                        SiUtil.ColDisplayers.GetHashConvertDisplayer($scope.UserHash)), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'updatedAt')).renderWith( //CreatedAt.
                        SiUtil.ColDisplayers.ShortDateDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'description')).renderWith( // Operator.
                        SiUtil.ColDisplayers.DescriptionDisplayer)];

                        $scope.m.dtOptions = SiHttpUtil.initDtOptions($scope.m.dtColumns, $scope.m.tableData, $scope.m.rowCallback, function () {
                            resolve($scope.m.tableData);
                            $scope.m.plasmidsReady = true;
                            if ($scope.op == "view" && $scope.opId) {
                                var records = $scope.m.tableData;
                                for (var i = 0; i < records.length; i++) {
                                    if (records[i].id == $scope.opId) {
                                        $scope.m.currentRowData = records[i];
                                        break;
                                    }
                                }
                                $scope.viewPlasmidDetail();
                            }
                            if ($scope.op == "create") {
                                $scope.m.activeTab = "CreateTab";
                            }
                        });
                    }
                }, function (error) {
                    console.log("plasmids get error:", error);
                });
            });
        };

        $scope.m.viewForm = SiHttpUtil.InitViewForm($scope.m);

        $scope.m.CreateForm = {
            data: {},
            ui: {},
            submitted: false,
            ResetTab: function () {
                $scope.m.plasmidListToAdd = [];
                SiHttpUtil.ResetForm($scope.m.CreateForm);
                $scope.m.dp.initDp('CreateForm', 'requestDate', true);
                $scope.m.activeTab = "ViewAllTab";
            },
            SubmitTab: function () {
                $scope.m.CreateForm.submitted = true;
                if (!$scope.m.CreateForm.ui.validate.$valid) {
                    console.error($scope.m.CreateForm.ui.validate);
                    return;
                }
                var references = [];
                if ($scope.m.CreateForm.data.geneiousUrn) {
                    references = [{
                        section: "Geneious Links",
                        name: "Plasmid Sequence",
                        url: $scope.m.CreateForm.data.geneiousUrn
                    }];
                }
                const PlasmidEntry = {
                    tableName: "plasmids",
                    description: $scope.m.CreateForm.data.description,
                    constructStatusId: $scope.m.CreateForm.data.constructStatusId,
                    projectId: $scope.m.CreateForm.data.projectId,
                    ENUM_vector: $scope.m.CreateForm.data.plasmidVector,
                    ENUM_bacteria: $scope.m.CreateForm.data.plasmidBac,
                    ENUM_mammalian: $scope.m.CreateForm.data.plasmidMam,
                    ENUM_plasmidTag: $scope.m.CreateForm.data.plasmidTag,
                    references: angular.toJson(references)
                };

                SiHttpUtil.CreateTableEntry(PlasmidEntry).then(function (resp) {
                    if (resp.status == 200) {
                        $scope.m.CreateForm.ResetTab();
                        $scope.m.RefreshData();
                        SiHttpUtil.ResetStateParams();
                    }
                });
            }
        };

        $scope.m.editForm = {
            show: false,
            submitted: false,
            ui: {},
            CancelTab: () => SiHttpUtil.HideTab($scope.m, $scope.m.editForm),
            SubmitTab: function () {
                $scope.m.editForm.submitted = true;
                if (!$scope.m.editForm.ui.validate.$valid) {
                    console.error($scope.m.editForm.ui.validate);
                    return;
                }
                if ($scope.m.editForm.PlasmidLots) {
                    for (let i = 0; i < $scope.m.editForm.PlasmidLots.length; i++) {
                        const curr = $scope.m.editForm.PlasmidLots[i];
                        curr.prepDate = curr.prepDate.dt;
                    }
                }
                SiHttpUtil.UpdateDataEntry({
                    tableName: $scope.m.tableName,
                    id: $scope.m.editForm.plasmidId,
                    name: $scope.m.editForm.plasmidName,
                    description: $scope.m.editForm.plasmidDesc,
                    projectId: $scope.m.editForm.plasmidProj,
                    proteinId: $scope.m.editForm.proteinId,
                    ENUM_vector: $scope.m.editForm.plasmidVector,
                    ENUM_bacteria: $scope.m.editForm.plasmidBac,
                    ENUM_mammalian: $scope.m.editForm.plasmidMam,
                    ENUM_plasmidTag: $scope.m.editForm.plasmidTag,
                    updatedAt: $scope.m.editForm.updatedAt,
                    reprep: $scope.m.editForm.reprep,
                    references: angular.toJson($scope.m.editForm.RefLinkList.data),
                    lots: $scope.m.editForm.PlasmidLots
                }).then(resp => {
                    if (resp.status == 200) {
                        $scope.m.editForm.CancelTab();
                        $scope.m.RefreshData();
                        $scope.m.resetSelection();
                    }
                });
            },
            addLot: () => {
                $scope.m.editForm.PlasmidLots.push({
                    prepDate: {
                        dt: new Date()
                    }
                });
            },
            removeLot: index => {
                if ($scope.m.editForm.PlasmidLots[index].id) {
                    $scope.m.editForm.PlasmidLots[index].isDeleted = true;
                } else {
                    $scope.m.editForm.PlasmidLots.splice(index, 1);
                }
            },
            dpFormat: "yyyyMMdd",
            dpOpen: function ($event, input) {
                $event.preventDefault();
                $event.stopPropagation();
                input.opened = !input.opened;
            },
            Delete: () => {
                if ($scope.m.currentRowData) {
                    SiHttpUtil.DeleteDataEntry("plasmids", $scope.m.editForm.plasmidId).then(function (resp) {
                        $scope.m.activeTab = "ViewAllTab";
                        $scope.m.editForm.show = false;
                        $scope.m.resetSelection();
                        $scope.m.RefreshData();
                    }, function (err) {
                        console.log("delete entry error:", err);
                    });
                }
            }
        };

        $scope.editPlasmid = function () {
            if ($scope.m.currentRowData) {
                $scope.m.editForm.show = true;
                $scope.m.activeTab = "EditTab";
                SiHttpUtil.FetchOneEntry('plasmids', $scope.m.currentRowData.id).then(resp => {
                    $scope.m.editForm.PlasmidLots = resp.PlasmidLots;
                    for (let i = 0; i < resp.PlasmidLots.length; i++) {
                        resp.PlasmidLots[i].prepDate = {
                            dt: new Date(resp.PlasmidLots[i].prepDate)
                        };
                    }
                });
                $scope.m.editForm.plasmidName = $scope.m.currentRowData.name;
                $scope.m.editForm.reprep = $scope.m.currentRowData.reprep;
                $scope.m.editForm.plasmidDesc = $scope.m.currentRowData.description;
                $scope.m.editForm.plasmidProj = $scope.m.currentRowData.projectId;
                $scope.m.editForm.plasmidVector = $scope.m.currentRowData.ENUM_vector;
                $scope.m.editForm.concentration = $scope.m.currentRowData.concentration;
                $scope.m.editForm.plasmidTag = $scope.m.currentRowData.ENUM_plasmidTag;
                $scope.m.editForm.plasmidMam = $scope.m.currentRowData.ENUM_mammalian;
                $scope.m.editForm.plasmidBac = $scope.m.currentRowData.ENUM_bacteria;
                $scope.m.editForm.plasmidId = $scope.m.currentRowData.id;
                $scope.m.editForm.updatedAt = $scope.m.currentRowData.updatedAt;

                $scope.m.editForm.RefLinkList = {
                    nameList: $scope.enums.ENUM_plasmidSectionName,
                    data: JSON.parse($scope.m.currentRowData.references) || []
                };
            }
        };

        $scope.m.refreshPlasmidData = entryId => {
            SiHttpUtil.RefreshPlasmidData(entryId).then(resp => {
                SiHttpUtil.FetchOneEntry('plasmids', $scope.m.currentRowData.id).then(resp => {
                    $scope.m.viewForm.annotations = resp.PlasmidAnnotations;
                    $scope.m.viewForm.data = resp.PlasmidDatum;
                });
            }, err => {
                SiHttpUtil.NotifyOperationErr(err);
            });
        };

        $scope.viewPlasmidDetail = function () {
            if ($scope.m.currentRowData) {
                $scope.m.viewForm.show = true;
                $scope.m.activeTab = "ViewDetail";
                SiHttpUtil.FetchOneEntry('plasmids', $scope.m.currentRowData.id).then(resp => {
                    $scope.m.viewForm.proteins = resp.Proteins;
                    $scope.m.viewForm.lots = resp.PlasmidLots;
                    $scope.m.viewForm.annotations = resp.PlasmidAnnotations;
                    $scope.m.viewForm.data = resp.PlasmidDatum;
                    $scope.m.viewForm.construct = resp.ConstructStatus;
                });
                $scope.m.viewForm.id = $scope.m.currentRowData.id;
                $scope.m.viewForm.plasmidName = $scope.m.currentRowData.name;
                $scope.m.viewForm.plasmidDesc = $scope.m.currentRowData.description;
                $scope.m.viewForm.projectId = $scope.m.currentRowData.projectId;
                $scope.m.viewForm.plasmidVector = $scope.m.currentRowData.ENUM_vector;
                $scope.m.viewForm.plasmidTag = $scope.m.currentRowData.ENUM_plasmidTag;
                $scope.m.viewForm.plasmidMam = $scope.m.currentRowData.ENUM_mammalian;
                $scope.m.viewForm.plasmidBac = $scope.m.currentRowData.ENUM_bacteria;
                $scope.m.viewForm.concentration = $scope.m.currentRowData.concentration;
                $scope.m.viewForm.plasmidId = $scope.m.currentRowData.id;
                $scope.m.viewForm.createdBy = $scope.m.currentRowData.createdBy;
                $scope.m.viewForm.updatedBy = $scope.m.currentRowData.updatedBy;
                $scope.m.viewForm.createdAt = SiUtil.getDateOnly($scope.m.currentRowData.createdAt);
                $scope.m.viewForm.updatedAt = SiUtil.getDateOnly($scope.m.currentRowData.updatedAt);
                $scope.selectedSectionList = $scope.enums.ENUM_plasmidSectionName;
                $scope.m.viewForm.referenceArray = JSON.parse($scope.m.currentRowData.references);
                for (var key in $scope.m.viewForm.referenceArray) {
                    if ($scope.m.viewForm.referenceArray[key].section == "Geneious Links") {
                        $scope.m.viewForm.referenceArray[key].url = "geneious:/\/urn=" + $scope.m.viewForm.referneceArray[key].url;
                    }
                }
            }
        };

        $scope.m.loadAll = function () {
            $scope.m.dp = SiUtil.dp.bind($scope.m)();
            $scope.m.dp.initDp('CreateForm', 'requestDate', true);
            var CacheProjects = SiHttpUtil.FetchIdNameMapping('project').then(function (resp) {
                $scope.m.ProjectList = resp;
                $scope.m.ProjectDisplayData = SiHttpUtil.GetDependencyList($scope.m.ProjectList);
                $scope.m.ProjectListReady = true;
            });

            var deps = []; // Dependencies.
            deps.push(CacheProjects);
            Promise.all(deps).then(values => {
                $scope.m.refreshPlasmids();
            });
        };

        $scope.m.loadAll();
    }
})();
(function () {
    'use strict';

    angular.module('app.research').controller('ProteinsController', ProteinsController);
    ProteinsController.$inject = ['$scope', 'SiHttpUtil', 'DTOptionsBuilder', 'DTColumnBuilder', 'DTColumnDefBuilder', 'SiUtil', '$http', 'Global', '$stateParams', '$timeout'];

    function ProteinsController($scope, SiHttpUtil, DTOptionsBuilder, DTColumnBuilder, DTColumnDefBuilder, SiUtil, $http, Global, $stateParams, $timeout) {
        // Main model.
        $scope.global = Global;
        $scope.m = {
            tableName: "protein",
            activeTab: "ViewAllTab",
            tableData: null,
            plasmidListToAdd: []
        };
        $scope.tableState.currentResearchTable = "proteins";
        $scope.op = $stateParams.op;
        $scope.id = $stateParams.id;

        $scope.m.tree_handler = function (branch) {
            if (branch.label != "No Associated Data") {
                $scope.selectedUrl = "#!/app/research/" + branch.data.tableurl + "?op=view&id=" + branch.data.id;
                $scope.selectedItem = branch.label;
            }
        };
        $scope.m.treedata = [];
        // Tree uses python helper API
        $scope.m.loadTree = function () {
            $http({
                url: SiHttpUtil.helperAPIUrl + "proteintree/" + $scope.m.viewForm.id,
                method: "GET"
            }).then(function (response) {
                $scope.m.treedata = response.data;
                if ($scope.m.treedata.length == 0) {
                    $scope.m.treedata = [{
                        label: "No Associated Data"
                    }];
                }
            });
        };

        $scope.m.fetchPlasmids = () => {
            SiHttpUtil.FetchIdNameMapping('plasmids').then(function (resp) {
                $scope.m.PlasmidList = resp;
                $scope.m.PlasmidDisplayData = SiHttpUtil.GetDependencyDisplayItemList($scope.m.PlasmidList);
                $scope.m.PlasmidListReady = true;
            });
        };

        $scope.m.viewForm = {
            show: false,
            submitted: false,
            CancelTab: () => SiHttpUtil.HideTab($scope.m, $scope.m.viewForm)
        };
        $scope.m.editForm = {
            show: false,
            submitted: false,
            data: {},
            ui: {},
            CancelTab: () => SiHttpUtil.HideTab($scope.m, $scope.m.editForm),
            SubmitTab: function () {
                $scope.m.editForm.submitted = true;
                if (!$scope.m.editForm.ui.validate.$valid) {
                    console.error($scope.m.editForm.ui.validate);
                    return;
                }
                var RefLinkListJson = angular.toJson($scope.m.editForm.RefLinkList.data);
                SiHttpUtil.UpdateDataEntry({
                    tableName: "protein",
                    id: $scope.m.editForm.data.id,
                    projectId: $scope.m.editForm.projectId,
                    ENUM_moleculeType: $scope.m.editForm.ENUM_moleculeType,
                    description: $scope.m.editForm.data.description,
                    molecularWeight: $scope.m.editForm.molecularWeight,
                    molarExtCoefficient: $scope.m.editForm.molarExtCoefficient,
                    pI: $scope.m.editForm.pI,
                    references: RefLinkListJson,
                    updatedAt: $scope.m.editForm.updatedAt
                }).then(resp => {
                    $scope.m.editForm.CancelTab();
                    $scope.m.RefreshData();
                    $scope.m.resetSelection();
                });
            },
            Delete: () => {
                if ($scope.m.currentRowData) {
                    SiHttpUtil.DeleteDataEntry("protein", $scope.m.editForm.data.id).then(function (resp) {
                        $scope.m.activeTab = "ViewAllTab";
                        $scope.m.editForm.show = false;
                        $scope.m.resetSelection();
                        $scope.m.RefreshData();
                    }, function (err) {
                        console.log("delete entry error:", err);
                    });
                }
            }
        };
        $scope.m.CreateForm = {
            data: {},
            ui: {},
            submitted: false,
            ResetTab: function () {
                $scope.m.plasmidListToAdd = [];
                SiHttpUtil.ResetForm($scope.m.CreateForm);
                $scope.m.activeTab = "ViewAllTab";
            },
            initTab: () => {
                $scope.m.fetchPlasmids();
            },
            SubmitTab: function () {
                $scope.m.CreateForm.submitted = true;
                if ($scope.m.plasmidListToAdd.length < 1) {
                    SiHttpUtil.NotifyOperationErr("At least one plasmid needs to be added when creating protein.");
                } else {
                    if (!$scope.m.CreateForm.ui.validate.$valid) {
                        console.error($scope.m.CreateForm.ui.validate);
                        return;
                    }
                    var ProteinEntry = {
                        tableName: "protein",
                        projectId: $scope.m.CreateForm.data.ProjectId,
                        plasmidList: $scope.m.plasmidListToAdd,
                        description: $scope.m.CreateForm.data.Description,
                        name: $scope.m.CreateForm.data.ProteinName,
                        rank: $scope.m.CreateForm.data.ProteinRank,
                        molecularWeight: $scope.m.CreateForm.data.molecularWeight,
                        molarExtCoefficient: $scope.m.CreateForm.data.molarExtCoefficient,
                        pI: $scope.m.CreateForm.data.pI,
                        typeCode: $scope.m.CreateForm.data.ProteinTypeCode,
                        ENUM_moleculeType: $scope.m.CreateForm.data.ProteinMoleculeType
                    };

                    SiHttpUtil.CreateTableEntry(ProteinEntry).then(function (resp) {
                        // console.log("created", resp);
                        if (resp.status == 200) {
                            $scope.m.CreateForm.ResetTab();
                            $scope.m.RefreshData();
                        }
                    });
                }
            }
        };

        $scope.m.BulkCreateForm = {
            data: {
                proteinsToAdd: []
            },
            ui: {},
            submitted: false,
            ResetTab: function () {
                SiHttpUtil.ResetForm($scope.m.BulkCreateForm);
                $scope.m.BulkCreateForm.data = {};
                $scope.m.BulkCreateForm.data.proteinsToAdd = [];
            },
            addEntry: function () {
                $scope.m.BulkCreateForm.data.proteinsToAdd.push({});
            },
            removeEntry: function (index) {
                $scope.m.BulkCreateForm.data.proteinsToAdd.splice(index, 1);
            },
            copyData: function (column) {
                var len = $scope.m.BulkCreateForm.data.proteinsToAdd.length;
                var entry = $scope.m.BulkCreateForm.data.proteinsToAdd[0][column];
                for (var i = 0; i < len; i++) {
                    $scope.m.BulkCreateForm.data.proteinsToAdd[i][column] = entry;
                }
            },
            SubmitTab: function () {
                $scope.m.BulkCreateForm.submitted = true;
                if (!$scope.m.BulkCreateForm.ui.validate.$valid) {
                    console.error($scope.m.BulkCreateForm.ui.validate);
                    return;
                }

                var newEntries = [];
                for (var i = 0; i < $scope.m.BulkCreateForm.data.proteinsToAdd.length; i++) {
                    const temp = {};
                    const curr = $scope.m.BulkCreateForm.data.proteinsToAdd[i];
                    temp.projectId = curr.projectId;
                    temp.description = curr.description;
                    temp.ENUM_moleculeType = curr.ENUM_moleculeType;
                    temp.molecularWeight = curr.molecularWeight;
                    temp.molarExtCoefficient = curr.molarExtCoefficient;
                    temp.pI = curr.pI;
                    if (curr.dna1 == curr.dna2) {
                        SiHttpUtil.NotifyOperationErr("Entry # " + (i + 1) + " has the same plasmid");
                        return;
                    }
                    temp.plasmidList = [curr.dna1, curr.dna2];
                    newEntries.push(temp);
                }
                var toCreate = {
                    tableName: "protein",
                    list: newEntries
                };

                SiHttpUtil.CreateTableEntries(toCreate).then(function (resp) {
                    if (resp.status == 200) {
                        $scope.m.BulkCreateForm.ResetTab();
                        $scope.m.activeTab = "ViewAllTab";
                        $scope.m.RefreshData();
                    }
                });
            }
        };

        $scope.m.Mappings = {
            data: {},
            loadData: () => {
                SiHttpUtil.FetchIdNameMapping("domain").then(resp => {
                    $scope.m.Mappings.domainMappings = resp.domainMappings || [];
                    $scope.m.Mappings.antigenClasses = resp.antigenClasses || [];
                });
            },
            removeEntry: (type, id) => {
                SiHttpUtil.DeleteDataEntry(type, id).then(resp => {
                    $scope.m.Mappings.loadData();
                });
            },
            addEntry: type => {
                const data = {
                    tableName: type
                };
                if (type === 'domain') {
                    data.domain = $scope.m.Mappings.data.domainName;
                    data.antigen = $scope.m.Mappings.data.antigenName;
                    data.fto = $scope.m.Mappings.data.fto;
                } else if (type === 'antigen') {
                    data.antigen = $scope.m.Mappings.data.antigenClassName;
                    data.class = $scope.m.Mappings.data.class;
                } else {
                    return;
                }
                SiHttpUtil.CreateTableEntry(data).then(resp => {
                    $scope.m.Mappings.loadData();
                }, err => {
                    SiHttpUtil.NotifyOperationErr("Error");
                });
                $scope.m.Mappings.data = {};
            }
        };

        $scope.m.ValidateCreateInput = (FieldName, Type) => SiHttpUtil.ValidateInput($scope.m.CreateForm.ui.validate, $scope.m.CreateForm.submitted, FieldName, Type);
        $scope.m.ValidateBulkCreateInput = (FieldName, Type) => SiHttpUtil.ValidateInput($scope.m.BulkCreateForm.ui.validate, $scope.m.BulkCreateForm.submitted, FieldName, Type);
        $scope.m.ValidateEditInput = (FieldName, Type) => SiHttpUtil.ValidateInput($scope.m.editForm.ui.validate, $scope.m.editForm.submitted, FieldName, Type);

        $scope.addPlasmid = function (plasmidId) {
            if ($scope.m.plasmidListToAdd.indexOf(plasmidId) > -1) {
                SiHttpUtil.NotifyOperationErr("Plasmid " + plasmidId + " Already added. Cannot be added again.");
            } else {
                $scope.m.plasmidListToAdd.push(plasmidId);
            }
        };
        $scope.removePlasmid = function (index) {
            $scope.m.plasmidListToAdd.splice(index, 1);
        };

        $scope.m.DtInstCallback = function (inst) {
            console.log("dt:", inst);
            $scope.m.DtInst = inst;
        };

        $scope.m.RefreshData = () => {
            if ($scope.m.DtInstCallback) {
                if ($scope.m.DtInst) {
                    $scope.m.DtInst.changeData($scope.m.LoadProteinList());
                } else {
                    $scope.m.LoadProteinList();
                }
            }
        };

        SiHttpUtil.InitRowClick($scope);

        $scope.m.dtColumns = [];

        $scope.m.LoadProteinList = function () {
            return SiHttpUtil.FetchTableEntries('protein').then(function (resp) {
                return new Promise(function (resolve, reject) {
                    if (resp.enums) {
                        var enumList = JSON.parse(resp.enums);
                        $scope.enums = enumList;
                        $scope.molecuTypes = enumList.ENUM_moleculeType || [];
                    }
                    $scope.m.tableData = resp.records;
                    if ($scope.m.tableData && $scope.m.tableData.length > 0) {
                        if ($scope.m.dtColumns.length == 0) {
                            SiHttpUtil.initDtColumns($scope.m.dtColumns, $scope.m.tableData, colName => SiHttpUtil.omitColumnForTable('protein', colName), colName => SiHttpUtil.dbColumnTranslator('protein', colName), colName => SiHttpUtil.hideColumnForTable('protein', colName), SiHttpUtil.tableOrder('protein'));
                        }

                        $scope.m.dtColDefs = [DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'createdBy')).renderWith( // Operator.
                        SiUtil.ColDisplayers.GetHashConvertDisplayer($scope.UserHash)), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'updatedAt')).renderWith( //CreatedAt.
                        SiUtil.ColDisplayers.ShortDateDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'description')).renderWith( // Operator.
                        SiUtil.ColDisplayers.DescriptionDisplayer)];

                        $scope.m.dtOptions = SiHttpUtil.initDtOptions($scope.m.dtColumns, $scope.m.tableData, $scope.m.rowCallback, function () {
                            resolve($scope.m.tableData);
                            $scope.m.dataReady = true;
                            if ($scope.op == "view" && $scope.id) {
                                var records = $scope.m.tableData;
                                for (var i = 0; i < records.length; i++) {
                                    if (records[i].id == $scope.id) {
                                        $scope.m.currentRowData = records[i];
                                        break;
                                    }
                                }
                                $scope.m.viewDetail();
                            }
                            if ($scope.op == "create") {
                                var records = $scope.m.tableData;
                                $scope.m.activeTab = "CreateTab";
                            }
                        }).withOption('order', [[10, 'desc']]);
                    }
                });
            });
        };

        $scope.m.renderSequence = plasmid => {
            const seq = new Sequence(plasmid.PlasmidDatum.aaSequence);
            $timeout(function () {
                seq.render('#plasmid' + plasmid.id, {
                    'charsPerLine': 60,
                    'search': true,
                    'badge': false,
                    'title': 'Sequence'
                });
                const coverage = [];
                const colors = SiHttpUtil.GraphColors();
                const start = plasmid.PlasmidDatum.aaSeqStart;
                const end = plasmid.PlasmidDatum.aaSeqEnd;
                let last;
                if (plasmid.PlasmidAnnotations && start) {
                    for (let i = 0; i < plasmid.PlasmidAnnotations.length; i++) {
                        const curr = plasmid.PlasmidAnnotations[i];
                        if (curr.start <= end && curr.start >= start) {
                            if (!last || curr.start >= last.start && curr.start >= last.end) {
                                coverage.push({
                                    start: Math.round((curr.start - start) / 3),
                                    end: Math.round((curr.end - start) / 3),
                                    color: curr.description.includes("linker") ? "black" : colors[i % (colors.length - 1)],
                                    underscore: curr.description.includes("linker"),
                                    tooltip: curr.description
                                });
                                last = curr;
                            }
                        }
                    }
                }
                seq.coverage(coverage);
            }, 0);
        };

        $scope.m.refreshPlasmidData = entryId => {
            SiHttpUtil.RefreshPlasmidData(entryId).then(resp => {
                SiHttpUtil.FetchOneEntry('protein', $scope.m.currentRowData.id).then(resp => {
                    $scope.m.viewForm.Plasmids = resp.Plasmids;
                });
            }, err => {
                SiHttpUtil.NotifyOperationErr(err);
            });
        };

        // Copy model to views.
        $scope.m.viewDetail = function () {
            if ($scope.m.currentRowData) {
                $scope.m.viewForm.show = true;
                $scope.m.activeTab = "DetailTab";
                SiHttpUtil.FetchOneEntry('protein', $scope.m.currentRowData.id).then(resp => {
                    $scope.m.viewForm.Plasmids = resp.Plasmids;
                });
                $scope.m.viewForm.id = $scope.m.currentRowData.id;
                $scope.m.viewForm.proteinName = $scope.m.currentRowData.name;
                $scope.m.treedata = [];
                $scope.selectedUrl = null;
                $scope.selectedItem = null;
                $scope.m.viewForm.description = $scope.m.currentRowData.description;
                $scope.m.viewForm.projectId = $scope.m.currentRowData.projectId;
                $scope.m.viewForm.ENUM_moleculeType = $scope.m.currentRowData.ENUM_moleculeType;
                $scope.m.viewForm.createdBy = $scope.UserHash[$scope.m.currentRowData.createdBy];
                $scope.m.viewForm.updatedBy = $scope.UserHash[$scope.m.currentRowData.updatedBy];
                $scope.m.viewForm.createdAt = SiUtil.getDateOnly($scope.m.currentRowData.createdAt);
                $scope.m.viewForm.updatedAt = SiUtil.getDateOnly($scope.m.currentRowData.updatedAt);
                $scope.selectedSectionList = $scope.enums.ENUM_proteinSectionName;
                $scope.m.viewForm.molecularWeight = $scope.m.currentRowData.molecularWeight;
                $scope.m.viewForm.molarExtCoefficient = $scope.m.currentRowData.molarExtCoefficient;
                $scope.m.viewForm.pI = $scope.m.currentRowData.pI;
            }
        };

        $scope.m.editDetail = function () {
            if ($scope.m.currentRowData) {
                $scope.m.activeTab = "EditTab";
                SiHttpUtil.FetchOneEntry('protein', $scope.m.currentRowData.id).then(resp => {
                    $scope.m.editForm.Plasmids = resp.Plasmids;
                });
                $scope.m.fetchPlasmids();
                $scope.m.editForm.data.id = $scope.m.currentRowData.id;
                $scope.m.editForm.proteinName = $scope.m.currentRowData.name;
                $scope.m.editForm.data.description = $scope.m.currentRowData.description;
                $scope.m.editForm.projectId = $scope.m.currentRowData.projectId;
                $scope.m.editForm.ENUM_moleculeType = $scope.m.currentRowData.ENUM_moleculeType;
                $scope.m.editForm.updatedAt = $scope.m.currentRowData.updatedAt;
                $scope.m.editForm.molecularWeight = $scope.m.currentRowData.molecularWeight;
                $scope.m.editForm.molarExtCoefficient = $scope.m.currentRowData.molarExtCoefficient;
                $scope.m.editForm.pI = $scope.m.currentRowData.pI;

                $scope.m.editForm.RefLinkList = {
                    data: JSON.parse($scope.m.currentRowData.references) || [],
                    nameList: $scope.enums.ENUM_proteinSectionName
                };
                $scope.m.editForm.show = true;
            }
        };

        $scope.addPlasProPair = function (id) {
            if ($scope.m.editForm.Plasmids.map(entry => entry.id).indexOf(id) > -1) {
                SiHttpUtil.NotifyOperationErr("Duplicate plasmid cannot be added.");
            } else {
                $scope.submitted = true;
                SiHttpUtil.CreateTableEntry({
                    tableName: "proteinPlasmidMapping",
                    proteinId: $scope.m.editForm.data.id,
                    plasmidId: id
                }).then(resp => {
                    if (resp.status == 200) {
                        $scope.m.LoadProteinList();
                        $scope.recordTab = 0;
                        $scope.m.editForm.Plasmids.push({
                            id: id,
                            name: $scope.m.PlasmidDisplayData.ListHash[id].name,
                            description: $scope.m.PlasmidDisplayData.ListHash[id].description
                        });
                    }
                });
            }
        };

        $scope.removePlasProPair = function (id) {
            if ($scope.m.editForm.Plasmids.map(entry => entry.id).indexOf(id) < 0) {
                SiHttpUtil.NotifyOperationErr("No such plasmid cannot be added.");
            } else {
                $scope.submitted = true;
                $http({
                    url: $scope.global.gateway + "/deleteEntry",
                    method: "POST",
                    data: {
                        tableName: "proteinPlasmidMapping",
                        proteinId: $scope.m.editForm.data.id,
                        plasmidId: id
                    }
                }).then(resp => {
                    SiHttpUtil.NotifyMsgByCode(resp, "Delete Plasmid Protein Pair").then(() => {
                        //$scope.m.editForm.cancelTab();
                        $scope.m.LoadProteinList();
                        $scope.recordTab = 0;
                        var idx = $scope.m.editForm.Plasmids.map(entry => entry.id).indexOf(id);
                        if (idx > -1) {
                            $scope.m.editForm.Plasmids.splice(idx, 1);
                        }
                    });
                });
            }
        };

        var LoadProjectList = SiHttpUtil.FetchIdNameMapping('project').then(function (resp) {
            $scope.m.ProjectList = resp;
            $scope.m.ProjectDisplayData = SiHttpUtil.GetDependencyDisplayItemList($scope.m.ProjectList);
            $scope.m.ProjectListReady = true;
        });

        var deps = []; // Dependencies.
        deps.push(LoadProjectList);
        Promise.all(deps).then(values => {
            $scope.m.LoadProteinList();
        });
    }
})();
(function () {
    'use strict';

    angular.module('systimu').controller('TransfectionRequestsController', TransfectionRequestsController);
    TransfectionRequestsController.$inject = ['$scope', 'DTOptionsBuilder', 'DTColumnBuilder', 'SiUtil', '$state', 'SiHttpUtil', 'DTColumnDefBuilder', '$stateParams'];

    function TransfectionRequestsController($scope, DTOptionsBuilder, DTColumnBuilder, SiUtil, $state, SiHttpUtil, DTColumnDefBuilder, $stateParams) {
        $scope.m = {
            tableName: "transfectionRequest",
            activeTab: "ViewAllTab",
            dtColumns: [],
            tableData: null
        };
        $scope.op = $stateParams.op;
        $scope.opId = $stateParams.id;
        $scope.tableState.currentResearchTable = "transfectionRequests";
        $scope.m.createFromPlasmid = false;
        $scope.m.createOptions = [{
            "value": 1,
            "text": "Create From Plasmid"
        }, {
            "value": 2,
            "text": "Create From Protein"
        }];

        $scope.m.statusFilter = {
            includePending: true,
            includeApproved: true,
            includeProgress: true,
            includePurification: true,
            includeComplete: false,
            includeFailed: false
        };

        $scope.m.getQuery = () => {
            var query = {
                $or: []
            };
            if ($scope.m.statusFilter.includePending) {
                query.$or.push({ requestStatus: 'Pending' });
            }
            if ($scope.m.statusFilter.includeApproved) {
                query.$or.push({ requestStatus: 'Approved' });
            }
            if ($scope.m.statusFilter.includeProgress) {
                query.$or.push({ requestStatus: 'In Progress' });
            }
            if ($scope.m.statusFilter.includePurification) {
                query.$or.push({ requestStatus: 'In Purification' });
            }
            if ($scope.m.statusFilter.includeComplete) {
                query.$or.push({ requestStatus: 'Completed' });
            }
            if ($scope.m.statusFilter.includeFailed) {
                query.$or.push({ requestStatus: 'Failed' });
            }
            if (query.$or.length == 0) {
                query = {};
            }
            $scope.m.query = query;
        };

        $scope.m.onStatusChange = function () {
            $scope.m.getQuery();
            $scope.m.RefreshData();
        };

        $scope.m.viewForm = SiHttpUtil.InitViewForm($scope.m);

        $scope.m.CreateForm = {
            data: {},
            ui: {},
            submitted: false,
            ResetTab: function () {
                SiHttpUtil.ResetForm($scope.m.CreateForm);
                $scope.m.activeTab = "ViewAllTab";
                $scope.m.dp.initDp('CreateForm', 'requestedDate', false);
                $scope.m.dp.initDp('CreateForm', 'requestedHarvestDate', false);
            },
            changePurify: () => {
                SiUtil.GetPurificationTagMethod($scope.m.CreateForm.data.proteinId, $scope.transfectionTags, $scope.transfectionPurificationMethods).then(result => {
                    $scope.m.CreateForm.data.transfectionTag = result.tag;
                    $scope.m.CreateForm.data.methods = angular.copy(result.methods);
                });
            },
            SubmitTab: function () {
                $scope.m.CreateForm.submitted = true;
                if (!$scope.m.CreateForm.ui.validate.$valid) {
                    console.error($scope.m.CreateForm.ui.validate);
                    return;
                }
                var TREntry = {
                    tableName: "transfectionRequest",
                    proteinId: $scope.m.CreateForm.data.proteinId,
                    ENUM_transfectionTag: $scope.m.CreateForm.data.purifyOrNot ? $scope.m.CreateForm.data.transfectionTag : null,
                    ENUM_transfectionScale: $scope.m.CreateForm.data.transfectionScale,
                    ENUM_transfectionType: $scope.m.CreateForm.data.transfectionType,
                    ENUM_transfectionCellLine: $scope.m.CreateForm.data.transfectionCellLine,
                    ENUM_transfectionPurificationMethod: $scope.m.CreateForm.data.purifyOrNot ? $scope.m.CreateForm.data.transfectionPurificationMethod : null,
                    purifyOrNot: $scope.m.CreateForm.data.purifyOrNot ? $scope.m.CreateForm.data.purifyOrNot : "No",
                    bufferExchange: $scope.m.CreateForm.data.transfectionBufferExchange ? $scope.m.CreateForm.data.transfectionBufferExchange : "No",
                    requesterNotes: $scope.m.CreateForm.data.requesterNotes,
                    requestedDate: $scope.m.CreateForm.data.requestedDate.dt,
                    requestedHarvestDate: $scope.m.CreateForm.data.requestedHarvestDate.dt
                };

                SiHttpUtil.CreateTableEntry(TREntry).then(function (resp) {
                    if (resp.status == 200) {
                        $scope.m.CreateForm.ResetTab();
                        $scope.m.RefreshData();
                        SiHttpUtil.ResetStateParams();
                    }
                });
            }
        };
        $scope.m.editForm = {
            show: false,
            submitted: false,
            ui: {},
            data: {},
            CancelTab: () => SiHttpUtil.HideTab($scope.m, $scope.m.editForm),
            SubmitTab: function () {
                $scope.m.editForm.submitted = true;
                if (!$scope.m.editForm.ui.validate.$valid) {
                    console.error($scope.m.EditForm.ui.validate);
                    return;
                }
                SiHttpUtil.UpdateDataEntry({
                    id: $scope.m.editForm.id,
                    tableName: "transfectionRequest",
                    ENUM_transfectionScale: $scope.m.editForm.transfectionScale,
                    ENUM_transfectionType: $scope.m.editForm.transfectionType,
                    ENUM_transfectionCellLine: $scope.m.editForm.transfectionCellLine,
                    purifyOrNot: $scope.m.editForm.transfectionPurifyOrNot,
                    ENUM_transfectionPurificationMethod: $scope.m.editForm.transfectionPurifyOrNot == 'Yes' ? $scope.m.editForm.transfectionPurificationMethod : null,
                    bufferExchange: $scope.m.editForm.transfectionPurifyOrNot == 'Yes' ? $scope.m.editForm.transfectionBufferExchange : null,
                    ENUM_transfectionTag: $scope.m.editForm.transfectionPurifyOrNot == 'Yes' ? $scope.m.editForm.transfectionRequestTags : null,
                    requesterNotes: $scope.m.editForm.requesterNotes,
                    notes: $scope.m.editForm.notes,
                    requestedDate: $scope.m.editForm.transfectionPurifyOrNot == 'No' ? $scope.m.editForm.data.requestedDate.dt : null,
                    requestedHarvestDate: $scope.m.editForm.transfectionPurifyOrNot == 'No' ? $scope.m.editForm.data.requestedHarvestDate.dt : null,
                    updatedAt: $scope.m.editForm.updatedAt
                }).then(resp => {
                    if (resp.status == 200) {
                        $scope.m.editForm.CancelTab();
                        $scope.m.RefreshData();
                        $scope.m.resetSelection();
                    }
                });
            }
        };
        $scope.m.BulkCreateForm = {
            data: {
                requestsToAdd: [],
                requestsToAddNoPur: []
            },
            ui: {},
            submitted: false,
            ResetTab: function () {
                SiHttpUtil.ResetForm($scope.m.BulkCreateForm);
                $scope.m.BulkCreateForm.data = {};
                $scope.m.BulkCreateForm.data.requestsToAdd = [];
                $scope.m.BulkCreateForm.data.requestsToAddNoPur = [];
            },
            addEntry: function (form) {
                if (form === "requestsToAddNoPur") {
                    $scope.m.BulkCreateForm.data[form].push({
                        requestedDate: {},
                        requestedHarvestDate: {}
                    });
                } else {
                    $scope.m.BulkCreateForm.data[form].push({});
                }
            },
            removeEntry: function (form, index) {
                $scope.m.BulkCreateForm.data[form].splice(index, 1);
            },
            dpOpen: function ($event, input) {
                $event.preventDefault();
                $event.stopPropagation();
                input.opened = !input.opened;
            },
            copyData: function (form, column, date) {
                const len = $scope.m.BulkCreateForm.data[form].length;
                const entry = $scope.m.BulkCreateForm.data[form][0][column];
                for (var i = 0; i < len; i++) {
                    if (date) {
                        $scope.m.BulkCreateForm.data[form][i][column].dt = entry.dt;
                    } else {
                        $scope.m.BulkCreateForm.data[form][i][column] = entry;
                    }
                }
            },
            changeProtein: entry => {
                SiUtil.GetPurificationTagMethod(entry.proteinId, $scope.transfectionTags, $scope.transfectionPurificationMethods).then(result => {
                    entry.transfectionTag = result.tag;
                    entry.methods = angular.copy(result.methods);
                });
            },
            SubmitTab: function () {
                $scope.m.BulkCreateForm.submitted = true;
                if (!$scope.m.BulkCreateForm.ui.validate.$valid) {
                    console.error($scope.m.BulkCreateForm.ui.validate);
                    return;
                }
                if ($scope.m.BulkCreateForm.data.requestsToAdd.length == 0 && $scope.m.BulkCreateForm.data.requestsToAddNoPur.length == 0) {
                    SiHttpUtil.NotifyOperationErr("Must add at least one request");
                    return;
                }
                const TREntry = function () {
                    return {
                        ENUM_transfectionType: $scope.m.BulkCreateForm.data.transfectionType,
                        ENUM_transfectionCellLine: $scope.m.BulkCreateForm.data.transfectionCellLine
                    };
                };

                const newEntries = [];
                let i;
                for (i = 0; i < $scope.m.BulkCreateForm.data.requestsToAdd.length; i++) {
                    const temp = TREntry();
                    temp.purifyOrNot = "Yes", temp.proteinId = $scope.m.BulkCreateForm.data.requestsToAdd[i].proteinId;
                    temp.ENUM_transfectionTag = $scope.m.BulkCreateForm.data.requestsToAdd[i].transfectionTag;
                    temp.ENUM_transfectionPurificationMethod = $scope.m.BulkCreateForm.data.requestsToAdd[i].transfectionPurificationMethod;
                    temp.requesterNotes = $scope.m.BulkCreateForm.data.requestsToAdd[i].requesterNotes;
                    temp.bufferExchange = $scope.m.BulkCreateForm.data.requestsToAdd[i].bufferExchange ? $scope.m.BulkCreateForm.data.requestsToAdd[i].bufferExchange : "No";
                    temp.ENUM_transfectionScale = $scope.m.BulkCreateForm.data.requestsToAdd[i].transfectionScale;
                    newEntries.push(temp);
                }
                for (i = 0; i < $scope.m.BulkCreateForm.data.requestsToAddNoPur.length; i++) {
                    const temp = TREntry();
                    temp.purifyOrNot = "No", temp.proteinId = $scope.m.BulkCreateForm.data.requestsToAddNoPur[i].proteinId;
                    temp.requestedDate = $scope.m.BulkCreateForm.data.requestsToAddNoPur[i].requestedDate.dt;
                    temp.requestedHarvestDate = $scope.m.BulkCreateForm.data.requestsToAddNoPur[i].requestedHarvestDate.dt;
                    temp.requesterNotes = $scope.m.BulkCreateForm.data.requestsToAddNoPur[i].requesterNotes;
                    temp.ENUM_transfectionScale = $scope.m.BulkCreateForm.data.requestsToAddNoPur[i].transfectionScale;
                    temp.bufferExchange = "No";
                    newEntries.push(temp);
                }
                const toCreate = {
                    tableName: "transfectionRequest",
                    list: newEntries
                };

                SiHttpUtil.CreateTableEntries(toCreate).then(function (resp) {
                    if (resp.status == 200) {
                        $scope.m.BulkCreateForm.ResetTab();
                        $scope.m.activeTab = "ViewAllTab";
                        $scope.m.RefreshData();
                    }
                });
            }
        };
        $scope.m.BulkEditForm = {
            data: {
                currTRs: []
            },
            ui: {},
            submitted: false,
            ResetTab: function () {
                SiHttpUtil.ResetForm($scope.m.BulkEditForm);
                $scope.m.activeTab = "ViewAllTab";
                $scope.m.BulkEditForm.data = {
                    currTRs: []
                };
            },
            updateCurrTRs: function () {
                $scope.m.BulkEditForm.data.currTRs = [];
                var query = { requestStatus: $scope.m.BulkEditForm.data.requestStatus, bulkEdit: true };
                SiHttpUtil.SearchByColumn('transfectionRequest', query).then(function (resp) {
                    $scope.m.BulkEditForm.data.currTRs = resp.records;
                });
            },
            ResetData: function () {
                $scope.m.BulkEditForm.data = {
                    currTRs: []
                };
            },
            removeEntry: function (i) {
                $scope.m.BulkEditForm.data.currTRs.splice(i, 1);
            },
            SubmitTab: function () {
                $scope.m.BulkEditForm.submitted = true;
                if (!$scope.m.BulkEditForm.ui.validate.$valid) {
                    console.error($scope.m.BulkEditForm.ui.validate);
                    return;
                }
                var updateEntries = [];
                for (var i = 0; i < $scope.m.BulkEditForm.data.currTRs.length; i++) {
                    var currEntry = {
                        id: $scope.m.BulkEditForm.data.currTRs[i].id,
                        dnaReady: $scope.m.BulkEditForm.data.currTRs[i].dnaReady,
                        notes: $scope.m.BulkEditForm.data.currTRs[i].notes,
                        updatedAt: $scope.m.BulkEditForm.data.currTRs[i].updatedAt
                    };
                    if ($scope.m.BulkEditForm.data.currTRs[i].approved) {
                        currEntry.requestStatus = "Approved";
                        currEntry.approvedBy = SiHttpUtil.GetUserId();
                    };
                    updateEntries.push(currEntry);
                }
                var toUpdate = {
                    tableName: "transfectionRequest",
                    list: updateEntries
                };
                SiHttpUtil.UpdateDataEntries(toUpdate).then(function (resp) {
                    if (resp.status == 200) {
                        $scope.m.BulkEditForm.ResetTab();
                        $scope.m.RefreshData();
                    }
                });
            }
        };

        $scope.m.ValidateBulkCreateInput = (FieldName, Type) => SiHttpUtil.ValidateInput($scope.m.BulkCreateForm.ui.validate, $scope.m.BulkCreateForm.submitted, FieldName, Type);
        $scope.m.ValidateCreateInput = (FieldName, Type) => SiHttpUtil.ValidateInput($scope.m.CreateForm.ui.validate, $scope.m.CreateForm.submitted, FieldName, Type);
        $scope.m.ValidateEditInput = (FieldName, Type) => SiHttpUtil.ValidateInput($scope.m.editForm.ui.validate, $scope.m.editForm.submitted, FieldName, Type);

        $scope.m.plasmidListToAdd = [];
        $scope.m.plasmidTrqPairs = [];
        $scope.m.plasmidProteinPairs = [];

        $scope.addPlasmid = function (plasmidId) {
            if ($scope.m.plasmidListToAdd.indexOf(plasmidId) > -1) {
                SiHttpUtil.NotifyOperationErr("Plasmid " + plasmidId + " Already added. Cannot be added again.");
            } else {
                $scope.m.plasmidListToAdd.push(plasmidId);
            }
        };
        $scope.removePlasmid = function (index) {
            $scope.m.plasmidListToAdd.splice(index, 1);
        };

        $scope.createTransfectionSelected = function () {
            SiHttpUtil.FetchIdNameMapping('plasmids').then(function (resp) {
                $scope.m.PlasmidList = resp;
                $scope.m.PlasmidDisplayData = SiHttpUtil.GetDependencyDisplayItemList($scope.m.PlasmidList);
                $scope.m.PlasmidListReady = true;
            });
            SiHttpUtil.FetchIdNameMapping('project').then(function (resp) {
                $scope.m.ProjectList = resp;
                $scope.m.ProjectDisplayData = SiHttpUtil.GetDependencyDisplayItemList($scope.m.ProjectList);
                $scope.m.ProjectListReady = true;
            });
            $scope.m.CreateForm.data.plasmidsReady = [];
            SiHttpUtil.FetchEnumList(['proteins']).then(function (resp) {
                if (resp) {
                    $scope.molecuTypes = resp.ENUM_moleculeType;
                }
            }, function (err) {
                console.log(err);
            });
        };

        $scope.m.DtInstCallback = function (inst) {
            $scope.m.DtInst = inst;
        };
        SiHttpUtil.InitRowClick($scope);

        $scope.m.RefreshData = () => {
            if ($scope.m.DtInstCallback) {
                if ($scope.m.DtInst) {
                    $scope.m.DtInst.changeData($scope.m.refreshTransfectionRequests());
                } else {
                    $scope.m.refreshTransfectionRequests();
                }
            }
        };

        $scope.m.refreshTransfectionRequests = function () {
            return SiHttpUtil.SearchByColumn('transfectionRequest', $scope.m.query).then(function (resp) {
                return new Promise(function (resolve, reject) {
                    $scope.m.tableData = resp.records;
                    if (resp.enums) {
                        var enums = JSON.parse(resp.enums);
                        $scope.transfectionTags = enums.ENUM_transfectionTag;
                        $scope.transfectionScales = enums.ENUM_transfectionScale;
                        $scope.transfectionTypes = enums.ENUM_transfectionType;
                        $scope.transfectionCellLines = enums.ENUM_transfectionCellLine;
                        $scope.transfectionPurificationMethods = enums.ENUM_transfectionPurificationMethod;
                    }

                    if ($scope.m.tableData && $scope.m.tableData.length > 0) {
                        if ($scope.m.dtColumns.length == 0) {
                            SiHttpUtil.initDtColumns($scope.m.dtColumns, $scope.m.tableData, colName => SiHttpUtil.omitColumnForTable('transfectionRequest', colName), colName => SiHttpUtil.dbColumnTranslator('transfectionRequest', colName));
                        }
                        $scope.m.dtColDefs = [DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'proteinId')).renderWith(SiUtil.ColDisplayers.GetHashConvertDisplayer($scope.m.ProteinDisplayData.Hash)).withOption('type', 'natural'), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'requesterId')).renderWith(SiUtil.ColDisplayers.GetHashConvertDisplayer($scope.UserHash)), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'updatedAt')).renderWith(SiUtil.ColDisplayers.ShortDateDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'requestStatus')).renderWith(SiUtil.ColDisplayers.StatusDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'requesterNotes')).renderWith(SiUtil.ColDisplayers.DescriptionDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'notes')).renderWith(SiUtil.ColDisplayers.DescriptionDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'createdBy')).renderWith(SiUtil.ColDisplayers.GetHashConvertDisplayer($scope.UserHash))];
                        $scope.m.dtOptions = SiHttpUtil.initDtOptions($scope.m.dtColumns, $scope.m.tableData, $scope.m.rowCallback, function () {
                            resolve($scope.m.tableData);
                            $scope.m.transfectionsReady = true;
                        });
                    } else {
                        resolve($scope.m.tableData);
                    }
                }, function (error) {
                    console.log("transfections get error:", error);
                });
            });
        };

        $scope.m.resetCreateOption = function () {
            $scope.m.CreateForm.data = {};
        };

        $scope.submitProteinCreateForm = function () {
            if ($scope.m.plasmidListToAdd.length < 1) {
                SiHttpUtil.NotifyOperationErr("At least one plasmid needs to be added when creating protein.");
            } else if ($scope.m.CreateForm.data.ProjectId == undefined) {
                SiHttpUtil.NotifyOperationErr("project cannot be empty when creating protein.");
            } else if ($scope.m.CreateForm.data.ProjectId == undefined) {
                SiHttpUtil.NotifyOperationErr("project cannot be empty when creating protein.");
            } else if ($scope.m.CreateForm.data.ProteinMoleculeType == undefined) {
                SiHttpUtil.NotifyOperationErr("protein molecule type cannot be empty when creating protein.");
            } else if ($scope.m.CreateForm.data.Description == undefined) {
                SiHttpUtil.NotifyOperationErr("protein description cannot be empty when creating protein.");
            } else {
                var ProteinEntry = {
                    tableName: "protein",
                    projectId: $scope.m.CreateForm.data.ProjectId,
                    plasmidList: $scope.m.plasmidListToAdd.join(';'),
                    description: $scope.m.CreateForm.data.Description,
                    ENUM_moleculeType: $scope.m.CreateForm.data.ProteinMoleculeType
                };

                SiHttpUtil.CreateTableEntry(ProteinEntry).then(function (resp) {
                    // console.log("created", resp);
                    //SiHttpUtil.NotifyOk("Protein " + resp.data.name + " is created successfully");
                    if (resp.status == 200) {
                        $scope.m.CreateForm.data.proteinName = resp.data.name;
                        $scope.m.CreateForm.data.proteinId = resp.data.id;
                        $scope.m.plasmidListToAdd = [];
                    }
                });
            }
        };

        $scope.updateTRStatus = function (status) {
            SiHttpUtil.UpdateDataEntry({
                id: $scope.m.editForm.id,
                tableName: "transfectionRequest",
                requestStatus: status,
                updatedAt: $scope.m.editForm.updatedAt
            }).then(function (response) {
                $scope.m.RefreshData();
                $scope.m.activeTab = "ViewAllTab";
                $scope.m.editForm.show = false;
                $scope.m.resetSelection();
            }, function (error) {
                console.error("updateEntry error:", error);
            });
        };
        $scope.m.approveReq = function () {
            SiHttpUtil.UpdateDataEntry({
                id: $scope.m.currentRowData.id,
                tableName: "transfectionRequest",
                requestStatus: "Approved",
                approvedBy: SiHttpUtil.GetUserId(),
                updatedAt: $scope.m.currentRowData.updatedAt
            }).then(function (response) {
                $scope.m.RefreshData();
                $scope.m.resetSelection();
            }, function (error) {
                console.error("updateEntry error:", error);
            });
        };
        $scope.m.dnaReady = function () {
            SiHttpUtil.UpdateDataEntry({
                id: $scope.m.currentRowData.id,
                tableName: "transfectionRequest",
                dnaReady: "Yes",
                updatedAt: $scope.m.currentRowData.updatedAt
            }).then(function (response) {
                $scope.m.RefreshData();
                $scope.m.resetSelection();
            }, function (error) {
                console.error("updateEntry error:", error);
            });
        };

        $scope.m.editDetail = function () {
            if ($scope.m.currentRowData) {
                $scope.m.editForm.show = true;
                $scope.m.activeTab = "EditTab";
                $scope.m.editForm.id = $scope.m.currentRowData.id;
                $scope.m.editForm.name = $scope.m.currentRowData.name;
                $scope.m.editForm.proteinId = $scope.m.currentRowData.proteinId;
                $scope.m.editForm.transfectionRequestTags = $scope.m.currentRowData.ENUM_transfectionTag;
                $scope.m.editForm.transfectionScale = $scope.m.currentRowData.ENUM_transfectionScale;
                $scope.m.editForm.transfectionType = $scope.m.currentRowData.ENUM_transfectionType;
                $scope.m.editForm.transfectionCellLine = $scope.m.currentRowData.ENUM_transfectionCellLine;
                $scope.m.editForm.transfectionPurifyOrNot = $scope.m.currentRowData.purifyOrNot;
                $scope.m.editForm.transfectionPurificationMethod = $scope.m.currentRowData.ENUM_transfectionPurificationMethod;
                $scope.m.editForm.transfectionBufferExchange = $scope.m.currentRowData.bufferExchange;
                $scope.m.editForm.data.requestedDate.dt = $scope.m.currentRowData.requestedDate ? new Date($scope.m.currentRowData.requestedDate) : null;
                $scope.m.editForm.data.requestedHarvestDate.dt = $scope.m.currentRowData.requestedHarvestDate ? new Date($scope.m.currentRowData.requestedHarvestDate) : null;
                $scope.m.editForm.requesterNotes = $scope.m.currentRowData.requesterNotes;
                $scope.m.editForm.notes = $scope.m.currentRowData.notes;
                $scope.m.editForm.requestStatus = $scope.m.currentRowData.requestStatus;
                $scope.m.editForm.requesterId = $scope.m.currentRowData.requesterId;
                $scope.m.editForm.updatedAt = $scope.m.currentRowData.updatedAt;
            }
        };
        $scope.m.viewDetail = function () {
            if ($scope.m.currentRowData) {
                $scope.m.viewForm.show = true;
                $scope.m.activeTab = "DetailTab";
                SiHttpUtil.FetchOneEntry('transfectionRequest', $scope.m.currentRowData.id).then(resp => {
                    $scope.m.viewForm.data = resp;
                    $scope.m.viewForm.data.createdAt = SiUtil.getDateOnly(resp.createdAt);
                    $scope.m.viewForm.data.updatedAt = SiUtil.getDateOnly(resp.updatedAt);
                    $scope.m.viewForm.data.requestedDate = SiUtil.getDateOnly(resp.requestedDate);
                    $scope.m.viewForm.data.requestedHarvestDate = SiUtil.getDateOnly(resp.requestedHarvestDate);
                });
            }
        };
        $scope.m.deleteTransfectionRequest = () => {
            if ($scope.m.currentRowData) {
                if ($scope.m.editForm.requesterId != SiHttpUtil.GetUserId()) {
                    SiHttpUtil.NotifyOperationErr("Cannot delete someone else's transfection request");
                    return;
                }
                SiHttpUtil.DeleteDataEntry("transfectionRequest", $scope.m.editForm.id).then(function (resp) {
                    $scope.m.activeTab = "ViewAllTab";
                    $scope.m.editForm.show = false;
                    $scope.m.RefreshData();
                }, function (err) {
                    console.log("delete entry error:", err);
                });
            }
        };
        $scope.m.newTransfectionFromRequest = function () {
            if ($scope.m.currentRowData) {
                $state.go("app.research.transfections", { op: "create", id: $scope.m.currentRowData.id });
            }
        };
        $scope.m.duplicateTransfectionReq = function () {
            if ($scope.m.currentRowData) {
                $scope.m.CreateForm.data.createOption = 2;
                $scope.m.CreateForm.data.proteinId = $scope.m.currentRowData.proteinId;
                $scope.m.CreateForm.data.transfectionTag = $scope.m.currentRowData.ENUM_transfectionTag;
                $scope.m.CreateForm.data.transfectionScale = $scope.m.currentRowData.ENUM_transfectionScale;
                $scope.m.CreateForm.data.transfectionType = $scope.m.currentRowData.ENUM_transfectionType;
                $scope.m.CreateForm.data.transfectionCellLine = $scope.m.currentRowData.ENUM_transfectionCellLine;
                $scope.m.CreateForm.data.transfectionPurifyOrNot = $scope.m.currentRowData.purifyOrNot;
                $scope.m.CreateForm.data.transfectionMolecularWeight = $scope.m.currentRowData.molecularWeight;
                $scope.m.CreateForm.data.transfectionMolarExtCoefficient = $scope.m.currentRowData.molarExtCoefficient;
                $scope.m.CreateForm.data.transfectionPl = $scope.m.currentRowData.pl;
                $scope.m.CreateForm.data.transfectionPurificationMethod = $scope.m.currentRowData.ENUM_transfectionPurificationMethod;
                $scope.m.CreateForm.data.transfectionBufferExchange = $scope.m.currentRowData.bufferExchange;
                $scope.m.CreateForm.data.requesterNotes = $scope.m.currentRowData.requesterNotes;
                $scope.m.activeTab = "CreateTab";
            }
        };

        $scope.m.loadAll = function () {
            $scope.m.dp = SiUtil.dp.bind($scope.m)();
            $scope.m.dp.initDp('CreateForm', 'requestedDate', false);
            $scope.m.dp.initDp('CreateForm', 'requestedHarvestDate', false);
            $scope.m.dp.initDp('editForm', 'requestedDate', false);
            $scope.m.dp.initDp('editForm', 'requestedHarvestDate', false);
            var CacheProtein = SiHttpUtil.FetchIdNameMapping('protein').then(function (resp) {
                $scope.m.ProteinList = resp;
                $scope.m.ProteinDisplayData = SiHttpUtil.GetDependencyDisplayItemList($scope.m.ProteinList);
                $scope.m.ProteinListReady = true;
            });
            var deps = [];
            deps.push(CacheProtein);
            $scope.m.getQuery();
            Promise.all(deps).then(values => {
                $scope.m.refreshTransfectionRequests();
                if ($scope.op === "view" && $scope.opId) {
                    $scope.m.currentRowData = {
                        id: $scope.opId
                    };
                    $scope.m.viewDetail();
                }
                if ($scope.op == "create") {
                    $scope.m.activeTab = "CreateTab";
                }
            });
        };
        $scope.m.loadAll();
    }
})();

(function () {
    'use strict';

    angular.module('app.research').controller('TransfectionsController', TransfectionsController);

    TransfectionsController.$inject = ['$scope', 'SiHttpUtil', 'DTOptionsBuilder', 'DTColumnBuilder', 'DTColumnDefBuilder', 'SiUtil', '$stateParams', '$state'];

    function TransfectionsController($scope, SiHttpUtil, DTOptionsBuilder, DTColumnBuilder, DTColumnDefBuilder, SiUtil, $stateParams, $state) {
        // Main model.
        $scope.m = {};
        $scope.tableState.currentResearchTable = "transfections";
        $scope.m.tableName = "transfection";
        $scope.m.activeTab = "ViewAllTab";
        $scope.m.tableData = null;
        $scope.m.plasmidProteinPairs = [];
        $scope.m.TRList = [];
        $scope.m.TRListReady = false;
        $scope.m.TRDisplayData = {};
        $scope.m.PlasmidList = [];
        $scope.m.PlasmidListReady = false;
        $scope.m.PlasmidDisplayData = {};
        $scope.m.EnumList = [];
        $scope.m.EnumListReady = false;
        $scope.molecuTypes = [];
        $scope.m.plasmidListToAdd = [];
        $scope.op = $stateParams.op;
        $scope.id = $stateParams.id;

        $scope.m.trListToAdd = [];
        $scope.m.addTR = function (trId) {
            if (!trId) {
                SiHttpUtil.NotifyOperationErr("Please choose a transfection request");
            } else if ($scope.m.trListToAdd.indexOf(trId) > -1) {
                SiHttpUtil.NotifyOperationErr("Transfection Request " + trId + " Already added. Cannot be added again.");
            } else {
                $scope.m.trListToAdd.push(trId);
                $scope.m.CreateForm.data.transfectionDate.dt = $scope.m.TRDisplayData.ListHash[trId].requestedDate ? new Date($scope.m.TRDisplayData.ListHash[trId].requestedDate) : new Date();
                $scope.m.CreateForm.data.harvestDate.dt = $scope.m.TRDisplayData.ListHash[trId].requestedHarvestDate ? new Date($scope.m.TRDisplayData.ListHash[trId].requestedHarvestDate) : null;
            }
        };
        $scope.m.removeTR = function (index) {
            $scope.m.trListToAdd.splice(index, 1);
            $scope.m.CreateForm.data.transfectionDate.dt = new Date();
            $scope.m.CreateForm.data.harvestDate.dt = null;
        };

        $scope.m.statusFilter = {
            includeProgress: false,
            includePurification: false,
            includeComplete: false,
            includeFailed: false
        };

        $scope.m.onStatusChange = function () {
            var table = $('#example').DataTable();
            var val = [];
            if ($scope.m.statusFilter.includeProgress) {
                val.push('Progress');
            }
            if ($scope.m.statusFilter.includePurification) {
                val.push('Purification');
            }
            if ($scope.m.statusFilter.includeComplete) {
                val.push('Completed');
            }
            if ($scope.m.statusFilter.includeFailed) {
                val.push('Failed');
            }
            table.columns(3) // Changed because of reorder function
            .search(val.join('|'), true, false).draw();
        };

        $scope.m.viewForm = {
            data: {},
            show: false,
            submitted: false,
            CancelTab: () => SiHttpUtil.HideTab($scope.m, $scope.m.viewForm)
        };
        $scope.m.editForm = {
            data: {},
            show: false,
            submitted: false,
            ui: {},
            CancelTab: () => SiHttpUtil.HideTab($scope.m, $scope.m.editForm),
            SubmitTab: function () {
                $scope.m.editForm.submitted = true;
                if (!$scope.m.editForm.ui.validate.$valid) {
                    console.error($scope.m.editForm.ui.validate);
                    return;
                }
                SiHttpUtil.UpdateDataEntry({
                    tableName: "transfection",
                    id: $scope.m.editForm.id,
                    transfectionDate: $scope.m.editForm.data.transfectionDate.dt,
                    harvestDate: $scope.m.editForm.data.harvestDate.dt,
                    octetTiter: $scope.m.editForm.octetTiter,
                    transfectionNotes: $scope.m.editForm.transfectionNotes,
                    approved: $scope.m.editForm.approved ? $scope.m.editForm.approved : "No",
                    updatedAt: $scope.m.editForm.updatedAt
                }).then(resp => {
                    if ($scope.m.editForm.data.harvestDate.dt != null && $scope.m.editForm.approved == "Yes" && $scope.m.editForm.requestStatus == "In Progress") {
                        SiHttpUtil.UpdateDataEntry({
                            id: $scope.m.editForm.trqId,
                            tableName: "transfectionRequest",
                            requestStatus: "In Purification",
                            updatedAt: $scope.m.TRDisplayData.ListHash[$scope.m.editForm.trqId].updatedAt
                        }).then(function (response) {
                            if (resp.status == 200) {
                                SiHttpUtil.CreateTableEntry({
                                    transfectionId: $scope.m.editForm.id,
                                    ColumnPurificationData: [],
                                    SECData: [],
                                    tableName: "proteinPurification"
                                }).then(function (response) {
                                    $scope.m.editForm.CancelTab();
                                    $scope.m.loadAll();
                                    $scope.m.resetSelection();
                                    $scope.m.RefreshData();
                                }, function (error) {
                                    console.error("updateEntry error:", error);
                                });
                            }
                        }, function (error) {
                            console.error("updateEntry error:", error);
                        });
                    } else {
                        $scope.m.editForm.CancelTab();
                        $scope.m.loadAll();
                        $scope.m.resetSelection();
                        $scope.m.RefreshData();
                    }
                });
            },
            DeleteTransfection: () => {
                if ($scope.m.currentRowData) {
                    if ($scope.m.editForm.createdBy != SiHttpUtil.GetUserId()) {
                        SiHttpUtil.NotifyOperationErr("Cannot delete someone else's transfection");
                        return;
                    }
                    if (!$scope.m.editForm.transfectionNotes || $scope.m.editForm.transfectionNotes == "") {
                        SiHttpUtil.NotifyOperationErr("Please add removal reason in the notes section");
                        return;
                    }
                    SiHttpUtil.DeleteDataEntry("transfection", $scope.m.editForm.id).then(function (resp) {
                        SiHttpUtil.DeleteDataEntry("transfectionRequest", $scope.m.editForm.trqId).then(function (resp) {
                            $scope.m.activeTab = "ViewAllTab";
                            $scope.m.editForm.show = false;
                            $scope.m.RefreshData();
                        }, function (err) {
                            console.log("delete tr error:", err);
                        });
                    }, function (err) {
                        console.log("delete transfection error:", err);
                    });
                }
            },
            UpdateTrStatus: function (status) {
                SiHttpUtil.UpdateDataEntry({
                    id: $scope.m.editForm.trqId,
                    tableName: "transfectionRequest",
                    requestStatus: status,
                    updatedAt: $scope.m.TRDisplayData.ListHash[$scope.m.editForm.trqId].updatedAt
                }).then(function (response) {
                    $scope.m.loadAll();
                    $scope.m.editForm.requestStatus = status;
                }, function (error) {
                    console.error("updateEntry error:", error);
                });
            }
        };
        $scope.m.CreateForm = {
            data: {
                pendingRequests: {}
            },
            ui: {},
            submitted: false,
            ResetTab: function () {
                SiHttpUtil.ResetForm($scope.m.CreateForm);
                $scope.m.trListToAdd = [];
                $scope.m.dp.initDp('CreateForm', 'transfectionDate', true);
                $scope.m.dp.initDp('CreateForm', 'harvestDate', false);
                $scope.m.CreateForm.data.pendingRequests = {};
                $scope.m.activeTab = "ViewAllTab";
            },
            initTab: function () {
                for (var tr in $scope.m.TRDisplayData.Hash) {
                    if ($scope.m.TRDisplayData.ListHash[tr].requestStatus == 'Approved') {
                        $scope.m.CreateForm.data.pendingRequests[tr] = $scope.m.TRDisplayData.Hash[tr] + ' - ' + $scope.m.TRDisplayData.ListHash[tr].protein;
                    }
                }
            },
            SubmitTab: function () {
                $scope.m.CreateForm.submitted = true;
                if (!$scope.m.CreateForm.ui.validate.$valid) {
                    console.error($scope.m.CreateForm.ui.validate);
                    return;
                }
                function TransfectionEntry() {
                    return {
                        //tableName: "transfection",
                        //trqId: $scope.m.CreateForm.data.trqId,
                        transfectionDate: $scope.m.CreateForm.data.transfectionDate.dt,
                        harvestDate: $scope.m.CreateForm.data.harvestDate.dt,
                        transfectionNotes: $scope.m.CreateForm.data.transfectionNotes
                    };
                };
                var newEntries = [];
                for (var i = 0; i < $scope.m.trListToAdd.length; i++) {
                    var temp = TransfectionEntry();
                    temp.trqId = $scope.m.trListToAdd[i];
                    newEntries.push(temp);
                }
                var toCreate = {
                    tableName: "transfection",
                    list: newEntries
                };

                SiHttpUtil.CreateTableEntries(toCreate).then(function (resp) {
                    if (resp.status == 200) {
                        $scope.m.CreateForm.ResetTab();
                        $scope.m.RefreshData();
                        $scope.m.loadAll();
                    }
                });
            }
        };

        $scope.m.ValidateCreateInput = (FieldName, Type) => SiHttpUtil.ValidateInput($scope.m.CreateForm.ui.validate, $scope.m.CreateForm.submitted, FieldName, Type);
        $scope.m.ValidateEditInput = (FieldName, Type) => SiHttpUtil.ValidateInput($scope.m.editForm.ui.validate, $scope.m.editForm.submitted, FieldName, Type);

        $scope.m.dp = SiUtil.dp.bind($scope.m)();
        $scope.m.dp.initDp('CreateForm', 'transfectionDate', true);
        $scope.m.dp.initDp('CreateForm', 'harvestDate', false);
        $scope.m.dp.initDp('editForm', 'harvestDate', true);

        $scope.m.DtInstCallback = function (inst) {
            console.log("dt:", inst);
            $scope.m.DtInst = inst;
        };

        $scope.m.RefreshData = () => {
            if ($scope.m.DtInstCallback) {
                // NOTE(ww): DtInst could undefined when creating first data entry.
                if ($scope.m.DtInst) {
                    $scope.m.DtInst.changeData($scope.m.LoadTransfectionList());
                } else {
                    $scope.m.LoadTransfectionList().then(function () {
                        $scope.m.dataReady = true;
                        $scope.$digest();
                    });
                }
            }
        };

        SiHttpUtil.InitRowClick($scope);

        $scope.m.dtColumns = [];

        $scope.m.LoadTransfectionList = function () {
            return SiHttpUtil.FetchTableEntries('transfection').then(function (resp) {
                return new Promise(function (resolve, reject) {
                    $scope.m.tableData = resp.records;

                    if ($scope.m.tableData && $scope.m.tableData.length > 0) {

                        if ($scope.m.dtColumns.length == 0) {
                            SiHttpUtil.initDtColumns($scope.m.dtColumns, $scope.m.tableData, colName => SiHttpUtil.omitColumnForTable('transfection', colName), colName => SiHttpUtil.dbColumnTranslator('transfection', colName), colName => SiHttpUtil.hideColumnForTable('transfection', colName), SiHttpUtil.tableOrder('transfection'));
                        }

                        $scope.m.dtColDefs = [DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'trqId')).renderWith(SiUtil.ColDisplayers.GetHashConvertDisplayer($scope.m.TRDisplayData.Hash)).withOption('type', 'natural'), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'createdBy')).renderWith(SiUtil.ColDisplayers.GetHashConvertDisplayer($scope.UserHash)), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'transfectionNotes')).renderWith(SiUtil.ColDisplayers.DescriptionDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'TransfectionRequest.requestStatus')).renderWith(SiUtil.ColDisplayers.FixJoinDisplay('TransfectionRequest.requestStatus', SiUtil.getFormattedStatus)), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'TransfectionRequest.Protein.name')).renderWith(SiUtil.ColDisplayers.FixJoinDisplay('TransfectionRequest.Protein.name')), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'TransfectionRequest.Protein.ENUM_moleculeType')).renderWith(SiUtil.ColDisplayers.FixJoinDisplay('TransfectionRequest.Protein.ENUM_moleculeType')), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'updatedAt')).renderWith( //CreatedAt.
                        SiUtil.ColDisplayers.ShortDateDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'transfectionDate')).renderWith( //CreatedAt.
                        SiUtil.ColDisplayers.ShortDateDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'harvestDate')).renderWith( //CreatedAt.
                        SiUtil.ColDisplayers.ShortDateDisplayer)];
                        $scope.m.dtOptions = SiHttpUtil.initDtOptions($scope.m.dtColumns, $scope.m.tableData, $scope.m.rowCallback, function () {
                            resolve($scope.m.tableData);
                            $scope.m.dataReady = true;
                            if ($scope.op == "view" && $scope.id) {
                                var records = $scope.m.tableData;
                                for (var i = 0; i < records.length; i++) {
                                    if (records[i].id == $scope.id) {
                                        $scope.m.currentRowData = records[i];
                                        break;
                                    }
                                }
                                $scope.m.viewDetail();
                            }
                            if ($scope.op == "create") {
                                var records = $scope.m.tableData;
                                if ($scope.id) $scope.m.addTR($scope.id);
                                $scope.m.activeTab = "CreateTab";
                            }
                        });
                    }
                });
            });
        };

        // Copy model to views.
        $scope.m.viewDetail = function () {
            if ($scope.m.currentRowData) {
                $scope.m.viewForm.name = $scope.m.currentRowData.name;
                $scope.m.viewForm.description = $scope.m.currentRowData.approved;
                $scope.m.viewForm.trqId = $scope.m.currentRowData.trqId;
                $scope.m.viewForm.proteinId = $scope.m.currentRowData['TransfectionRequest.Protein.id'];
                $scope.m.viewForm.protein = $scope.m.currentRowData['TransfectionRequest.Protein.name'];
                $scope.m.viewForm.proteinMoleculeType = $scope.m.currentRowData['TransfectionRequest.Protein.ENUM_moleculeType'];
                $scope.m.viewForm.requestStatus = $scope.m.currentRowData['TransfectionRequest.requestStatus'];
                $scope.m.viewForm.createdBy = $scope.UserHash[$scope.m.currentRowData.createdBy];
                $scope.m.viewForm.updatedBy = $scope.UserHash[$scope.m.currentRowData.updatedBy];
                $scope.m.viewForm.createdAt = SiUtil.getDateOnly($scope.m.currentRowData.createdAt);
                $scope.m.viewForm.transfectionDate = SiUtil.getDateOnly($scope.m.currentRowData.transfectionDate);
                $scope.m.viewForm.updatedAt = SiUtil.getDateOnly($scope.m.currentRowData.updatedAt);
                $scope.m.viewForm.harvestDate = SiUtil.getDateOnly($scope.m.currentRowData.harvestDate);
                $scope.m.viewForm.transfectionNotes = $scope.m.currentRowData.transfectionNotes;
                $scope.m.viewForm.octetTiter = $scope.m.currentRowData.octetTiter;
                $scope.m.viewForm.approved = $scope.m.currentRowData.approved;
                $scope.m.viewForm.show = true;
                $scope.m.activeTab = "DetailTab";
            }
        };

        $scope.m.editDetail = function () {
            if ($scope.m.currentRowData) {
                $scope.m.activeTab = "EditTab";
                $scope.m.editForm.id = $scope.m.currentRowData.id;
                $scope.m.editForm.name = $scope.m.currentRowData.name;
                $scope.m.editForm.trqId = $scope.m.currentRowData.trqId;
                $scope.m.editForm.requestStatus = $scope.m.currentRowData['TransfectionRequest.requestStatus'];
                $scope.m.editForm.data.transfectionDate = {
                    dt: $scope.m.currentRowData.transfectionDate ? new Date($scope.m.currentRowData.transfectionDate) : null
                };
                $scope.m.editForm.data.harvestDate.dt = $scope.m.currentRowData.harvestDate == null ? null : new Date($scope.m.currentRowData.harvestDate);
                $scope.m.editForm.octetTiter = $scope.m.currentRowData.octetTiter;
                $scope.m.editForm.approved = $scope.m.currentRowData.approved;
                $scope.m.editForm.transfectionNotes = $scope.m.currentRowData.transfectionNotes;
                $scope.m.editForm.createdBy = $scope.m.currentRowData.createdBy;
                $scope.m.editForm.updatedAt = $scope.m.currentRowData.updatedAt;
                $scope.m.editForm.show = true;
            }
        };

        $scope.m.loadAll = function () {
            var CacheTR = SiHttpUtil.FetchIdNameMapping('transfectionRequest').then(function (resp) {
                $scope.m.TRList = resp;
                $scope.m.TRDisplayData = SiHttpUtil.GetDependencyList($scope.m.TRList);
                $scope.m.TRListReady = true;
            });

            var deps = []; // Dependencies.
            deps.push(CacheTR);
            Promise.all(deps).then(values => {
                $scope.m.LoadTransfectionList();
            });
        };

        $scope.m.loadAll();

        $scope.m.newEntry = function () {
            if ($scope.m.currentRowData) {
                var transNum = $scope.m.currentRowData.id;
                $state.go("app.research.proteinPurification", { op: "create", id: transNum });
            }
        };
    }
})();

//Research
//ProteinPurificationController
(function () {
    'use strict';

    angular.module('app.research').controller('ProteinPurificationController', ProteinPurificationController);

    ProteinPurificationController.$inject = ['$scope', 'SiHttpUtil', 'DTOptionsBuilder', 'DTColumnBuilder', 'DTColumnDefBuilder', 'SiUtil', '$stateParams'];

    function ProteinPurificationController($scope, SiHttpUtil, DTOptionsBuilder, DTColumnBuilder, DTColumnDefBuilder, SiUtil, $stateParams) {
        // Main model.
        $scope.m = {};
        $scope.tableState.currentResearchTable = "proteinPurification";
        $scope.m.tableName = "proteinPurification";
        $scope.m.activeTab = "ViewAllTab";
        $scope.m.tableData = null;
        $scope.op = $stateParams.op;
        $scope.id = $stateParams.id;
        $scope.getDateOnly = SiUtil.getDateOnly;

        $scope.m.TransfectionList = [];
        $scope.m.TransfectionListReady = false;
        $scope.m.TransfectionDisplayData = {};

        $scope.molecuTypes = [];
        $scope.m.plasmidListToAdd = [];

        $scope.updateTransfectionRequest = function (id, status) {
            SiHttpUtil.UpdateDataEntry({
                id: id,
                tableName: "transfectionRequest",
                requestStatus: status,
                updatedAt: $scope.m.editForm.trUpdatedAt
            }).then(function (response) {
                $scope.m.RefreshData();
                $scope.m.updateTRData(id);
            }, function (error) {
                console.error("updateEntry error:", error);
            });
        };
        $scope.m.updateTRData = function (id) {
            SiHttpUtil.FetchOneEntry('transfectionRequest', id).then(function (response) {
                $scope.m.editForm.requestStatus = response.data.requestStatus;
                $scope.m.editForm.trUpdatedAt = response.data.updatedAt;
            }, function (error) {
                console.error("updateEntry error:", error);
            });
        };

        $scope.m.summaryForm = {
            data: {},
            dataReady: false,
            initTab: () => {
                $scope.m.dp.initDp('summaryForm', 'startDate', true);
                $scope.m.dp.initDp('summaryForm', 'endDate', true);
                $scope.m.summaryForm.data.startDate.dt.setDate($scope.m.summaryForm.data.endDate.dt.getDate() - 7);
            },
            dtInstance: {},
            dtOptions: DTOptionsBuilder.newOptions().withDisplayLength(25).withButtons([{
                extend: 'colvis',
                text: 'Columns'
            }, {
                extend: 'excelHtml5',
                filename: 'export',
                text: 'Export Excel'
            }, {
                extend: 'print',
                title: "",
                text: 'Print',
                exportOptions: {
                    columns: ':visible'
                }
            }]),
            getData: () => {
                var query = {
                    'summary': true,
                    'startDate': $scope.m.summaryForm.data.startDate.dt,
                    'endDate': $scope.m.summaryForm.data.endDate.dt
                };
                SiHttpUtil.SearchByColumn('proteinPurification', query).then(resp => {
                    $scope.m.summaryForm.results = resp;
                    if (resp.length > 0) $scope.m.summaryForm.dataReady = true;
                });
            }
        };

        $scope.m.viewForm = {
            data: {},
            show: false,
            submitted: false,
            CancelTab: () => SiHttpUtil.HideTab($scope.m, $scope.m.viewForm)
        };
        $scope.m.editForm = {
            data: {},
            show: false,
            submitted: false,
            ui: {},
            CancelTab: () => SiHttpUtil.HideTab($scope.m, $scope.m.editForm),
            SubmitTab: () => {
                $scope.m.editForm.submitted = true;
                if (!$scope.m.editForm.ui.validate.$valid) {
                    console.error($scope.m.editForm.ui.validate);
                    return;
                }
                for (var i = 0; i < $scope.m.editForm.SECData.length; i++) {
                    var curr = $scope.m.editForm.SECData[i];
                    curr.date = curr.date.dt;
                }
                for (var i = 0; i < $scope.m.editForm.MALSData.length; i++) {
                    var curr = $scope.m.editForm.MALSData[i];
                    curr.date = curr.date.dt;
                }
                for (var i = 0; i < $scope.m.editForm.DLSData.length; i++) {
                    var curr = $scope.m.editForm.DLSData[i];
                    curr.date = curr.date.dt;
                }
                for (var i = 0; i < $scope.m.editForm.cIEFData.length; i++) {
                    var curr = $scope.m.editForm.cIEFData[i];
                    curr.date = curr.date.dt;
                }
                SiHttpUtil.UpdateDataEntry({
                    tableName: "proteinPurification",
                    id: $scope.m.editForm.id,
                    purificationDate: $scope.m.editForm.data.purificationDate.dt,
                    purifiedBy: $scope.m.editForm.purifiedBy,
                    finalConcentration: $scope.m.editForm.finalConcentration,
                    finalVolume: $scope.m.editForm.finalVolume,
                    volumeRemaining: $scope.m.editForm.volumeRemaining,
                    BEX: $scope.m.editForm.BEX || "N",
                    notes: $scope.m.editForm.notes,
                    ColumnPurificationData: $scope.m.editForm.ColumnPurificationData,
                    SECData: $scope.m.editForm.SECData,
                    MALSData: $scope.m.editForm.MALSData,
                    DLSData: $scope.m.editForm.DLSData,
                    cIEFData: $scope.m.editForm.cIEFData,
                    updatedAt: $scope.m.editForm.updatedAt
                }).then(resp => {
                    $scope.m.editForm.CancelTab();
                    $scope.m.RefreshData();
                    $scope.m.resetSelection();
                });
            }
        };

        $scope.m.CreateForm = {
            data: {
                ColumnPurificationData: [],
                SECData: []
            },
            ui: {},
            submitted: false,
            ResetTab: function () {
                SiHttpUtil.ResetForm($scope.m.CreateForm);
                $scope.m.activeTab = "ViewAllTab";
                $scope.m.CreateForm.data.ColumnPurificationData = [];
                $scope.m.CreateForm.data.SECData = [];
            },
            initTab: () => {
                $scope.m.initTransfections();
                $scope.m.CreateForm.data.purifiedBy = SiHttpUtil.GetUserId();
            },
            SubmitTab: function () {
                $scope.m.CreateForm.submitted = true;
                if (!$scope.m.CreateForm.ui.validate.$valid) {
                    console.error($scope.m.CreateForm.ui.validate);
                    return;
                }
                if (!$scope.m.CreateForm.data.ColumnPurificationData.length) {
                    SiHttpUtil.NotifyOperationErr("Must add at least one column entry");
                    return;
                }
                for (var i = 0; i < $scope.m.CreateForm.data.SECData.length; i++) {
                    var curr = $scope.m.CreateForm.data.SECData[i];
                    curr.date = curr.date.dt;
                }
                var ProteinPurificationEntry = {
                    tableName: "proteinPurification",
                    transfectionId: $scope.m.CreateForm.data.transfectionId,
                    purificationDate: $scope.m.CreateForm.data.purificationDate.dt,
                    purifiedBy: $scope.m.CreateForm.data.purifiedBy,
                    finalConcentration: $scope.m.CreateForm.data.finalConcentration,
                    finalVolume: $scope.m.CreateForm.data.finalVolume,
                    volumeRemaining: $scope.m.CreateForm.data.volumeRemaining,
                    BEX: $scope.m.CreateForm.data.BEX,
                    notes: $scope.m.CreateForm.data.notes,
                    ColumnPurificationData: $scope.m.CreateForm.data.ColumnPurificationData,
                    SECData: $scope.m.CreateForm.data.SECData
                };

                SiHttpUtil.CreateTableEntry(ProteinPurificationEntry).then(function (resp) {
                    //SiHttpUtil.NotifyOk("ProteinPurification " + resp.data.name + " is created successfully");
                    if (resp.status == 200) {
                        $scope.m.CreateForm.ResetTab();
                        $scope.m.RefreshData();
                    }
                });
            }
        };

        $scope.m.dpOpen = function ($event, form, i) {
            $event.preventDefault();
            $event.stopPropagation();
            form.SECData[i].date.opened = !form.SECData[i].date.opened;
        };

        $scope.m.initTransfections = () => {
            SiHttpUtil.FetchIdNameMapping('transfection').then(function (resp) {
                $scope.m.TransfectionList = resp;
                $scope.m.TransfectionDisplayData = SiHttpUtil.GetDependencyList($scope.m.TransfectionList);
                $scope.m.TransfectionListReady = true;
            });
        };

        $scope.m.addColumnData = form => {
            var entry = {};
            if (form.ColumnPurificationData.length == 0) {
                entry.notes = "First Step";
            }
            form.ColumnPurificationData.push(entry);
        };

        $scope.m.addData = (form, type) => {
            form[type].push({
                analyzedBy: SiHttpUtil.GetUserId(),
                date: {
                    dt: new Date(),
                    opened: false
                }
            });
        };

        $scope.m.removeData = (form, index, edit) => {
            if (edit) {
                form[index].isDeleted = true;
            } else {
                form.splice(index, 1);
            }
        };

        $scope.m.copyData = (form, element) => {
            var toCopy = form.ColumnPurificationData[0][element];
            for (var i = 0; i < form.ColumnPurificationData.length; i++) {
                form.ColumnPurificationData[i][element] = toCopy;
            }
        };

        $scope.m.ValidateCreateInput = (FieldName, Type) => SiHttpUtil.ValidateInput($scope.m.CreateForm.ui.validate, $scope.m.CreateForm.submitted, FieldName, Type);
        $scope.m.ValidateEditInput = (FieldName, Type) => SiHttpUtil.ValidateInput($scope.m.editForm.ui.validate, $scope.m.editForm.submitted, FieldName, Type);

        $scope.m.dp = SiUtil.dp.bind($scope.m)();

        $scope.m.DtInstCallback = function (inst) {
            console.log("dt:", inst);
            $scope.m.DtInst = inst;
            $scope.m.onStatusChange();
        };

        $scope.m.RefreshData = () => {
            if ($scope.m.DtInstCallback) {
                // NOTE(ww): DtInst could undefined when creating first data entry.
                if ($scope.m.DtInst) {
                    $scope.m.DtInst.changeData($scope.m.LoadProteinPurificationList());
                } else {
                    $scope.m.LoadProteinPurificationList().then(function () {
                        $scope.m.dataReady = true;
                        $scope.$digest();
                    });
                }
            }
        };

        SiHttpUtil.InitRowClick($scope);

        $scope.m.statusFilter = {
            includePurification: true,
            includeComplete: true,
            includeFailed: false
        };

        $scope.m.onStatusChange = function () {
            var table = $('#example').DataTable();
            var val = [];
            if ($scope.m.statusFilter.includePurification) {
                val.push('Purification');
            }
            if ($scope.m.statusFilter.includeComplete) {
                val.push('Completed');
            }
            if ($scope.m.statusFilter.includeFailed) {
                val.push('Failed');
            }
            table.columns(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'requestStatus')).search(val.join('|'), true, false).draw();
        };

        $scope.m.dtColumns = [];

        $scope.m.LoadProteinPurificationList = function () {
            return SiHttpUtil.FetchTableEntries('proteinPurification').then(function (resp) {
                // Support chaining to pass on to datatables..
                return new Promise(function (resolve, reject) {
                    $scope.m.tableData = resp.records;
                    if (resp.enums) {
                        var enumList = JSON.parse(resp.enums);
                        $scope.columnTypes = enumList.ENUM_proteinColumnType;
                        $scope.stepTypes = enumList.ENUM_proteinStepType;
                        $scope.SECTypes = enumList.ENUM_proteinSECTypes;
                    }
                    if ($scope.m.tableData && $scope.m.tableData.length > 0) {

                        if ($scope.m.dtColumns.length == 0) {
                            SiHttpUtil.initDtColumns($scope.m.dtColumns, $scope.m.tableData, colName => SiHttpUtil.omitColumnForTable('proteinPurification', colName), colName => SiHttpUtil.dbColumnTranslator('proteinPurification', colName), colName => SiHttpUtil.hideColumnForTable('proteinPurification', colName), SiHttpUtil.tableOrder('proteinPurification'));
                        }

                        $scope.m.dtColDefs = [DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'purifiedBy')).renderWith(SiUtil.ColDisplayers.GetHashConvertDisplayer($scope.UserHash)), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'notes')).renderWith(SiUtil.ColDisplayers.DescriptionDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'Transfection.octetTiter')).renderWith(SiUtil.ColDisplayers.FixJoinDisplay('Transfection.octetTiter')).notVisible(), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'Transfection.name')).renderWith(SiUtil.ColDisplayers.FixJoinDisplay('Transfection.name')), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'Transfection.TransfectionRequest.Protein.molecularWeight')).renderWith(SiUtil.ColDisplayers.FixJoinDisplay('Transfection.TransfectionRequest.Protein.molecularWeight')), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'Transfection.TransfectionRequest.requestStatus')).renderWith(SiUtil.ColDisplayers.FixJoinDisplay('Transfection.TransfectionRequest.requestStatus', SiUtil.getFormattedStatus)), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'Transfection.TransfectionRequest.Protein.name')).renderWith(SiUtil.ColDisplayers.FixJoinDisplay('Transfection.TransfectionRequest.Protein.name')), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'Transfection.TransfectionRequest.Protein.ENUM_moleculeType')).renderWith(SiUtil.ColDisplayers.FixJoinDisplay('Transfection.TransfectionRequest.Protein.ENUM_moleculeType')), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'updatedAt')).renderWith(SiUtil.ColDisplayers.ShortDateDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'purificationDate')).renderWith( //CreatedAt.
                        SiUtil.ColDisplayers.ShortDateDisplayer)];

                        $scope.m.dtOptions = SiHttpUtil.initDtOptions($scope.m.dtColumns, $scope.m.tableData, $scope.m.rowCallback, function () {
                            resolve($scope.m.tableData);

                            $scope.m.dataReady = true;
                            if ($scope.op == "view" && $scope.id) {
                                var records = $scope.m.tableData;
                                for (var i = 0; i < records.length; i++) {
                                    if (records[i].id == $scope.id) {
                                        $scope.m.currentRowData = records[i];
                                        break;
                                    }
                                }
                                $scope.m.viewDetail();
                            }
                            if ($scope.op == "create") {
                                var records = $scope.m.tableData;
                                if ($scope.id) $scope.m.CreateForm.data.transfectionId = $scope.id;
                                $scope.m.activeTab = "CreateTab";
                            }
                        });
                    }
                });
            });
        };

        // Copy model to views.
        $scope.m.viewDetail = function () {
            if ($scope.m.currentRowData) {
                SiHttpUtil.FetchOneEntry('proteinPurification', $scope.m.currentRowData.id).then(resp => {
                    $scope.m.viewForm.SECData = resp.SECData || [];
                    $scope.m.viewForm.ColumnPurificationData = resp.ColumnPurificationData || [];
                    $scope.m.viewForm.DLSData = resp.DLSData || [];
                    $scope.m.viewForm.MALSData = resp.MALSData || [];
                    $scope.m.viewForm.cIEFData = resp.cIEFData || [];
                    $scope.m.viewForm.BindingData = resp.BindingData || [];
                    $scope.m.viewForm.Transfection = resp.Transfection;
                    $scope.m.viewForm.recoveries = [];
                    for (var i = 0; i < resp.ColumnPurificationData.length; i++) {
                        var currPurification = resp.ColumnPurificationData[i];
                        var mass1, mass2, recovery;
                        if (i == 0) {
                            mass1 = currPurification.loadMass;
                            mass2 = currPurification.elutionMass;
                            recovery = 100 * mass2 / mass1;
                        } else {
                            mass1 = currPurification.elutionMass;
                            recovery = 100 * mass1 / mass2;
                        }
                        $scope.m.viewForm.recoveries.push(recovery);
                    }
                    if (resp.ColumnPurificationData.length) {
                        $scope.m.viewForm.finalRecovery = 100 * $scope.m.viewForm.finalMass / resp.ColumnPurificationData[0].elutionMass;
                    } else {
                        $scope.m.viewForm.finalRecovery = null;
                    }
                });
                $scope.m.viewForm.name = $scope.m.currentRowData.name;
                $scope.m.viewForm.transfectionId = $scope.m.currentRowData.transfectionId;
                $scope.m.viewForm.createdBy = $scope.UserHash[$scope.m.currentRowData.createdBy];
                $scope.m.viewForm.updatedBy = $scope.UserHash[$scope.m.currentRowData.updatedBy];
                $scope.m.viewForm.createdAt = SiUtil.getDateOnly($scope.m.currentRowData.createdAt);
                $scope.m.viewForm.updatedAt = SiUtil.getDateOnly($scope.m.currentRowData.updatedAt);
                $scope.m.viewForm.purificationDate = $scope.m.currentRowData.purificationDate == null ? null : SiUtil.getDateOnly($scope.m.currentRowData.purificationDate);
                $scope.m.viewForm.purifiedBy = $scope.UserHash[$scope.m.currentRowData.purifiedBy];
                $scope.m.viewForm.finalConcentration = $scope.m.currentRowData.finalConcentration;
                $scope.m.viewForm.finalVolume = $scope.m.currentRowData.finalVolume;
                $scope.m.viewForm.volumeRemaining = $scope.m.currentRowData.volumeRemaining;
                $scope.m.viewForm.volumeRemainingPer = 100 * $scope.m.viewForm.volumeRemaining / $scope.m.viewForm.finalVolume;
                $scope.m.viewForm.finalMass = $scope.m.viewForm.finalVolume * $scope.m.viewForm.finalConcentration;

                $scope.m.viewForm.pI = $scope.m.currentRowData['Transfection.TransfectionRequest.Protein.pI'];
                // $scope.m.viewForm.proteinId = $scope.m.currentRowData['Transfection.TransfectionRequest.Protein.id'];
                // $scope.m.viewForm.protein = $scope.m.currentRowData['Transfection.TransfectionRequest.Protein.name'];
                $scope.m.viewForm.status = SiUtil.getFormattedStatus($scope.m.currentRowData['Transfection.TransfectionRequest.requestStatus']);
                $scope.m.viewForm.nanoDrop = $scope.m.currentRowData['Transfection.TransfectionRequest.Protein.nanoDrop'];
                $scope.m.viewForm.titer = $scope.m.currentRowData['Transfection.octetTiter'];
                $scope.m.viewForm.notes = $scope.m.currentRowData.notes;
                $scope.m.viewForm.BEX = $scope.m.currentRowData.BEX;
                $scope.m.viewForm.show = true;
                $scope.m.activeTab = "DetailTab";
            }
        };

        $scope.m.editDetail = function () {
            if ($scope.m.currentRowData) {
                $scope.m.activeTab = "EditTab";
                $scope.m.editForm.id = $scope.m.currentRowData.id;
                SiHttpUtil.FetchOneEntry('proteinPurification', $scope.m.currentRowData.id).then(resp => {
                    $scope.m.editForm.SECData = resp.SECData;
                    $scope.m.editForm.ColumnPurificationData = resp.ColumnPurificationData;
                    $scope.m.editForm.MALSData = resp.MALSData;
                    $scope.m.editForm.cIEFData = resp.cIEFData;
                    $scope.m.editForm.DLSData = resp.DLSData;
                    for (var i = 0; i < resp.DLSData.length; i++) {
                        $scope.m.editForm.DLSData[i].date = {
                            dt: $scope.m.editForm.DLSData[i].date ? new Date($scope.m.editForm.DLSData[i].date) : new Date()
                        };
                    }
                    for (var i = 0; i < resp.SECData.length; i++) {
                        $scope.m.editForm.SECData[i].date = {
                            dt: $scope.m.editForm.SECData[i].date ? new Date($scope.m.editForm.SECData[i].date) : new Date()
                        };
                    }
                    for (var i = 0; i < resp.MALSData.length; i++) {
                        $scope.m.editForm.MALSData[i].date = {
                            dt: $scope.m.editForm.MALSData[i].date ? new Date($scope.m.editForm.MALSData[i].date) : new Date()
                        };
                    }
                    for (var i = 0; i < resp.cIEFData.length; i++) {
                        $scope.m.editForm.cIEFData[i].date = {
                            dt: $scope.m.editForm.cIEFData[i].date ? new Date($scope.m.editForm.cIEFData[i].date) : new Date()
                        };
                    }
                });
                $scope.m.editForm.name = $scope.m.currentRowData.name;
                $scope.m.editForm.transfectionId = $scope.m.currentRowData.transfectionId;
                $scope.m.editForm.data.purificationDate.dt = $scope.m.currentRowData.purificationDate == null ? null : new Date($scope.m.currentRowData.purificationDate);
                $scope.m.editForm.purifiedBy = $scope.m.currentRowData.purifiedBy ? $scope.m.currentRowData.purifiedBy : SiHttpUtil.GetUserId();
                $scope.m.editForm.finalConcentration = $scope.m.currentRowData.finalConcentration;
                $scope.m.editForm.finalVolume = $scope.m.currentRowData.finalVolume;
                $scope.m.editForm.volumeRemaining = $scope.m.currentRowData.volumeRemaining;
                $scope.m.editForm.BEX = $scope.m.currentRowData.BEX;
                $scope.m.editForm.notes = $scope.m.currentRowData.notes;

                $scope.m.editForm.updatedAt = $scope.m.currentRowData.updatedAt;
                $scope.m.editForm.requestStatus = $scope.m.currentRowData['Transfection.TransfectionRequest.requestStatus'];
                $scope.m.editForm.transfection = $scope.m.currentRowData['Transfection.name'];
                $scope.m.editForm.transfectionRequest = $scope.m.currentRowData['Transfection.TransfectionRequest.name'];
                $scope.m.editForm.trId = $scope.m.currentRowData['Transfection.TransfectionRequest.id'];
                $scope.m.editForm.trUpdatedAt = $scope.m.currentRowData['Transfection.TransfectionRequest.updatedAt'];
                $scope.m.editForm.show = true;
            }
        };

        $scope.m.loadAll = function () {
            $scope.m.dp.initDp('CreateForm', 'purificationDate', true);
            $scope.m.dp.initDp('editForm', 'purificationDate', true);
            var deps = []; // Dependencies.
            Promise.all(deps).then(values => {
                $scope.m.LoadProteinPurificationList();
            });
        };

        $scope.m.loadAll();
    }
})();

//Research
//AnalyticalSecController
(function () {
    'use strict';

    angular.module('app.research').controller('AnalyticalSecController', AnalyticalSecController);

    AnalyticalSecController.$inject = ['$scope', 'SiHttpUtil', 'DTOptionsBuilder', 'DTColumnBuilder', 'DTColumnDefBuilder', 'SiUtil', '$stateParams'];

    function AnalyticalSecController($scope, SiHttpUtil, DTOptionsBuilder, DTColumnBuilder, DTColumnDefBuilder, SiUtil, $stateParams) {
        // Main model.
        $scope.m = {};
        $scope.tableState.currentResearchTable = "analyticalSec";
        $scope.m.tableName = "analyticalSec";
        $scope.m.activeTab = "ViewAllTab";
        $scope.m.tableData = null;
        $scope.sectionNames = [];
        $scope.op = $stateParams.op;
        $scope.id = $stateParams.id;

        $scope.m.viewForm = {
            data: {},
            show: false,
            submitted: false,
            CancelTab: () => SiHttpUtil.HideTab($scope.m, $scope.m.viewForm)
        };
        $scope.m.editForm = {
            data: {},
            show: false,
            submitted: false,
            ui: {},
            CancelTab: () => SiHttpUtil.HideTab($scope.m, $scope.m.editForm),
            SubmitTab: function () {
                $scope.m.editForm.submitted = true;
                if (!$scope.m.editForm.ui.validate.$valid) {
                    console.error($scope.m.editForm.ui.validate);
                    return;
                }
                var RefLinkListJson = angular.toJson($scope.m.editForm.RefLinkList.data);
                SiHttpUtil.UpdateDataEntry({
                    tableName: "analyticalSec",
                    id: $scope.m.editForm.id,
                    firstStepPOI: $scope.m.editForm.firstStepPOI,
                    firstStepHMW: $scope.m.editForm.firstStepHMW,
                    firstStepLMW: $scope.m.editForm.firstStepLMW,
                    finalStepPOI: $scope.m.editForm.finalStepPOI,
                    finalStepHMW: $scope.m.editForm.finalStepHMW,
                    finalStepLMW: $scope.m.editForm.finalStepLMW,
                    ASECNote: $scope.m.editForm.ASECNote,
                    references: RefLinkListJson,
                    updatedAt: $scope.m.editForm.updatedAt
                }).then(resp => {
                    $scope.m.editForm.CancelTab();
                    $scope.m.RefreshData();
                    $scope.m.resetSelection();
                });
            }
        };

        $scope.m.CreateForm = {
            data: {
                RefLinkList: {
                    data: [],
                    nameList: $scope.sectionNames
                }
            },
            ui: {},
            submitted: false,
            initTab: function () {
                $scope.m.CreateForm.data.RefLinkList.nameList = $scope.enums.ENUM_ASECSectionName;
            },
            ResetTab: function () {
                SiHttpUtil.ResetForm($scope.m.CreateForm);
                $scope.m.dp.initDp('CreateForm', 'ASECDate', true);
                $scope.m.activeTab = "ViewAllTab";
                $scope.m.CreateForm.data.RefLinkList = {
                    data: [],
                    nameList: $scope.sectionNames
                };
            },
            SubmitTab: function () {
                $scope.m.CreateForm.submitted = true;
                if (!$scope.m.CreateForm.ui.validate.$valid) {
                    console.error($scope.m.CreateForm.ui.validate);
                    return;
                }
                var TransfectionEntry = {
                    tableName: "analyticalSec",
                    proteinPurificationId: $scope.m.CreateForm.data.proteinPurificationId,
                    ASECDate: $scope.m.CreateForm.data.ASECDate.dt,
                    firstStepPOI: $scope.m.CreateForm.data.firstStepPOI,
                    firstStepHMW: $scope.m.CreateForm.data.firstStepHMW,
                    firstStepLMW: $scope.m.CreateForm.data.firstStepLMW,
                    finalStepPOI: $scope.m.CreateForm.data.finalStepPOI,
                    finalStepHMW: $scope.m.CreateForm.data.finalStepHMW,
                    finalStepLMW: $scope.m.CreateForm.data.finalStepLMW,
                    ASECNote: $scope.m.CreateForm.data.ASECNote
                };
                if ($scope.m.CreateForm.data.RefLinkList.data.length > 0) {
                    var RefLinkListJson = angular.toJson($scope.m.CreateForm.data.RefLinkList.data);
                    TransfectionEntry['references'] = RefLinkListJson;
                }

                SiHttpUtil.CreateTableEntry(TransfectionEntry).then(function (resp) {
                    if (resp.status == 200) {
                        $scope.m.CreateForm.ResetTab();
                        $scope.m.RefreshData();
                    }
                });
            }
        };

        $scope.m.BulkCreateForm = {
            data: {
                aSECsToAdd: [],
                purificationList: []
            },
            ui: {},
            submitted: false,
            ResetTab: function () {
                SiHttpUtil.ResetForm($scope.m.BulkCreateForm);
                $scope.m.activeTab = "ViewAllTab";
                $scope.m.BulkCreateForm.data = {};
                $scope.m.BulkCreateForm.data.aSECsToAdd = [];
                $scope.m.BulkCreateForm.data.purificationList = [];
                $scope.m.dp.initDp('BulkCreateForm', 'ASECDate', true);
            },
            SubmitTab: function () {
                $scope.m.BulkCreateForm.submitted = true;
                if (!$scope.m.BulkCreateForm.ui.validate.$valid) {
                    console.error($scope.m.BulkCreateForm.ui.validate);
                    return;
                }
                var ASECEntry = function () {
                    return {
                        ASECDate: $scope.m.BulkCreateForm.data.ASECDate.dt
                    };
                };

                var newEntries = [];
                for (var i = 0; i < $scope.m.BulkCreateForm.data.aSECsToAdd.length; i++) {
                    var temp = ASECEntry();
                    temp.proteinPurificationId = $scope.m.BulkCreateForm.data.aSECsToAdd[i].proteinPurificationId;
                    temp.firstStepPOI = $scope.m.BulkCreateForm.data.aSECsToAdd[i].firstStepPOI;
                    temp.firstStepHMW = $scope.m.BulkCreateForm.data.aSECsToAdd[i].firstStepHMW;
                    temp.firstStepLMW = $scope.m.BulkCreateForm.data.aSECsToAdd[i].firstStepLMW;
                    temp.finalStepPOI = $scope.m.BulkCreateForm.data.aSECsToAdd[i].finalStepPOI;
                    temp.finalStepHMW = $scope.m.BulkCreateForm.data.aSECsToAdd[i].finalStepHMW;
                    temp.finalStepLMW = $scope.m.BulkCreateForm.data.aSECsToAdd[i].finalStepLMW;
                    temp.ASECNote = $scope.m.BulkCreateForm.data.aSECsToAdd[i].notes;
                    newEntries.push(temp);
                }
                var toCreate = {
                    tableName: "analyticalSec",
                    list: newEntries
                };

                SiHttpUtil.CreateTableEntries(toCreate).then(function (resp) {
                    if (resp.status == 200) {
                        $scope.m.BulkCreateForm.ResetTab();
                        $scope.m.RefreshData();
                    }
                });
            }
        };

        $scope.addASEC = function (proteinPurificationId) {
            if ($scope.m.BulkCreateForm.data.purificationList.indexOf(proteinPurificationId) > -1) {
                SiHttpUtil.NotifyOperationErr("Purification already added. Cannot be added again.");
            } else {
                var tempEntry = {
                    proteinPurificationId: proteinPurificationId
                };
                $scope.m.BulkCreateForm.data.aSECsToAdd.push(tempEntry);
                $scope.m.BulkCreateForm.data.purificationList.push(proteinPurificationId);
            }
        };

        $scope.removeASEC = function (index) {
            $scope.m.BulkCreateForm.data.aSECsToAdd.splice(index, 1);
            $scope.m.BulkCreateForm.data.purificationList.splice(index, 1);
        };

        $scope.m.ValidateCreateInput = (FieldName, Type) => SiHttpUtil.ValidateInput($scope.m.CreateForm.ui.validate, $scope.m.CreateForm.submitted, FieldName, Type);
        $scope.m.ValidateBulkCreateInput = (FieldName, Type) => SiHttpUtil.ValidateInput($scope.m.BulkCreateForm.ui.validate, $scope.m.BulkCreateForm.submitted, FieldName, Type);
        $scope.m.ValidateEditInput = (FieldName, Type) => SiHttpUtil.ValidateInput($scope.m.editForm.ui.validate, $scope.m.editForm.submitted, FieldName, Type);

        $scope.m.dp = SiUtil.dp.bind($scope.m)();
        $scope.m.dp.initDp('CreateForm', 'ASECDate', true);
        $scope.m.dp.initDp('BulkCreateForm', 'ASECDate', true);

        $scope.m.DtInstCallback = function (inst) {
            console.log("dt:", inst);
            $scope.m.DtInst = inst;
        };

        $scope.m.RefreshData = () => {
            if ($scope.m.DtInstCallback) {
                // NOTE(ww): DtInst could undefined when creating first data entry.
                if ($scope.m.DtInst) {
                    $scope.m.DtInst.changeData($scope.m.LoadDataList());
                } else {
                    $scope.m.LoadDataList().then(function () {
                        $scope.m.dataReady = true;
                        $scope.$digest();
                    });
                }
            }
        };

        SiHttpUtil.InitRowClick($scope);

        $scope.m.dtColumns = [];

        $scope.m.LoadDataList = function () {
            return SiHttpUtil.FetchTableEntries('analyticalSec').then(function (resp) {
                // Support chaining to pass on to datatables..
                return new Promise(function (resolve, reject) {
                    $scope.m.tableData = resp.records;
                    $scope.enums = JSON.parse(resp.enums);
                    $scope.sectionNames = $scope.enums.ENUM_analysisSectionName;
                    if ($scope.m.tableData && $scope.m.tableData.length > 0) {

                        if ($scope.m.dtColumns.length == 0) {
                            SiHttpUtil.initDtColumns($scope.m.dtColumns, $scope.m.tableData, colName => SiHttpUtil.omitColumnForTable('analyticalSec', colName), colName => SiHttpUtil.dbColumnTranslator('analyticalSec', colName), colName => SiHttpUtil.hideColumnForTable('analyticalSec', colName));
                        }

                        $scope.m.dtColDefs = [DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'proteinPurificationId')).renderWith(SiUtil.ColDisplayers.GetHashConvertDisplayer($scope.m.DependencyDisplayData.Hash)).withOption('type', 'natural'), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'createdBy')).renderWith( // Operator.
                        SiUtil.ColDisplayers.GetHashConvertDisplayer($scope.UserHash)), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'updatedAt')).renderWith(SiUtil.ColDisplayers.ShortDateDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'ASECDate')).renderWith(SiUtil.ColDisplayers.ShortDateDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'ASECNote')).renderWith(SiUtil.ColDisplayers.DescriptionDisplayer)];

                        $scope.m.dtOptions = SiHttpUtil.initDtOptions($scope.m.dtColumns, $scope.m.tableData, $scope.m.rowCallback, function () {
                            resolve($scope.m.tableData);
                            $scope.m.dataReady = true;
                            if ($scope.op == "view" && $scope.id) {
                                var records = $scope.m.tableData;
                                for (var i = 0; i < records.length; i++) {
                                    if (records[i].id == $scope.id) {
                                        $scope.m.currentRowData = records[i];
                                        break;
                                    }
                                }
                                $scope.m.viewDetail();
                            }
                            if ($scope.op == "create") {
                                $scope.m.activeTab = "CreateTab";
                            }
                        });
                    }
                });
            });
        };

        $scope.m.loadTableData = function () {
            $scope.m.LoadDataList();
        };

        // Copy model to views.
        $scope.m.viewDetail = function () {
            if ($scope.m.currentRowData) {
                $scope.m.viewForm.name = $scope.m.currentRowData.name;
                $scope.m.viewForm.proteinPurificationId = $scope.m.currentRowData.proteinPurificationId;

                $scope.m.viewForm.createdBy = $scope.UserHash[$scope.m.currentRowData.createdBy];
                $scope.m.viewForm.updatedBy = $scope.UserHash[$scope.m.currentRowData.updatedBy];
                $scope.m.viewForm.createdAt = SiUtil.getDateOnly($scope.m.currentRowData.createdAt);
                $scope.m.viewForm.updatedAt = SiUtil.getDateOnly($scope.m.currentRowData.updatedAt);

                $scope.m.viewForm.ASECDate = SiUtil.getDateOnly($scope.m.currentRowData.ASECDate);
                $scope.m.viewForm.firstStepPOI = $scope.m.currentRowData.firstStepPOI;
                $scope.m.viewForm.firstStepHMW = $scope.m.currentRowData.firstStepHMW;
                $scope.m.viewForm.firstStepLMW = $scope.m.currentRowData.firstStepLMW;
                $scope.m.viewForm.finalStepPOI = $scope.m.currentRowData.finalStepPOI;
                $scope.m.viewForm.finalStepHMW = $scope.m.currentRowData.finalStepHMW;
                $scope.m.viewForm.finalStepLMW = $scope.m.currentRowData.finalStepLMW;
                $scope.m.viewForm.ASECNote = $scope.m.currentRowData.ASECNote;

                $scope.selectedSectionList = $scope.enums.ENUM_ASECSectionName;
                $scope.m.viewForm.referenceArray = JSON.parse($scope.m.currentRowData.references);

                $scope.m.viewForm.show = true;
                $scope.m.activeTab = "DetailTab";
            }
        };

        $scope.m.editForm.RefLinkList = {};
        $scope.m.editForm.RefLinkList.data = [];
        $scope.m.editDetail = function () {
            if ($scope.m.currentRowData) {
                $scope.m.activeTab = "EditTab";
                $scope.m.editForm.id = $scope.m.currentRowData.id;
                $scope.m.editForm.name = $scope.m.currentRowData.name;
                $scope.m.editForm.proteinPurificationId = $scope.m.DependencyDisplayData.Hash[$scope.m.currentRowData.proteinPurificationId];

                $scope.m.editForm.ASECDate = SiUtil.getDateOnly($scope.m.currentRowData.ASECDate);
                $scope.m.editForm.firstStepPOI = $scope.m.currentRowData.firstStepPOI;
                $scope.m.editForm.firstStepHMW = $scope.m.currentRowData.firstStepHMW;
                $scope.m.editForm.firstStepLMW = $scope.m.currentRowData.firstStepLMW;
                $scope.m.editForm.finalStepPOI = $scope.m.currentRowData.finalStepPOI;
                $scope.m.editForm.finalStepHMW = $scope.m.currentRowData.finalStepHMW;
                $scope.m.editForm.finalStepLMW = $scope.m.currentRowData.finalStepLMW;
                $scope.m.editForm.ASECNote = $scope.m.currentRowData.ASECNote;
                $scope.m.editForm.updatedAt = $scope.m.currentRowData.updatedAt;

                $scope.m.editForm.RefLinkList = {
                    data: JSON.parse($scope.m.currentRowData.references) || [],
                    nameList: $scope.enums.ENUM_ASECSectionName
                };

                $scope.m.editForm.show = true;
            }
        };

        $scope.m.DependencyList = [];
        $scope.m.DependencyListReady = false;
        $scope.m.DependencyDisplayData = {};

        var CacheDependency = SiHttpUtil.FetchIdNameMapping('proteinPurification').then(function (resp) {
            $scope.m.DependencyList = resp;
            $scope.m.DependencyDisplayData = SiHttpUtil.GetDependencyDisplayItemList($scope.m.DependencyList);

            $scope.m.DependencyListReady = true;
        });

        var deps = []; // Dependencies.
        deps.push(CacheDependency);
        Promise.all(deps).then(values => {
            $scope.m.LoadDataList();
        });
    }
})();

//Research
//StableCellLineController
(function () {
    'use strict';

    angular.module('app.research').controller('StableCellLineController', StableCellLineController);

    StableCellLineController.$inject = ['$scope', 'SiHttpUtil', 'DTOptionsBuilder', 'DTColumnBuilder', 'DTColumnDefBuilder', 'SiUtil', '$stateParams'];

    function StableCellLineController($scope, SiHttpUtil, DTOptionsBuilder, DTColumnBuilder, DTColumnDefBuilder, SiUtil, $stateParams) {
        // Main model.
        $scope.m = {};
        $scope.tableState.currentResearchTable = "stableCellLine";
        $scope.m.tableName = "stableCellLine";
        $scope.m.activeTab = "ViewAllTab";
        $scope.m.tableData = null;
        $scope.op = $stateParams.op;
        $scope.id = $stateParams.id;

        $scope.m.viewForm = {
            data: {},
            show: false,
            submitted: false,
            CancelTab: () => SiHttpUtil.HideTab($scope.m, $scope.m.viewForm)
        };
        $scope.m.editForm = {
            data: {},
            show: false,
            submitted: false,
            ui: {},
            CancelTab: () => SiHttpUtil.HideTab($scope.m, $scope.m.editForm),
            SubmitTab: function () {
                $scope.m.editForm.submitted = true;
                if (!$scope.m.editForm.ui.validate.$valid) {
                    console.error($scope.m.editForm.ui.validate);
                    return;
                }
                var RefLinkListJson = angular.toJson($scope.m.editForm.RefLinkList.data);
                SiHttpUtil.UpdateDataEntry({
                    tableName: "stableCellLine",
                    id: $scope.m.editForm.id,
                    ENUM_parentalCellLine: $scope.m.editForm.ENUM_parentalCellLine,
                    ENUM_transfectionMethod: $scope.m.editForm.ENUM_transfectionMethod,
                    ENUM_selectionMarker: $scope.m.editForm.ENUM_selectionMarker,
                    transfectionDate: $scope.m.editForm.data.transfectionDate.dt,
                    proteinId: $scope.m.editForm.proteinId,
                    plasmidId: $scope.m.editForm.plasmidId,
                    proteinAlias: $scope.m.editForm.proteinAlias,
                    programId: $scope.m.editForm.programId,
                    updatedAt: $scope.m.editForm.updatedAt,
                    references: RefLinkListJson
                }).then(resp => {
                    $scope.m.editForm.CancelTab();
                    $scope.m.RefreshData();
                    $scope.m.resetSelection();
                });
            },
            Delete: () => {
                SiHttpUtil.DeleteDataEntry('stableCellLine', $scope.m.editForm.id).then(resp => {
                    $scope.m.editForm.CancelTab();
                    $scope.m.RefreshData();
                    $scope.m.resetSelection();
                });
            }
        };
        // $scope.m.CreateTransfection = () => SiHttpUtil.CreateTableEntry()
        $scope.m.CreateForm = {
            data: {},
            ui: {},
            submitted: false,
            ResetTab: function () {
                SiHttpUtil.ResetForm($scope.m.CreateForm);
                $scope.m.activeTab = "ViewAllTab";
            },
            initTab: function () {
                SiHttpUtil.FetchIdNameMapping('plasmids').then(function (resp) {
                    $scope.m.PlasmidList = resp;
                    $scope.m.PlasmidDisplayData = SiHttpUtil.GetDependencyDisplayItemList($scope.m.PlasmidList);
                    $scope.m.PlasmidListReady = true;
                });
                SiHttpUtil.FetchIdNameMapping('protein').then(function (resp) {
                    $scope.m.ProteinList = resp;
                    $scope.m.ProteinDisplayData = SiHttpUtil.GetDependencyList($scope.m.ProteinList);
                    $scope.m.ProteinListReady = true;
                });
            },
            SubmitTab: function () {
                $scope.m.CreateForm.submitted = true;
                if (!$scope.m.CreateForm.ui.validate.$valid) {
                    console.error($scope.m.CreateForm.ui.validate);
                    return;
                }
                var NewEntry = {
                    tableName: "stableCellLine",
                    transfectionDate: $scope.m.CreateForm.data.transfectionDate.dt,
                    ENUM_parentalCellLine: $scope.m.CreateForm.data.ENUM_parentalCellLine,
                    plasmidId: $scope.m.CreateForm.data.plasmidId,
                    ENUM_transfectionMethod: $scope.m.CreateForm.data.ENUM_transfectionMethod,
                    ENUM_selectionMarker: $scope.m.CreateForm.data.ENUM_selectionMarker,
                    proteinAlias: $scope.m.CreateForm.data.proteinAlias,
                    proteinId: $scope.m.CreateForm.data.proteinId,
                    programId: $scope.m.CreateForm.data.programId
                };

                SiHttpUtil.CreateTableEntry(NewEntry).then(function (resp) {
                    if (resp.status == 200) {
                        $scope.m.CreateForm.ResetTab();
                        $scope.m.RefreshData();
                    }
                });
            }
        };

        $scope.m.ValidateCreateInput = (FieldName, Type) => SiHttpUtil.ValidateInput($scope.m.CreateForm.ui.validate, $scope.m.CreateForm.submitted, FieldName, Type);
        $scope.m.ValidateEditInput = (FieldName, Type) => SiHttpUtil.ValidateInput($scope.m.editForm.ui.validate, $scope.m.editForm.submitted, FieldName, Type);

        $scope.m.dp = SiUtil.dp.bind($scope.m)();
        $scope.m.dp.initDp('CreateForm', 'transfectionDate', true);
        $scope.m.dp.initDp('editForm', 'transfectionDate', false);

        $scope.m.DtInstCallback = function (inst) {
            console.log("dt:", inst);
            $scope.m.DtInst = inst;
        };

        $scope.m.RefreshData = () => {
            if ($scope.m.DtInstCallback) {
                // NOTE(ww): DtInst could undefined when creating first data entry.
                if ($scope.m.DtInst) {
                    $scope.m.DtInst.changeData($scope.m.LoadDataList());
                } else {
                    $scope.m.LoadDataList().then(function () {
                        $scope.m.dataReady = true;
                        $scope.$digest();
                    });
                }
            }
        };

        SiHttpUtil.InitRowClick($scope);

        $scope.m.dtColumns = [];

        $scope.m.LoadDataList = function () {
            return SiHttpUtil.FetchTableEntries('stableCellLine').then(function (resp) {
                // Support chaining to pass on to datatables..
                return new Promise(function (resolve, reject) {
                    $scope.m.tableData = resp.records;
                    if (resp.enums) {
                        var enumList = JSON.parse(resp.enums);
                        $scope.enums = enumList;
                        $scope.parentalCellLines = enumList.ENUM_parentalCellLine;
                        $scope.transfectionMethods = enumList.ENUM_transfectionMethod;
                        $scope.selectionMarkers = enumList.ENUM_selectionMarker;
                    }
                    if ($scope.m.tableData && $scope.m.tableData.length > 0) {

                        if ($scope.m.dtColumns.length == 0) {
                            SiHttpUtil.initDtColumns($scope.m.dtColumns, $scope.m.tableData, colName => SiHttpUtil.omitColumnForTable('stableCellLine', colName), colName => SiHttpUtil.dbColumnTranslator('stableCellLine', colName), colName => SiHttpUtil.hideColumnForTable('stableCellLine', colName), SiHttpUtil.tableOrder('stableCellLine'));
                        }

                        $scope.m.dtColDefs = [DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'createdBy')).renderWith(SiUtil.ColDisplayers.GetHashConvertDisplayer($scope.UserHash)), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'updatedAt')).renderWith(SiUtil.ColDisplayers.ShortDateDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'transfectionDate')).renderWith(SiUtil.ColDisplayers.ShortDateDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'Plasmid.name')).withOption('type', 'natural').renderWith(SiUtil.ColDisplayers.FixJoinDisplay('Plasmid.name')), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'Plasmid.description')).notVisible().renderWith(SiUtil.ColDisplayers.FixJoinDisplay('Plasmid.description')), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'Protein.name')).renderWith(SiUtil.ColDisplayers.FixJoinDisplay('Protein.name')), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'Protein.description')).notVisible().renderWith(SiUtil.ColDisplayers.FixJoinDisplay('Protein.description'))];

                        $scope.m.dtOptions = SiHttpUtil.initDtOptions($scope.m.dtColumns, $scope.m.tableData, $scope.m.rowCallback, function () {
                            resolve($scope.m.tableData);
                            $scope.m.dataReady = true;
                            if ($scope.op == "view" && $scope.id) {
                                var records = $scope.m.tableData;
                                for (var i = 0; i < records.length; i++) {
                                    if (records[i].id == $scope.id) {
                                        $scope.m.currentRowData = records[i];
                                        break;
                                    }
                                }
                                $scope.m.viewDetail();
                            }
                        });
                    }
                });
            });
        };

        $scope.m.loadTableData = function () {
            $scope.m.LoadDataList();
        };

        // Copy model to views.
        $scope.m.viewDetail = function () {
            if ($scope.m.currentRowData) {
                $scope.m.viewForm.name = $scope.m.currentRowData.name;

                $scope.m.viewForm.createdBy = $scope.UserHash[$scope.m.currentRowData.createdBy];
                $scope.m.viewForm.updatedBy = $scope.UserHash[$scope.m.currentRowData.updatedBy];
                $scope.m.viewForm.createdAt = SiUtil.getDateOnly($scope.m.currentRowData.createdAt);
                $scope.m.viewForm.updatedAt = SiUtil.getDateOnly($scope.m.currentRowData.updatedAt);

                $scope.m.viewForm.transfectionDate = SiUtil.getDateOnly($scope.m.currentRowData.transfectionDate);
                $scope.m.viewForm.ENUM_parentalCellLine = $scope.m.currentRowData.ENUM_parentalCellLine;
                $scope.m.viewForm.plasmidId = $scope.m.currentRowData.plasmidId;
                $scope.m.viewForm.plasmid = $scope.m.currentRowData['Plasmid.name'];
                $scope.m.viewForm.protein = $scope.m.currentRowData['Protein.name'];
                $scope.m.viewForm.plasmidDescription = $scope.m.currentRowData['Plasmid.description'];
                $scope.m.viewForm.proteinDescription = $scope.m.currentRowData['Protein.description'];
                $scope.m.viewForm.proteinId = $scope.m.currentRowData.proteinId;
                $scope.m.viewForm.proteinAlias = $scope.m.currentRowData.proteinAlias;
                $scope.m.viewForm.ENUM_transfectionMethod = $scope.m.currentRowData.ENUM_transfectionMethod;
                $scope.m.viewForm.ENUM_selectionMarker = $scope.m.currentRowData.ENUM_selectionMarker;
                $scope.m.viewForm.programId = $scope.m.currentRowData.programId;

                $scope.selectedSectionList = $scope.enums.ENUM_stableCellSectionName;
                $scope.m.viewForm.referneceArray = JSON.parse($scope.m.currentRowData.references);
                for (var key in $scope.m.viewForm.referneceArray) {
                    if ($scope.m.viewForm.referneceArray[key].section == "Geneious Links") {
                        $scope.m.viewForm.referneceArray[key].url = "geneious:/\/urn=" + $scope.m.viewForm.referneceArray[key].url;
                    }
                }

                $scope.m.viewForm.show = true;
                $scope.m.activeTab = "DetailTab";
            }
        };

        $scope.m.editDetail = function () {
            if ($scope.m.currentRowData) {
                $scope.m.activeTab = "EditTab";
                $scope.m.editForm.id = $scope.m.currentRowData.id;
                $scope.m.editForm.name = $scope.m.currentRowData.name;

                $scope.m.editForm.data.transfectionDate.dt = $scope.m.currentRowData.transfectionDate ? new Date($scope.m.currentRowData.transfectionDate) : null;
                $scope.m.editForm.ENUM_parentalCellLine = $scope.m.currentRowData.ENUM_parentalCellLine;
                $scope.m.editForm.plasmidId = $scope.m.currentRowData.plasmidId;
                $scope.m.editForm.proteinId = $scope.m.currentRowData.proteinId;
                $scope.m.editForm.proteinAlias = $scope.m.currentRowData.proteinAlias;
                $scope.m.editForm.ENUM_transfectionMethod = $scope.m.currentRowData.ENUM_transfectionMethod;
                $scope.m.editForm.ENUM_selectionMarker = $scope.m.currentRowData.ENUM_selectionMarker;
                $scope.m.editForm.programId = $scope.m.currentRowData.programId;
                $scope.m.editForm.updatedAt = $scope.m.currentRowData.updatedAt;

                $scope.m.editForm.RefLinkList = {
                    data: JSON.parse($scope.m.currentRowData.references) || [],
                    nameList: $scope.enums.ENUM_stableCellSectionName
                };
                $scope.m.editForm.show = true;
            }
        };

        $scope.m.LoadDataList();
    }
})();

//Research
//ProteinAnalysisRequest Controller
(function () {
    'use strict';

    angular.module('app.research').controller('ProteinAnalysisRequestController', ProteinAnalysisRequestController);

    ProteinAnalysisRequestController.$inject = ['$scope', 'SiHttpUtil', 'DTOptionsBuilder', 'DTColumnBuilder', 'DTColumnDefBuilder', 'SiUtil', '$stateParams'];

    function ProteinAnalysisRequestController($scope, SiHttpUtil, DTOptionsBuilder, DTColumnBuilder, DTColumnDefBuilder, SiUtil, $stateParams) {
        // Main model.
        $scope.m = {};
        $scope.tableState.currentResearchTable = "proteinAnalysisRequest";
        $scope.m.tableName = "proteinAnalysisRequest";
        $scope.m.activeTab = "ViewAllTab";
        $scope.m.methodListToAdd = [];
        $scope.m.methodListVolumes = [];
        $scope.m.bulkVolumes = [];
        $scope.m.tableData = null;
        $scope.m.calculateSubmissionVolume = SiHttpUtil.CalculateSubmissionVolume;
        $scope.m.GetMinConcentrationNeeded = SiHttpUtil.GetMinConcentrationNeeded;
        $scope.op = $stateParams.op;
        $scope.id = $stateParams.id;
        $scope.m.analysisRequestToAdd = [];

        $scope.addPurification = function (purificationId, method) {
            if ($scope.m.analysisRequestToAdd.indexOf(purificationId) > -1) {
                SiHttpUtil.NotifyOperationErr("Purification " + purificationId + " already added. Cannot be added again.");
            } else {
                $scope.m.BulkCreateForm.data.proteinConcentrations.push($scope.m.DependencyDisplayData.ListHash[purificationId].finalConcentration);
                $scope.m.analysisRequestToAdd.push(purificationId);
                var sampleConc = $scope.m.DependencyDisplayData.ListHash[purificationId].finalConcentration;
                $scope.m.BulkCreateForm.data.concentrationOverride.push(null);
                if (SiHttpUtil.GetMinConcentrationNeeded(method) <= sampleConc) {
                    $scope.m.bulkVolumes.push(SiHttpUtil.CalculateSubmissionVolume(method, sampleConc));
                } else {
                    $scope.m.bulkVolumes.push(0);
                }
            }
        };
        $scope.removePurification = function (index) {
            $scope.m.analysisRequestToAdd.splice(index, 1);
            $scope.m.bulkVolumes.splice(index, 1);
            $scope.m.BulkCreateForm.data.concentrationOverride.splice(index, 1);
            $scope.m.BulkCreateForm.data.proteinConcentrations.splice(index, 1);
        };
        $scope.updateVolume = function (index) {
            var conc = $scope.m.BulkCreateForm.data.concentrationOverride[index];
            $scope.m.BulkCreateForm.data.proteinConcentrations[index] = conc;
            $scope.m.bulkVolumes[index] = SiHttpUtil.CalculateSubmissionVolume($scope.m.BulkCreateForm.data.method, conc);
        };

        $scope.updateBulkCalculations = function () {
            var method = $scope.m.BulkCreateForm.data.method;
            for (var i = 0; i < $scope.m.analysisRequestToAdd.length; i++) {
                if ($scope.m.GetMinConcentrationNeeded(method) <= $scope.m.BulkCreateForm.data.proteinConcentrations[i]) {
                    $scope.m.bulkVolumes[i] = SiHttpUtil.CalculateSubmissionVolume(method, $scope.m.BulkCreateForm.data.proteinConcentrations[i]);
                } else {
                    $scope.m.bulkVolumes[i] = 0;
                }
            }
        };

        $scope.addMethod = function (list, volumes, sampleConc, method) {
            if (list.indexOf(method) > -1) {
                SiHttpUtil.NotifyOperationErr("Method " + method + " Already added. Cannot be added again.");
            } else {
                list.push(method);
                if (SiHttpUtil.GetMinConcentrationNeeded(method) <= sampleConc) {
                    volumes.push(SiHttpUtil.CalculateSubmissionVolume(method, sampleConc));
                } else {
                    volumes.push(0);
                }
            }
        };
        $scope.removeMethod = function (list, volumes, index) {
            list.splice(index, 1);
            volumes.splice(index, 1);
        };

        $scope.m.statusFilter = {
            includeComplete: false,
            includeSubmitted: false
        };
        $scope.m.onStatusChange = function () {
            var table = $('#example').DataTable();
            var val = [];
            if ($scope.m.statusFilter.includeSubmitted) {
                val.push('Submitted');
            }
            if ($scope.m.statusFilter.includeComplete) {
                val.push('Completed');
            }
            table.columns(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'status')).search(val.join('|'), true, false).draw();
        };
        $scope.m.updateCalculations = function () {
            $scope.m.CreateForm.data.purifiedProtein = $scope.m.DependencyDisplayData.ListHash[$scope.m.CreateForm.data.proteinPurificationId].finalConcentration;
            $scope.m.CreateForm.data.proteinConcentration = $scope.m.CreateForm.data.purifiedProtein || $scope.m.CreateForm.data.concentrationOverride;
            $scope.m.CreateForm.data.reactionVolume = 50 / $scope.m.CreateForm.data.proteinConcentration;
            for (var i = 0; i < $scope.m.methodListToAdd.length; i++) {
                if ($scope.m.GetMinConcentrationNeeded($scope.m.methodListToAdd[i]) <= $scope.m.CreateForm.data.proteinConcentration) {
                    $scope.m.methodListVolumes[i] = SiHttpUtil.CalculateSubmissionVolume($scope.m.methodListToAdd[i], $scope.m.CreateForm.data.proteinConcentration);
                } else {
                    $scope.m.methodListVolumes[i] = 0;
                }
            }
            if ($scope.m.methodListToAdd.length > 0) {
                $scope.m.updateTotal();
            }
        };
        $scope.m.updateTotal = function () {
            $scope.m.CreateForm.data.totalSubmissionVolume = $scope.m.methodListVolumes.reduce(function (a, b) {
                return a + b;
            });
        };

        $scope.m.viewForm = {
            data: {},
            show: false,
            submitted: false,
            CancelTab: () => SiHttpUtil.HideTab($scope.m, $scope.m.viewForm)
        };
        $scope.m.editForm = {
            data: {},
            show: false,
            submitted: false,
            ui: {},
            CancelTab: () => SiHttpUtil.HideTab($scope.m, $scope.m.editForm),
            SubmitTab: function () {
                $scope.m.editForm.submitted = true;
                if (!$scope.m.editForm.ui.validate.$valid) {
                    console.error($scope.m.editForm.ui.validate);
                    return;
                }
                if ($scope.m.editForm.methodList.length < 1) {
                    SiHttpUtil.NotifyOperationErr("At least one method needs to be added.");
                } else {
                    SiHttpUtil.UpdateDataEntry({
                        tableName: "proteinAnalysisRequest",
                        id: $scope.m.editForm.id,
                        concentrationOverride: $scope.m.editForm.concentrationOverride,
                        methods: $scope.m.editForm.methodList.join(', '),
                        notes: $scope.m.editForm.notes,
                        updatedAt: $scope.m.editForm.updatedAt
                    }).then(resp => {
                        //SiHttpUtil.NotifyOk("Transfection " + $scope.m.editForm.id + " is updated successfully");
                        $scope.m.editForm.CancelTab();
                        $scope.m.RefreshData();
                        $scope.m.resetSelection();
                    });
                }
            },
            deleteRequest: function () {
                SiHttpUtil.DeleteDataEntry("proteinAnalysisRequest", $scope.m.editForm.id).then(resp => {
                    $scope.m.editForm.CancelTab();
                    $scope.m.RefreshData();
                    $scope.m.resetSelection();
                });
            }
        };

        $scope.m.CreateForm = {
            data: {},
            ui: {},
            submitted: false,
            ResetTab: function () {
                SiHttpUtil.ResetForm($scope.m.CreateForm);
                $scope.m.activeTab = "ViewAllTab";
                $scope.m.methodListToAdd = [];
                $scope.m.methodListVolumes = [];
            },
            SubmitTab: function () {
                $scope.m.CreateForm.submitted = true;
                if (!$scope.m.CreateForm.ui.validate.$valid) {
                    console.error($scope.m.CreateForm.ui.validate);
                    return;
                }
                if ($scope.m.methodListToAdd.length < 1) {
                    SiHttpUtil.NotifyOperationErr("At least one method needs to be added.");
                } else {
                    var NewEntry = {
                        tableName: "proteinAnalysisRequest",
                        proteinPurificationId: $scope.m.CreateForm.data.proteinPurificationId,
                        concentrationOverride: $scope.m.CreateForm.data.concentrationOverride,
                        methods: $scope.m.methodListToAdd.join(', '),
                        notes: $scope.m.CreateForm.data.notes
                    };
                    SiHttpUtil.CreateTableEntry(NewEntry).then(function (resp) {
                        if (resp.status == 200) {
                            $scope.m.CreateForm.ResetTab();
                            $scope.m.RefreshData();
                        }
                    });
                }
            }
        };

        $scope.m.BulkCreateForm = {
            data: {
                concentrationOverride: [],
                proteinConcentrations: []
            },
            ui: {},
            submitted: false,
            ResetTab: function () {
                SiHttpUtil.ResetForm($scope.m.BulkCreateForm);
                $scope.m.activeTab = "ViewAllTab";
                $scope.m.bulkVolumes = [];
                $scope.m.analysisRequestToAdd = [];
                $scope.m.BulkCreateForm.concentrationOverride = [];
                $scope.m.BulkCreateForm.proteinConcentrations = [];
            },
            SubmitTab: function () {
                $scope.m.BulkCreateForm.submitted = true;
                if (!$scope.m.BulkCreateForm.ui.validate.$valid) {
                    console.error($scope.m.BulkCreateForm.ui.validate);
                    return;
                }
                function AnalysisRequestEntry() {
                    return {
                        //proteinPurificationId: $scope.m.CreateForm.data.proteinPurificationId,
                        //concentrationOverride: $scope.m.CreateForm.data.concentrationOverride,
                        methods: $scope.m.BulkCreateForm.data.method,
                        notes: $scope.m.BulkCreateForm.data.notes
                    };
                };
                var newEntries = [];
                for (var i = 0; i < $scope.m.analysisRequestToAdd.length; i++) {
                    var temp = AnalysisRequestEntry();
                    temp.proteinPurificationId = $scope.m.analysisRequestToAdd[i];
                    temp.concentrationOverride = $scope.m.BulkCreateForm.data.concentrationOverride[i];
                    newEntries.push(temp);
                }
                var toCreate = {
                    tableName: "proteinAnalysisRequest",
                    list: newEntries
                };

                SiHttpUtil.CreateTableEntries(toCreate).then(function (resp) {
                    if (resp.status == 200) {
                        $scope.m.BulkCreateForm.ResetTab();
                        $scope.m.RefreshData();
                    }
                });
            }
        };

        $scope.m.ExportForm = {
            data: {},
            show: false,
            submitted: false,
            CancelTab: () => SiHttpUtil.HideTab($scope.m, $scope.m.viewForm),
            SubmitTab: function () {
                $scope.m.ExportForm.submitted = true;
                if (!$scope.m.ExportForm.ui.validate.$valid) {
                    console.error($scope.m.ExportForm.ui.validate);
                    return;
                }
                var columns = {
                    requestorUserId: $scope.m.ExportForm.data.requestorId,
                    methods: $scope.m.ExportForm.data.method,
                    sampleSubmissionDate: $scope.m.ExportForm.data.date.dt,
                    status: "Submitted"
                };
                if (!columns.requestorUserId && !columns.methods && !columns.sampleSubmissionDate) {
                    SiHttpUtil.NotifyOperationErr("At least one filter needs to be provided");
                } else {
                    $scope.m.RefreshExportData(columns);
                }
            }
        };
        $scope.m.RefreshExportData = columns => {
            if ($scope.m.DtExportInstCallback) {
                if ($scope.m.BulkExportData) {
                    $scope.m.DtExportInst.changeData($scope.m.initExportData(columns));
                } else {
                    $scope.m.initExportData(columns);
                }
            }
        };

        $scope.m.dtColumnsExport = [];
        $scope.m.initExportData = function (query) {
            return SiHttpUtil.SearchByColumn('proteinAnalysisRequest', query).then(function (resp) {
                return new Promise(function (resolve, reject) {
                    $scope.m.BulkExportData = resp.records;
                    if ($scope.m.BulkExportData) {
                        for (var j = 0; j < $scope.m.BulkExportData.length; j++) {
                            $scope.m.BulkExportData[j]['proteinConcentration'] = null;
                            $scope.m.BulkExportData[j]['submissionVolume'] = null;
                            $scope.m.BulkExportData[j]['reactionVolume'] = null;
                            if ($scope.m.BulkExportData[j].proteinPurificationId != null) {
                                var currP = $scope.m.DependencyDisplayData.ListHash[$scope.m.BulkExportData[j].proteinPurificationId];
                                $scope.m.BulkExportData[j]['proteinConcentration'] = $scope.m.BulkExportData[j].concentrationOverride || currP.purifiedProtein;
                                if ($scope.m.BulkExportData[j]['methods'] == "HPLC SEC" || $scope.m.BulkExportData[j]['methods'] == "MALS") {
                                    $scope.m.BulkExportData[j]['reactionVolume'] = Math.round(50 / $scope.m.BulkExportData[j]['proteinConcentration'] * 100) / 100;
                                } else $scope.m.BulkExportData[j]['reactionVolume'] = "N/A";
                                $scope.m.BulkExportData[j]['submissionVolume'] = Math.round(SiHttpUtil.CalculateSubmissionVolume($scope.m.BulkExportData[j]['methods'], $scope.m.BulkExportData[j]['proteinConcentration']) * 100) / 100;
                            }
                        }

                        if ($scope.m.dtColumnsExport.length == 0) {
                            SiHttpUtil.initDtColumns($scope.m.dtColumnsExport, $scope.m.BulkExportData, colName => SiHttpUtil.omitColumnForTable('proteinAnalysisRequestExport', colName), colName => SiHttpUtil.dbColumnTranslator('proteinAnalysisRequest', colName));
                        }

                        $scope.m.dtColDefsExport = [DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumnsExport, 'name')).withOption('type', 'natural'), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumnsExport, 'proteinPurificationId')).renderWith( // Operator.
                        SiUtil.ColDisplayers.GetHashConvertDisplayer($scope.m.DependencyDisplayData.Hash)).withOption('type', 'natural'), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumnsExport, 'requestorUserId')).renderWith( // Operator.
                        SiUtil.ColDisplayers.GetHashConvertDisplayer($scope.UserHash)), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumnsExport, 'sampleSubmissionDate')).renderWith(SiUtil.ColDisplayers.ShortDateDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumnsExport, 'notes')).notVisible(), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumnsExport, 'methods')).renderWith( //CreatedAt.
                        SiUtil.ColDisplayers.DescriptionDisplayer)];
                        if ($scope.m.ExportForm.data.method != "HPLC SEC" && $scope.m.ExportForm.data.method != "MALS" && $scope.m.ExportForm.data.method) {
                            $scope.m.dtColDefsExport.push(DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumnsExport, 'reactionVolume')).notVisible());
                        }

                        $scope.m.dtOptionsExport = SiHttpUtil.initDtOptions($scope.m.dtColumnsExport, $scope.m.BulkExportData, $scope.m.bulkRowCallback, function () {
                            resolve($scope.m.BulkExportData);
                            $scope.m.exportDataReady = true;
                        }).withColReorderOrder([0, 1, 3, 5, 6, 8, 7, 2, 4]);
                    }
                });
            });
        };
        $scope.m.DtExportInstCallback = function (inst) {
            console.log("dt:", inst);
            $scope.m.DtExportInst = inst;
        };

        $scope.m.ValidateCreateInput = (FieldName, Type) => SiHttpUtil.ValidateInput($scope.m.CreateForm.ui.validate, $scope.m.CreateForm.submitted, FieldName, Type);
        $scope.m.ValidateBulkCreateInput = (FieldName, Type) => SiHttpUtil.ValidateInput($scope.m.BulkCreateForm.ui.validate, $scope.m.BulkCreateForm.submitted, FieldName, Type);
        $scope.m.ValidateEditInput = (FieldName, Type) => SiHttpUtil.ValidateInput($scope.m.editForm.ui.validate, $scope.m.editForm.submitted, FieldName, Type);

        $scope.m.dp = SiUtil.dp.bind($scope.m)();
        $scope.m.dp.initDp('ExportForm', 'date', false);

        $scope.m.DtInstCallback = function (inst) {
            console.log("dt:", inst);
            $scope.m.DtInst = inst;
        };

        $scope.m.RefreshData = () => {
            if ($scope.m.DtInstCallback) {
                // NOTE(ww): DtInst could undefined when creating first data entry.
                if ($scope.m.DtInst) {
                    $scope.m.DtInst.changeData($scope.m.LoadDataList());
                } else {
                    $scope.m.LoadDataList().then(function () {
                        $scope.m.dataReady = true;
                        $scope.$digest();
                    });
                }
            }
        };

        SiHttpUtil.InitRowClick($scope);

        $scope.m.dtColumns = [];

        $scope.m.LoadDataList = function () {
            return SiHttpUtil.FetchTableEntries('proteinAnalysisRequest').then(function (resp) {
                // Support chaining to pass on to datatables..
                return new Promise(function (resolve, reject) {
                    $scope.m.tableData = resp.records;
                    if (resp.enums) {
                        var enumList = JSON.parse(resp.enums);
                        $scope.methods = enumList.ENUM_method;
                    }
                    if ($scope.m.tableData && $scope.m.tableData.length > 0) {

                        if ($scope.m.dtColumns.length == 0) {
                            SiHttpUtil.initDtColumns($scope.m.dtColumns, $scope.m.tableData, colName => SiHttpUtil.omitColumnForTable('proteinAnalysisRequest', colName), colName => SiHttpUtil.dbColumnTranslator('proteinAnalysisRequest', colName));
                        }

                        $scope.m.dtColDefs = [DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'proteinPurificationId')).renderWith( // Operator.
                        SiUtil.ColDisplayers.GetHashConvertDisplayer($scope.m.DependencyDisplayData.Hash)).withOption('type', 'natural'), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'concentrationOverride')).notVisible(), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'requestorUserId')).renderWith( // Operator.
                        SiUtil.ColDisplayers.GetHashConvertDisplayer($scope.UserHash)), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'sampleSubmissionDate')).renderWith(SiUtil.ColDisplayers.ShortDateDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'updatedAt')).renderWith( //CreatedAt.
                        SiUtil.ColDisplayers.ShortDateDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'notes')).renderWith( //CreatedAt.
                        SiUtil.ColDisplayers.DescriptionDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'methods')).renderWith( //CreatedAt.
                        SiUtil.ColDisplayers.DescriptionDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'status')).renderWith( //CreatedAt.
                        SiUtil.ColDisplayers.StatusDisplayer)];

                        $scope.m.dtOptions = SiHttpUtil.initDtOptions($scope.m.dtColumns, $scope.m.tableData, $scope.m.rowCallback, function () {
                            resolve($scope.m.tableData);
                            $scope.m.dataReady = true;
                            if ($scope.op == "view" && $scope.id) {
                                var records = $scope.m.tableData;
                                for (var i = 0; i < records.length; i++) {
                                    if (records[i].id == $scope.id) {
                                        $scope.m.currentRowData = records[i];
                                        break;
                                    }
                                }
                                $scope.m.viewDetail();
                            }
                            if ($scope.op == "create") {
                                var records = $scope.m.tableData;
                                $scope.m.activeTab = "CreateTab";
                            }
                        });
                    }
                });
            });
        };

        $scope.m.loadTableData = function () {
            $scope.m.LoadDataList();
        };

        // Copy model to views.
        $scope.m.viewDetail = function () {
            if ($scope.m.currentRowData) {
                $scope.m.viewForm.name = $scope.m.currentRowData.name;
                $scope.m.viewForm.proteinPurificationId = $scope.m.currentRowData.proteinPurificationId;

                $scope.m.viewForm.createdBy = $scope.UserHash[$scope.m.currentRowData.createdBy];
                $scope.m.viewForm.updatedBy = $scope.UserHash[$scope.m.currentRowData.updatedBy];
                $scope.m.viewForm.createdAt = SiUtil.getDateOnly($scope.m.currentRowData.createdAt);
                $scope.m.viewForm.updatedAt = SiUtil.getDateOnly($scope.m.currentRowData.updatedAt);

                $scope.m.viewForm.id = $scope.m.currentRowData.id;
                $scope.m.viewForm.methodList = $scope.m.currentRowData.methods.split(",").map(str => str.trim());
                $scope.m.viewForm.notes = $scope.m.currentRowData.notes;

                $scope.m.viewForm.sampleSubmissionDate = SiUtil.getDateOnly($scope.m.currentRowData.sampleSubmissionDate);
                $scope.m.viewForm.status = $scope.m.currentRowData.status;
                $scope.m.viewForm.requestorUser = $scope.UserHash[$scope.m.currentRowData.requestorUserId];
                $scope.m.viewForm.concentrationOverride = $scope.m.currentRowData.concentrationOverride;
                $scope.m.viewForm.purifiedProtein = $scope.m.viewForm.concentrationOverride || $scope.m.DependencyDisplayData.ListHash[$scope.m.viewForm.proteinPurificationId].finalConcentration || 0;
                $scope.m.viewForm.transfectionId = $scope.m.DependencyDisplayData.ListHash[$scope.m.viewForm.proteinPurificationId].transfectionId;
                $scope.m.viewForm.reactionVolume = 50 / $scope.m.viewForm.purifiedProtein;
                $scope.m.viewForm.methodListVolumes = [];
                for (var i = 0; i < $scope.m.viewForm.methodList.length; i++) {
                    if (SiHttpUtil.GetMinConcentrationNeeded($scope.m.viewForm.methodList[i]) <= $scope.m.viewForm.purifiedProtein) {
                        $scope.m.viewForm.methodListVolumes.push(SiHttpUtil.CalculateSubmissionVolume($scope.m.viewForm.methodList[i], $scope.m.viewForm.purifiedProtein));
                    } else {
                        $scope.m.viewForm.methodListVolumes.push(0);
                    }
                }
                $scope.m.viewForm.totalSubmissionVolume = $scope.m.viewForm.methodListVolumes.reduce(function (a, b) {
                    return a + b;
                });

                $scope.m.viewForm.currT = null;
                $scope.m.viewForm.nanoDrop = null;
                $scope.m.viewForm.currP = null;

                if ($scope.m.viewForm.transfectionId) {
                    SiHttpUtil.FetchOneEntry('transfection', $scope.m.viewForm.transfectionId).then(resp => {
                        $scope.m.viewForm.currT = resp.data;
                        if ($scope.m.viewForm.currT.trqId) {
                            SiHttpUtil.FetchOneEntry("transfectionRequest", $scope.m.viewForm.currT.trqId).then(resp => {
                                $scope.m.viewForm.nanoDrop = resp.data.molarExtCoefficient == null ? null : resp.data.molarExtCoefficient / resp.data.molecularWeight * 10;
                                if (resp.data.proteinId) {
                                    SiHttpUtil.FetchOneEntry("protein", resp.data.proteinId).then(resp => {
                                        $scope.m.viewForm.currP = resp.data;
                                    });
                                }
                            });
                        }
                    });
                }
                SiHttpUtil.FetchOneEntry("proteinAnalysisMapping", $scope.m.viewForm.id).then(resp => {
                    $scope.m.viewForm.analysisList = resp.data;
                });
                $scope.m.viewForm.show = true;
                $scope.m.activeTab = "DetailTab";
            }
        };

        $scope.m.editDetail = function () {
            if ($scope.m.currentRowData) {
                $scope.m.activeTab = "EditTab";
                $scope.m.editForm.name = $scope.m.currentRowData.name;
                $scope.m.editForm.proteinPurificationId = $scope.m.currentRowData.proteinPurificationId;
                $scope.m.editForm.id = $scope.m.currentRowData.id;

                $scope.m.editForm.concentrationOverride = $scope.m.currentRowData.concentrationOverride;
                $scope.m.editForm.concentrationOverrideOrg = $scope.m.currentRowData.concentrationOverride;
                $scope.m.editForm.methodList = $scope.m.currentRowData.methods.split(",").map(str => str.trim());
                $scope.m.editForm.notes = $scope.m.currentRowData.notes;
                $scope.m.editForm.updatedAt = $scope.m.currentRowData.updatedAt;

                $scope.m.editForm.sampleSubmissionDate = SiUtil.getDateOnly($scope.m.currentRowData.sampleSubmissionDate);
                $scope.m.editForm.status = $scope.m.currentRowData.status;
                $scope.m.editForm.requestorUserId = $scope.m.currentRowData.requestorUserId;

                $scope.m.editForm.show = true;
            }
        };

        $scope.m.DependencyList = [];
        $scope.m.DependencyListReady = false;
        $scope.m.DependencyDisplayData = {};

        var CacheDependency = SiHttpUtil.FetchTableEntries('proteinPurification').then(function (resp) {
            $scope.m.DependencyList = resp.records;
            $scope.m.DependencyDisplayData = SiHttpUtil.GetDependencyDisplayItemList($scope.m.DependencyList);
            $scope.m.DependencyListReady = true;
        });

        var deps = []; // Dependencies.
        deps.push(CacheDependency);
        Promise.all(deps).then(values => {
            $scope.m.LoadDataList();
        });
    }
})();

//Research
//ProteinAnalysis Controller
(function () {
    'use strict';

    angular.module('app.research').controller('ProteinAnalysisController', ProteinAnalysisController);

    ProteinAnalysisController.$inject = ['$scope', 'SiHttpUtil', 'DTOptionsBuilder', 'DTColumnBuilder', 'DTColumnDefBuilder', 'SiUtil', '$stateParams', '$state', '$http', 'Global'];

    function ProteinAnalysisController($scope, SiHttpUtil, DTOptionsBuilder, DTColumnBuilder, DTColumnDefBuilder, SiUtil, $stateParams, $state, $http, Global) {
        // Main model.
        $scope.global = Global;
        $scope.m = {};
        $scope.tableState.currentResearchTable = "proteinAnalysis";
        $scope.m.tableName = "proteinAnalysis";
        $scope.m.activeTab = "ViewAllTab";
        $scope.m.tableData = null;
        $scope.op = $stateParams.op;
        $scope.id = $stateParams.id;
        $scope.getDateOnly = SiUtil.getDateOnly;
        $scope.m.dataOnly = ['DLS', 'cIEF', 'MALS'];

        $scope.m.requestListToAdd = [];
        $scope.m.addAssociation = function (form, id) {
            if (form.proteinPurificationsToAdd.indexOf(id) > -1) {
                return;
            } else {
                form.proteinPurificationsToAdd.push(id);
            }
        };

        $scope.m.addPurification = function (form, id) {
            if (form.proteinPurifications.indexOf(id) > -1 || form.proteinPurificationsToAdd.indexOf(id) > -1) {
                SiHttpUtil.NotifyOperationErr("Purification already added");
            } else {
                form.proteinPurifications.push(id);
                $scope.m.addAssociation(form, id);
            }
        };

        $scope.m.addRequest = function (form, id) {
            if (form.proteinAnalysisRequests.indexOf(id) > -1) {
                SiHttpUtil.NotifyOperationErr("Request already added. Cannot be added again.");
            } else {
                form.proteinAnalysisRequests.push(id);
                var proteinPurificationId = $scope.m.ProteinAnalysisRequestDisplayData.ListHash[id].ProteinPurification.id;
                $scope.m.addAssociation(form, proteinPurificationId);
            }
        };

        $scope.m.removeAssociation = function (list, id) {
            list.splice(list.indexOf(id), 1);
            $scope.m.CreateForm.data.proteinPurificationsToAdd.splice($scope.m.CreateForm.data.proteinPurificationsToAdd.indexOf(id), 1);
        };
        $scope.m.addSECData = list => {
            if (list.length == 0) {
                for (var i = 0; i < $scope.m.CreateForm.data.proteinPurificationsToAdd.length; i++) {
                    list.push({
                        date: {
                            dt: new Date(),
                            opened: false
                        },
                        analyzedBy: SiHttpUtil.GetUserId(),
                        type: "Stability",
                        proteinPurificationId: $scope.m.CreateForm.data.proteinPurificationsToAdd[i]
                    });
                }
            } else {
                list.push({
                    date: {
                        dt: new Date(),
                        opened: false
                    },
                    analyzedBy: SiHttpUtil.GetUserId(),
                    type: "Stability"
                });
            }
        };

        $scope.m.removeData = (list, index) => {
            list.splice(index, 1);
        };

        $scope.m.initAnalysisRequests = () => {
            var query = { status: 'Submitted' };
            SiHttpUtil.SearchByColumn('proteinAnalysisRequest', query).then(function (resp) {
                $scope.m.ProteinAnalysisRequestList = resp;
                $scope.m.ProteinAnalysisRequestDisplayData = SiHttpUtil.GetDependencyList($scope.m.ProteinAnalysisRequestList);
                $scope.m.ProteinAnalysisRequestListReady = true;
            });
            SiHttpUtil.FetchIdNameMapping('proteinPurification').then(function (resp) {
                $scope.m.ProteinPurificationList = resp;
                $scope.m.ProteinPurificationDisplayData = SiHttpUtil.GetDependencyList($scope.m.ProteinPurificationList);
                $scope.m.ProteinPurificationListReady = true;
            });
            SiHttpUtil.FetchEnumList('proteinAnalysisRequests').then(function (resp) {
                $scope.m.analysisMethods = resp.ENUM_method;
                $scope.m.secTypes = resp.ENUM_secondarySECType;
            });
        };

        $scope.m.viewForm = {
            data: {},
            show: false,
            submitted: false,
            CancelTab: () => SiHttpUtil.HideTab($scope.m, $scope.m.viewForm)
        };
        $scope.m.editForm = {
            data: {},
            show: false,
            submitted: false,
            ui: {},
            CancelTab: () => SiHttpUtil.HideTab($scope.m, $scope.m.editForm),
            SubmitTab: function () {
                $scope.m.editForm.submitted = true;
                if (!$scope.m.editForm.ui.validate.$valid) {
                    console.error($scope.m.editForm.ui.validate);
                    return;
                }
                SiHttpUtil.UpdateDataEntry({
                    tableName: "proteinAnalysis",
                    id: $scope.m.editForm.id,
                    notes: $scope.m.editForm.notes,
                    method: $scope.m.editForm.method,
                    updatedAt: $scope.m.editForm.updatedAt,
                    references: $scope.m.editForm.references ? angular.toJson($scope.m.editForm.references) : null
                }).then(resp => {
                    $scope.m.editForm.CancelTab();
                    $scope.m.loadAll();
                    $scope.m.resetSelection();
                    $scope.m.RefreshData();
                });
            }
        };

        $scope.m.CreateForm = {
            data: {
                proteinPurifications: [],
                proteinPurificationsToAdd: [],
                proteinAnalysisRequests: []
            },
            ui: {},
            submitted: false,
            initTab: function () {
                $scope.m.initAnalysisRequests();
            },
            ResetTab: function () {
                SiHttpUtil.ResetForm($scope.m.CreateForm);
                $scope.m.CreateForm.data.proteinPurifications = [];
                $scope.m.CreateForm.data.proteinPurificationsToAdd = [];
                $scope.m.CreateForm.data.proteinAnalysisRequests = [];
                $scope.m.activeTab = "ViewAllTab";
                $scope.m.initAnalysisRequests();
            },
            dpOpen: function ($event, input) {
                $event.preventDefault();
                $event.stopPropagation();
                input.opened = !input.opened;
            },
            addData: function (form) {
                if (!$scope.m.CreateForm.data[form]) {
                    $scope.m.CreateForm.data[form] = [];
                }
                const entry = {
                    date: {
                        dt: new Date()
                    },
                    analyzedBy: SiHttpUtil.GetUserId()
                };
                $scope.m.CreateForm.data[form].push(entry);
            },
            removeData: function (form, index) {
                $scope.m.CreateForm.data[form].splice(index, 1);
            },
            copyData: function (form, column, date) {
                const len = $scope.m.CreateForm.data[form].length;
                const data = $scope.m.CreateForm.data[form][0][column];
                const entry = date ? data.dt : data;
                for (let i = 0; i < len; i++) {
                    if (date) {
                        $scope.m.CreateForm.data[form][i][column].dt = entry;
                    } else {
                        $scope.m.CreateForm.data[form][i][column] = entry;
                    }
                }
            },
            parseCSV: function () {
                var formData = new FormData();
                $scope.m.ShowImportBtn = false;
                if ($scope.m.CreateForm.data.method == "HPLC SEC") {
                    $scope.m.CreateForm.data.SECData = [];
                    $scope.m.CreateForm.data.proteinPurificationsToAdd = [];
                    $scope.m.CreateForm.data.proteinPurifications = [];
                    formData.append('file', document.getElementById('sec').files[0]);
                    SiHttpUtil.POSTRequest(SiHttpUtil.helperAPIUrl + "parsePurSECData/", formData).then(function (resp) {
                        SiHttpUtil.NotifyOk("Please review data changes");
                        for (var i = 0; i < resp.length; i++) {
                            const curr = resp[i];
                            $scope.m.CreateForm.data.proteinPurificationsToAdd.push(parseInt(curr.proteinPurificationId));
                            $scope.m.CreateForm.data.proteinPurifications.push(parseInt(curr.proteinPurificationId));
                            $scope.m.CreateForm.data.SECData.push({
                                proteinPurificationId: parseInt(curr.proteinPurificationId),
                                mp: parseFloat(curr.mp),
                                lmw: parseFloat(curr.lmw),
                                hmw: parseFloat(curr.hmw),
                                date: {
                                    dt: new Date(curr.date),
                                    opened: false
                                },
                                analyzedBy: parseInt(curr.analyzedBy),
                                instrument: curr.instrument,
                                type: "Stability"
                            });
                        }
                    }, function (err) {
                        SiHttpUtil.NotifyOperationErr("CSV Parse Error");
                        $scope.m.ShowImportBtn = true;
                    });
                } else if ($scope.m.CreateForm.data.method == "DLS") {
                    $scope.m.CreateForm.data.DLSData = [];
                    formData.append('file', document.getElementById('dls').files[0]);
                    SiHttpUtil.POSTRequest(SiHttpUtil.helperAPIUrl + "parseDLSData/", formData).then(function (resp) {
                        SiHttpUtil.NotifyOk("Please review data changes");
                        for (var i = 0; i < resp.length; i++) {
                            const curr = resp[i];
                            $scope.m.CreateForm.data.DLSData.push({
                                proteinPurificationId: parseInt(curr.proteinPurificationId),
                                diameter: parseFloat(curr.diamater),
                                pd: parseFloat(curr.pd),
                                molecularWeight: parseFloat(curr.molecularWeight),
                                aggregate: parseFloat(curr.aggregate),
                                meltingTemp: parseFloat(curr.meltingTemp),
                                analyzedBy: SiHttpUtil.GetUserId(),
                                date: {
                                    dt: new Date(),
                                    opened: false
                                }
                            });
                        }
                    }, function (err) {
                        SiHttpUtil.NotifyOperationErr("CSV Parse Error");
                        $scope.m.ShowImportBtn = true;
                    });
                } else if ($scope.m.CreateForm.data.method == "MALS") {
                    $scope.m.CreateForm.data.MALSData = [];
                    formData.append('file', document.getElementById('mals').files[0]);
                    SiHttpUtil.POSTRequest(SiHttpUtil.helperAPIUrl + "parseMALSData/", formData).then(function (resp) {
                        SiHttpUtil.NotifyOk("Please review data changes");
                        for (var i = 0; i < resp.length; i++) {
                            const curr = resp[i];
                            $scope.m.CreateForm.data.MALSData.push({
                                proteinPurificationId: parseInt(curr.proteinPurificationId),
                                peakNum: parseInt(curr.peakNum),
                                massFraction: parseFloat(curr.massFraction),
                                molecularWeight: parseFloat(curr.molecularWeight),
                                uncertainty: parseFloat(curr.uncertainty),
                                analyzedBy: SiHttpUtil.GetUserId(),
                                date: {
                                    dt: new Date(),
                                    opened: false
                                }
                            });
                        }
                    }, function (err) {
                        SiHttpUtil.NotifyOperationErr("CSV Parse Error");
                        $scope.m.ShowImportBtn = true;
                    });
                } else if ($scope.m.CreateForm.data.method == "cIEF") {
                    $scope.m.CreateForm.data.cIEFData = [];
                    formData.append('file', document.getElementById('cIEF').files[0]);
                    SiHttpUtil.POSTRequest(SiHttpUtil.helperAPIUrl + "parseCIEFData/", formData).then(function (resp) {
                        SiHttpUtil.NotifyOk("Please review data changes");
                        for (var i = 0; i < resp.length; i++) {
                            const curr = resp[i];
                            $scope.m.CreateForm.data.cIEFData.push({
                                proteinPurificationId: parseInt(curr.proteinPurificationId),
                                mp: parseFloat(curr.mp),
                                rangeHigh: parseFloat(curr.rangeHigh),
                                rangeLow: parseFloat(curr.rangeLow),
                                sharp: curr.sharp,
                                analyzedBy: SiHttpUtil.GetUserId(),
                                date: {
                                    dt: new Date(),
                                    opened: false
                                }
                            });
                        }
                    }, function (err) {
                        SiHttpUtil.NotifyOperationErr("CSV Parse Error");
                        $scope.m.ShowImportBtn = true;
                    });
                }
            },
            SubmitTab: function () {
                $scope.m.CreateForm.submitted = true;
                if (!$scope.m.CreateForm.ui.validate.$valid) {
                    console.error($scope.m.CreateForm.ui.validate);
                    return;
                }
                const dataLists = ['SECData', 'DLSData', 'MALSData', 'cIEFData', 'CESDSData', 'ThermalData'];
                const formatted = {};
                for (let i = 0; i < dataLists.length; i++) {
                    const currList = dataLists[i];
                    if ($scope.m.CreateForm.data[currList] && $scope.m.CreateForm.data[currList].length) {
                        formatted[currList] = [];
                        for (let j = 0; j < $scope.m.CreateForm.data[currList].length; j++) {
                            const entry = $scope.m.CreateForm.data[currList][j];
                            // CE-SDS and Thermal Data add to purificationsToAdd
                            if (i > 3) {
                                $scope.m.CreateForm.data.proteinPurificationsToAdd.push(entry.proteinPurificationId);
                            }
                            entry.date = entry.date.dt;
                            formatted[currList].push(entry);
                        }
                    }
                }

                if ($scope.m.CreateForm.data.proteinPurificationsToAdd.length == 0 && !$scope.m.dataOnly.includes($scope.m.CreateForm.data.method)) {
                    SiHttpUtil.NotifyOperationErr("No purifications linked. Check form.");
                    return;
                }

                const NewEntry = {
                    tableName: "proteinAnalysis",
                    proteinPurifications: $scope.m.CreateForm.data.proteinPurificationsToAdd,
                    method: $scope.m.CreateForm.data.method,
                    SECData: formatted.SECData,
                    DLSData: formatted.DLSData,
                    MALSData: formatted.MALSData,
                    cIEFData: formatted.cIEFData,
                    ThermalData: formatted.ThermalData,
                    CESDSData: formatted.CESDSData,
                    notes: $scope.m.CreateForm.data.notes
                };
                if ($scope.m.CreateForm.data.references && ($scope.m.CreateForm.data.references.files.length || $scope.m.CreateForm.data.references.links.length)) {
                    NewEntry.references = angular.toJson($scope.m.CreateForm.data.references);
                }
                SiHttpUtil.CreateTableEntry(NewEntry).then(function (resp) {
                    if (resp.status == 200) {
                        $scope.m.CreateForm.ResetTab();
                        $scope.m.RefreshData();
                    }
                });
            }
        };

        $scope.m.dp = SiUtil.dp.bind($scope.m)();

        $scope.m.InitSECHandler = () => SiHttpUtil.InitJqueryImportCSVChangeHandler($scope, 'sec');
        $scope.m.InitDLSHandler = () => SiHttpUtil.InitJqueryImportCSVChangeHandler($scope, 'dls');
        $scope.m.InitMALSHandler = () => SiHttpUtil.InitJqueryImportCSVChangeHandler($scope, 'mals');
        $scope.m.InitCIEFHandler = () => SiHttpUtil.InitJqueryImportCSVChangeHandler($scope, 'cIEF');

        $scope.m.updateProteinAnalysisRequest = (requestId, status) => {
            SiHttpUtil.UpdateDataEntry({
                id: requestId,
                tableName: "proteinAnalysisRequest",
                status: status,
                updatedAt: $scope.m.ProteinAnalysisRequestDeisplayData.ListHash[requestId].updatedAt
            }).then(function (response) {
                $scope.m.loadAll();
            }, function (error) {
                console.error("updateEntry error:", error);
            });
        };

        $scope.m.ValidateCreateInput = (FieldName, Type) => SiHttpUtil.ValidateInput($scope.m.CreateForm.ui.validate, $scope.m.CreateForm.submitted, FieldName, Type);
        $scope.m.ValidateEditInput = (FieldName, Type) => SiHttpUtil.ValidateInput($scope.m.editForm.ui.validate, $scope.m.editForm.submitted, FieldName, Type);

        $scope.m.DtInstCallback = function (inst) {
            console.log("dt:", inst);
            $scope.m.DtInst = inst;
        };

        $scope.m.RefreshData = () => {
            if ($scope.m.DtInstCallback) {
                if ($scope.m.DtInst) {
                    $scope.m.DtInst.changeData($scope.m.LoadProteinAnalysisList());
                } else {
                    $scope.m.LoadProteinAnalysisList().then(function () {
                        $scope.m.dataReady = true;
                        $scope.$digest();
                    });
                }
            }
        };

        SiHttpUtil.InitRowClick($scope);

        $scope.m.dtColumns = [];

        $scope.m.LoadProteinAnalysisList = function () {
            return SiHttpUtil.FetchTableEntries('proteinAnalysis').then(function (resp) {
                return new Promise(function (resolve, reject) {
                    $scope.m.tableData = resp.records;
                    $scope.enums = JSON.parse(resp.enums);
                    $scope.sectionNames = $scope.enums.ENUM_analysisSectionName;
                    if ($scope.m.tableData && $scope.m.tableData.length > 0) {
                        if ($scope.m.dtColumns.length == 0) {
                            SiHttpUtil.initDtColumns($scope.m.dtColumns, $scope.m.tableData, colName => SiHttpUtil.omitColumnForTable('proteinAnalysis', colName), colName => SiHttpUtil.dbColumnTranslator('proteinAnalysis', colName), colName => SiHttpUtil.hideColumnForTable('proteinAnalysis', colName), SiHttpUtil.tableOrder('proteinAnalysis'));
                        }

                        $scope.m.dtColDefs = [DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'createdBy')).renderWith( // Operator.
                        SiUtil.ColDisplayers.GetHashConvertDisplayer($scope.UserHash)), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'notes')).renderWith( // Operator.
                        SiUtil.ColDisplayers.DescriptionDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'purifications')).renderWith(SiUtil.ColDisplayers.DescriptionDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'updatedAt')).renderWith( //CreatedAt.
                        SiUtil.ColDisplayers.ShortDateDisplayer)];
                        $scope.m.dtOptions = SiHttpUtil.initDtOptions($scope.m.dtColumns, $scope.m.tableData, $scope.m.rowCallback, function () {
                            resolve($scope.m.tableData);
                            $scope.m.dataReady = true;
                            if ($scope.op == "view" && $scope.id) {
                                var records = $scope.m.tableData;
                                for (var i = 0; i < records.length; i++) {
                                    if (records[i].id == $scope.id) {
                                        $scope.m.currentRowData = records[i];
                                        break;
                                    }
                                }
                                $scope.m.viewDetail();
                            }
                            if ($scope.op == "create") {
                                $scope.m.activeTab = "CreateTab";
                            }
                        });
                    }
                });
            });
        };

        // Copy model to views.
        $scope.m.viewDetail = function () {
            if ($scope.m.currentRowData) {
                SiHttpUtil.FetchOneEntry('proteinAnalysis', $scope.m.currentRowData.id).then(function (resp) {
                    $scope.m.viewForm.ProteinPurifications = resp.ProteinPurifications;
                });
                $scope.m.viewForm.name = $scope.m.currentRowData.name;
                $scope.m.viewForm.method = $scope.m.currentRowData.method;

                $scope.m.viewForm.createdBy = $scope.UserHash[$scope.m.currentRowData.createdBy];
                $scope.m.viewForm.updatedBy = $scope.UserHash[$scope.m.currentRowData.updatedBy];
                $scope.m.viewForm.createdAt = SiUtil.getDateOnly($scope.m.currentRowData.createdAt);
                $scope.m.viewForm.updatedAt = SiUtil.getDateOnly($scope.m.currentRowData.updatedAt);
                $scope.m.viewForm.references = angular.fromJson($scope.m.currentRowData.references);
                $scope.m.viewForm.refInit();

                $scope.m.viewForm.notes = $scope.m.currentRowData.notes;
                $scope.m.viewForm.show = true;
                $scope.m.activeTab = "DetailTab";
            }
        };

        $scope.m.editDetail = function () {
            if ($scope.m.currentRowData) {
                $scope.m.initAnalysisRequests();
                $scope.m.activeTab = "EditTab";
                $scope.m.editForm.id = $scope.m.currentRowData.id;
                $scope.m.editForm.name = $scope.m.currentRowData.name;
                $scope.m.editForm.method = $scope.m.currentRowData.method;
                $scope.m.editForm.references = angular.fromJson($scope.m.currentRowData.references);
                $scope.m.editForm.notes = $scope.m.currentRowData.notes;
                $scope.m.editForm.updatedAt = $scope.m.currentRowData.updatedAt;

                $scope.m.editForm.show = true;
            }
        };

        $scope.m.loadAll = function () {
            var deps = []; // Dependencies.
            Promise.all(deps).then(values => {
                $scope.m.LoadProteinAnalysisList();
            });
        };

        $scope.m.loadAll();
    }
})();

//Research
//ProteinSummaryController Controller
(function () {
    'use strict';

    angular.module('app.research').controller('ProteinSummaryController', ProteinSummaryController);

    ProteinSummaryController.$inject = ['$scope', 'SiHttpUtil', 'DTOptionsBuilder', 'DTColumnBuilder', 'DTColumnDefBuilder', '$http', 'SiUtil', '$uibModal', '$state', '$stateParams'];

    function ProteinSummaryController($scope, SiHttpUtil, DTOptionsBuilder, DTColumnBuilder, DTColumnDefBuilder, $http, SiUtil, $uibModal, $state, $stateParams) {
        // Main model.
        $scope.m = {};
        $scope.tableState.currentResearchTable = "proteinSummary";
        $scope.m.tableName = "proteinSummary";
        $scope.m.activeTab = "ViewAllTab";
        $scope.m.tableData = null;
        $scope.id = $stateParams.id;
        $scope.op = $stateParams.op;
        $scope.getDateOnly = SiUtil.getDateOnly;
        $scope.getFormattedStatus = SiUtil.getFormattedStatus;

        $scope.m.viewForm = {
            tree_handler: function (branch) {
                if (branch.label != "No Associated Data") {
                    $scope.m.viewForm.selectedUrl = "#!/app/research/" + branch.data.tableurl + "?op=view&id=" + branch.data.id;
                    $scope.m.viewForm.selectedItem = branch.label;
                }
            },
            treeControl: {},
            treedata: [],
            data: {},
            loadTree: function () {
                $http({
                    url: SiHttpUtil.helperAPIUrl + "proteintree/" + $scope.m.viewDetail.id,
                    method: "GET"
                }).then(function (response) {
                    $scope.m.viewForm.treedata = response.data;
                    if ($scope.m.viewForm.treedata.length == 0) {
                        $scope.m.viewForm.treedata = [{
                            label: "No Associated Data"
                        }];
                        $scope.m.viewForm.treeControl.expand_all();
                    }
                });
            }
        };

        $scope.m.dp = SiUtil.dp.bind($scope.m)();

        $scope.m.DtInstCallback = function (inst) {
            console.log("dt:", inst);
            $scope.m.DtInst = inst;
        };

        SiHttpUtil.InitRowClick($scope);

        $scope.m.dtColumns = [];

        $scope.m.statusFilter = {
            includePurified: false,
            includeNotPurified: false
        };

        $scope.m.onStatusChange = function () {
            var table = $('#proteinSummary').DataTable();
            var val = [];
            if ($scope.m.statusFilter.includePurified) {
                val.push('^(?!(Not)).*Purified');
            }
            if ($scope.m.statusFilter.includeNotPurified) {
                val.push('Not Purified');
            }
            table.columns(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'purified')).search(val.join('|'), true, false).draw();
        };

        $scope.m.LoadDataList = function () {
            return SiHttpUtil.FetchTableEntries('proteinSummary').then(function (response) {
                return new Promise(function (resolve, reject) {
                    $scope.m.tableData = response.records;
                    if ($scope.m.tableData && $scope.m.tableData.length > 0) {
                        if ($scope.m.dtColumns.length == 0) {
                            SiHttpUtil.initDtColumns($scope.m.dtColumns, $scope.m.tableData, colName => SiHttpUtil.omitColumnForTable('proteinSummary', colName), colName => SiHttpUtil.dbColumnTranslator('proteinSummary', colName), colName => SiHttpUtil.hideColumnForTable('proteinSummary', colName));
                        }

                        $scope.m.dtColDefs = [DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'transfections')).withOption("type", "natural").renderWith(SiUtil.ColDisplayers.DescriptionDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'purifications')).withOption("type", "natural").renderWith(SiUtil.ColDisplayers.DescriptionDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'description')).renderWith(SiUtil.ColDisplayers.DescriptionDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'purificationDate')).renderWith(SiUtil.ColDisplayers.ShortDateDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'projectDescription')).notVisible(), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'plasmidDescription')).notVisible(), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'purified')).renderWith(SiUtil.ColDisplayers.StatusDisplayer)];

                        $scope.m.dtOptions = SiHttpUtil.initDtOptions($scope.m.dtColumns, $scope.m.tableData, $scope.m.rowCallback, function () {
                            resolve($scope.m.tableData);
                            $scope.m.dataReady = true;
                            if ($scope.op == "view" && $scope.id) {
                                var records = $scope.m.tableData;
                                for (var i = 0; i < records.length; i++) {
                                    if (records[i].id == $scope.id) {
                                        $scope.m.currentRowData = records[i];
                                        break;
                                    }
                                }
                                $scope.m.viewDetail();
                            }
                        }).withButtons([{
                            extend: 'colvis',
                            text: 'Columns'
                        }, {
                            extend: 'csv',
                            filename: 'export',
                            text: 'Export CSV'
                        }, {
                            extend: 'excelHtml5',
                            filename: 'export',
                            text: 'Export Excel'
                        }, {
                            extend: 'print',
                            title: "",
                            text: 'Print',
                            exportOptions: {
                                columns: ':visible'
                            }
                        }, {
                            text: '<i class="fas fa-sync"></i>',
                            action: function (e, dt, node, config) {
                                $scope.m.RefreshData();
                            }
                        }]);
                    }
                });
            });
        };

        $scope.m.RefreshData = () => {
            if ($scope.m.DtInstCallback) {
                if ($scope.m.DtInst) {
                    $scope.m.DtInst.changeData($scope.m.LoadDataList());
                } else {
                    $scope.m.LoadDataList().then(function () {
                        $scope.m.dataReady = true;
                        $scope.$digest();
                    });
                }
            }
        };

        // Copy model to views.
        $scope.m.viewDetail = function () {
            var modalInstance = $uibModal.open({
                animation: true,
                scope: $scope,
                templateUrl: 'viewDetails.html',
                size: 'lg',
                controller: function ($scope) {
                    $scope.m.close = function () {
                        modalInstance.close();
                    };
                    if ($scope.m.currentRowData) {
                        $scope.m.viewDetail.id = $scope.m.currentRowData.id;
                        $state.go('app.research.proteinSummary', { op: 'view', id: $scope.m.viewDetail.id }, {
                            notify: false,
                            reload: false,
                            location: 'replace'
                        });
                        SiHttpUtil.FetchOneEntry('proteinSummary', $scope.m.viewDetail.id).then(resp => {
                            $scope.m.viewForm.data = angular.copy(resp);
                        });
                        $scope.m.viewForm.treedata = [];
                        $scope.m.viewForm.selectedUrl = null;
                        $scope.m.viewForm.selectedItem = null;
                        $scope.m.viewForm.loadTree();
                    }
                }
            });
            modalInstance.result.then(function () {
                $state.go('app.research.proteinSummary', {}, { notify: false, inherit: false });
            }, function () {
                $state.go('app.research.proteinSummary', {}, { notify: false, inherit: false });
            });
        };

        $scope.m.LoadDataList();
    }
})();

//Research
//Protein Inventory Controller
(function () {
    'use strict';

    angular.module('app.research').controller('ProteinRequestController', ProteinRequestController);

    ProteinRequestController.$inject = ['$scope', 'SiHttpUtil', 'DTOptionsBuilder', 'DTColumnBuilder', 'DTColumnDefBuilder', 'SiUtil', '$stateParams'];

    function ProteinRequestController($scope, SiHttpUtil, DTOptionsBuilder, DTColumnBuilder, DTColumnDefBuilder, SiUtil, $stateParams) {
        // Main model.
        $scope.m = {
            tableData: []
        };
        $scope.tableState.currentResearchTable = "proteinRequest";
        $scope.m.activeTab = "ViewAllTab";
        $scope.op = $stateParams.op;
        $scope.id = $stateParams.id;

        $scope.m.statusFilter = {
            includeSubmitted: true,
            includeCompleted: false,
            includeDenied: false
        };

        $scope.m.getQuery = () => {
            var query = {
                $or: []
            };
            if ($scope.m.statusFilter.includeSubmitted) {
                query.$or.push({ requestStatus: 'Submitted' });
            }
            if ($scope.m.statusFilter.includeCompleted) {
                query.$or.push({ requestStatus: 'Completed' });
            }
            if ($scope.m.statusFilter.includeDenied) {
                query.$or.push({ requestStatus: 'Denied' });
            }
            if (query.$or.length == 0) {
                query = {};
            }
            $scope.m.query = query;
        };

        $scope.m.onStatusChange = function () {
            $scope.m.getQuery();
            $scope.m.RefreshData();
        };

        $scope.m.viewForm = SiHttpUtil.InitViewForm($scope.m);

        $scope.m.editForm = {
            show: false,
            submitted: false,
            ui: {},
            data: {},
            CancelTab: () => SiHttpUtil.HideTab($scope.m, $scope.m.editForm),
            DenyReq: () => {
                SiHttpUtil.UpdateDataEntry({
                    tableName: "proteinRequest",
                    id: $scope.m.currentRowData.id,
                    denied: true,
                    requestStatus: "Denied",
                    updatedAt: $scope.m.editForm.data.updatedAt
                }).then(resp => {
                    $scope.m.editForm.CancelTab();
                    $scope.m.RefreshData();
                    $scope.m.resetSelection();
                });
            },
            DeleteReq: () => {
                if (SiHttpUtil.GetUserId() === $scope.m.editForm.data.createdBy) {
                    SiHttpUtil.DeleteDataEntry("proteinRequest", $scope.m.currentRowData.id).then(resp => {
                        $scope.m.editForm.CancelTab();
                        $scope.m.RefreshData();
                        $scope.m.resetSelection();
                    });
                } else {
                    SiHttpUtil.NotifyOperationErr("You can only delete your own request");
                    return;
                }
            },
            SubmitTab: function () {
                $scope.m.editForm.submitted = true;
                if (!$scope.m.editForm.ui.validate.$valid) {
                    console.error($scope.m.EditForm.ui.validate);
                    return;
                }
                SiHttpUtil.UpdateDataEntry({
                    tableName: "proteinRequest",
                    id: $scope.m.editForm.data.id,
                    massAmount: $scope.m.editForm.data.massAmount,
                    volumeAmount: $scope.m.editForm.data.volumeAmount,
                    notes: $scope.m.editForm.data.notes,
                    updatedAt: $scope.m.editForm.data.updatedAt
                }).then(resp => {
                    if (resp.status == 200) {
                        $scope.m.editForm.CancelTab();
                        $scope.m.RefreshData();
                        $scope.m.resetSelection();
                    }
                });
            }
        };
        $scope.m.CreateFulfillmentForm = {
            data: {},
            show: false,
            requestsToUpdate: [],
            requestIds: [],
            submitted: false,
            ui: {},
            CancelTab: () => {
                SiHttpUtil.HideTab($scope.m, $scope.m.CreateFulfillmentForm), SiHttpUtil.ResetForm($scope.m.CreateFulfillmentForm);
                $scope.m.CreateFulfillmentForm.requestsToUpdate = [];
                $scope.m.CreateFulfillmentForm.requestIds = [];
            },
            initTab: () => {
                SiHttpUtil.SearchByColumn('proteinRequest', { requestStatus: 'Submitted' }).then(function (resp) {
                    $scope.m.RequestList = resp;
                    $scope.m.RequestDisplayData = SiHttpUtil.GetDependencyDisplayItemList($scope.m.RequestList);
                    $scope.m.RequestListReady = true;
                });
            },
            addAll: () => {
                for (var i = 0; i < $scope.m.RequestList.length; i++) {
                    $scope.m.CreateFulfillmentForm.addEntry($scope.m.RequestList[i].id);
                }
            },
            addEntry: reqId => {
                if ($scope.m.CreateFulfillmentForm.requestIds.indexOf(reqId) != -1) {
                    SiHttpUtil.NotifyOperationErr("Request already added");
                    return;
                }
                // Get related purifications from protein
                let query = { proteinId: $scope.m.RequestDisplayData.ListHash[reqId].proteinId };
                var entry = {
                    requestStatus: "Completed",
                    fulfillment: true,
                    id: reqId,
                    proteinPurificationId: $scope.m.RequestDisplayData.ListHash[reqId].proteinPurificationId,
                    volumeUsed: $scope.m.RequestDisplayData.ListHash[reqId].volumeRequested,
                    notes: $scope.m.RequestDisplayData.ListHash[reqId].notes,
                    updatedAt: $scope.m.RequestDisplayData.ListHash[reqId].updatedAt
                };
                SiHttpUtil.SearchByColumn('proteinRequest', query).then(resp => {
                    entry.purificationList = SiHttpUtil.GetDependencyDisplayItemList(resp);
                });
                $scope.m.CreateFulfillmentForm.requestsToUpdate.push(entry);
                $scope.m.CreateFulfillmentForm.requestIds.push(reqId);
            },
            removeEntry: index => {
                $scope.m.CreateFulfillmentForm.requestsToUpdate.splice(index, 1);
                $scope.m.CreateFulfillmentForm.requestIds.splice(index, 1);
            },
            SubmitTab: () => {
                $scope.m.CreateFulfillmentForm.submitted = true;
                if (!$scope.m.CreateFulfillmentForm.ui.validate.$valid) {
                    console.error($scope.m.CreateFulfillmentForm.ui.validate);
                    return;
                }

                SiHttpUtil.UpdateDataEntries({
                    tableName: "proteinRequest",
                    list: $scope.m.CreateFulfillmentForm.requestsToUpdate
                }).then(resp => {
                    $scope.m.CreateFulfillmentForm.CancelTab();
                    $scope.m.RefreshData();
                });
            }
        };

        $scope.m.CreateRequestForm = {
            data: {},
            ui: {},
            requestsToAdd: [],
            submitted: false,
            ResetTab: function () {
                SiHttpUtil.ResetForm($scope.m.CreateRequestForm);
                $scope.m.CreateRequestForm.requestsToAdd = [];
                $scope.m.activeTab = "ViewAllTab";
            },
            initTab: () => {
                SiHttpUtil.SearchByColumn('proteinRequest', { proteins: 'purified' }).then(function (resp) {
                    $scope.m.ProteinList = resp;
                    $scope.m.ProteinDisplayData = SiHttpUtil.GetDependencyDisplayItemList($scope.m.ProteinList);
                    $scope.m.ProteinListReady = true;
                });
                SiHttpUtil.SearchByColumn('proteinRequest', { purifications: 'yes' }).then(function (resp) {
                    $scope.m.PurificationList = resp;
                    $scope.m.PurificationDisplayData = SiHttpUtil.GetDependencyDisplayItemList($scope.m.PurificationList);
                    $scope.m.PurificationListReady = true;
                });
            },
            refreshPurifications: () => {
                var query = { proteinId: $scope.m.CreateRequestForm.data.proteinId };
                SiHttpUtil.SearchByColumn('proteinRequest', query).then(resp => {
                    $scope.m.CreateRequestForm.purificationList = resp;
                });
                $scope.m.CreateRequestForm.data.purificationPreference = null;
            },
            addEntry: type => {
                var volumeAmount, massAmount, purificationId, proteinId, concentration;
                if (type == "protein") {
                    proteinId = $scope.m.CreateRequestForm.data.proteinId;
                    purificationId = $scope.m.CreateRequestForm.data.purificationPreference.id;
                    concentration = $scope.m.CreateRequestForm.data.purificationPreference.finalConcentration;
                    volumeAmount = $scope.m.CreateRequestForm.data.pref1Volume;
                    massAmount = $scope.m.CreateRequestForm.data.pref1Mass;
                } else if (type == "purification") {
                    purificationId = $scope.m.CreateRequestForm.data.purificationId;
                    proteinId = $scope.m.PurificationDisplayData.ListHash[purificationId].Transfection.TransfectionRequest.Protein.id;
                    concentration = $scope.m.PurificationDisplayData.ListHash[purificationId].finalConcentration;
                    volumeAmount = $scope.m.CreateRequestForm.data.pref2Volume;
                    massAmount = $scope.m.CreateRequestForm.data.pref2Mass;
                }
                if (!volumeAmount && !massAmount) return;
                if (volumeAmount && massAmount) return;
                $scope.m.CreateRequestForm.requestsToAdd.push({
                    proteinPurificationId: purificationId,
                    proteinId: proteinId,
                    concentration: concentration,
                    massAmount: massAmount,
                    volumeAmount: volumeAmount,
                    requestStatus: "Submitted"
                });
                $scope.m.CreateRequestForm.data = {};
            },
            removeEntry: index => {
                $scope.m.CreateRequestForm.requestsToAdd.splice(index, 1);
            },
            SubmitTab: function () {
                $scope.m.CreateRequestForm.submitted = true;
                if (!$scope.m.CreateRequestForm.ui.validate.$valid) {
                    console.error($scope.m.CreateRequestForm.ui.validate);
                    return;
                }
                if ($scope.m.CreateRequestForm.requestsToAdd.length == 0) {
                    SiHttpUtil.NotifyOperationErr("Must add a request");
                    return;
                }
                var ProteinRequestEntry = {
                    tableName: "proteinRequest",
                    list: $scope.m.CreateRequestForm.requestsToAdd
                };
                SiHttpUtil.CreateTableEntries(ProteinRequestEntry).then(function (resp) {
                    if (resp.status == 200) {
                        $scope.m.CreateRequestForm.ResetTab();
                        $scope.m.RefreshData();
                    }
                });
            }
        };

        $scope.m.copyData = (form, element) => {
            var toCopy = form[0][element];
            for (var i = 0; i < form.length; i++) {
                form[i][element] = toCopy;
            }
        };

        $scope.m.ValidateCreateRequestInput = (FieldName, Type) => SiHttpUtil.ValidateInput($scope.m.CreateRequestForm.ui.validate, $scope.m.CreateRequestForm.submitted, FieldName, Type);
        $scope.m.ValidateEditInput = (FieldName, Type) => SiHttpUtil.ValidateInput($scope.m.editForm.ui.validate, $scope.m.editForm.submitted, FieldName, Type);

        $scope.m.dp = SiUtil.dp.bind($scope.m)();

        $scope.m.DtInstCallback = function (inst) {
            console.log("dt:", inst);
            $scope.m.DtInst = inst;
        };

        $scope.m.RefreshData = () => {
            if ($scope.m.DtInstCallback) {
                if ($scope.m.DtInst) {
                    $scope.m.DtInst.changeData($scope.m.LoadDataList());
                } else {
                    $scope.m.LoadDataList();
                }
            }
        };

        SiHttpUtil.InitRowClick($scope);

        $scope.m.dtColumns = [];

        $scope.m.LoadDataList = function () {
            return SiHttpUtil.SearchByColumn('proteinRequest', $scope.m.query).then(function (resp) {
                return new Promise(function (resolve, reject) {
                    $scope.m.tableData = resp;
                    if (resp.enums) {
                        var enumList = JSON.parse(resp.enums);
                    }
                    if ($scope.m.tableData && $scope.m.tableData.length > 0) {
                        if ($scope.m.dtColumns.length == 0) {
                            SiHttpUtil.initDtColumns($scope.m.dtColumns, $scope.m.tableData, colName => SiHttpUtil.omitColumnForTable('proteinRequest', colName), colName => SiHttpUtil.dbColumnTranslator('proteinRequest', colName), colName => SiHttpUtil.hideColumnForTable('proteinRequest', colName), SiHttpUtil.tableOrder('proteinRequest'));
                        }

                        $scope.m.dtColDefs = [DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'notes')).renderWith(SiUtil.ColDisplayers.DescriptionDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'requestStatus')).renderWith(SiUtil.ColDisplayers.StatusDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'createdBy')).renderWith(SiUtil.ColDisplayers.GetHashConvertDisplayer($scope.UserHash)), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'updatedAt')).renderWith(SiUtil.ColDisplayers.ShortDateDisplayer)];

                        $scope.m.dtOptions = SiHttpUtil.initDtOptions($scope.m.dtColumns, $scope.m.tableData, $scope.m.rowCallback, function () {
                            resolve($scope.m.tableData);
                            $scope.m.dataReady = true;
                            if ($scope.op == "view" && $scope.id) {
                                var records = $scope.m.tableData;
                                for (var i = 0; i < records.length; i++) {
                                    if (records[i].id == $scope.id) {
                                        $scope.m.currentRowData = records[i];
                                        break;
                                    }
                                }
                                $scope.m.viewDetail();
                            }
                            if ($scope.op == "create") {
                                var records = $scope.m.tableData;
                                if ($scope.id) $scope.m.CreateForm.data.transfectionId = $scope.id;
                                $scope.m.activeTab = "CreateTab";
                            }
                        });
                    } else {
                        resolve($scope.m.tableData);
                    }
                });
            });
        };

        $scope.m.viewDetail = function () {
            if ($scope.m.currentRowData) {
                $scope.m.viewForm.show = true;
                $scope.m.viewForm.data = angular.copy($scope.m.currentRowData);
                $scope.m.viewForm.data.createdAt = SiUtil.getDateOnly($scope.m.viewForm.data.createdAt);
                $scope.m.viewForm.data.updatedAt = SiUtil.getDateOnly($scope.m.viewForm.data.updatedAt);
                $scope.m.activeTab = "DetailTab";
            }
        };

        $scope.m.editDetail = function () {
            if ($scope.m.currentRowData) {
                $scope.m.activeTab = "EditTab";
                $scope.m.editForm.data = angular.copy($scope.m.currentRowData);
                $scope.m.editForm.show = true;
            }
        };

        $scope.m.loadAll = function () {
            var deps = [];
            $scope.m.getQuery();
            Promise.all(deps).then(values => {
                $scope.m.LoadDataList();
            });
        };

        $scope.m.loadAll();
    }
})();

//Binding Data Controller
(function () {
    'use strict';

    angular.module('app.research').controller('ProteinBindingDataController', ProteinBindingDataController);

    ProteinBindingDataController.$inject = ['$scope', 'SiHttpUtil', 'DTOptionsBuilder', 'DTColumnBuilder', 'DTColumnDefBuilder', 'SiUtil', '$stateParams'];

    function ProteinBindingDataController($scope, SiHttpUtil, DTOptionsBuilder, DTColumnBuilder, DTColumnDefBuilder, SiUtil, $stateParams) {
        // Main model.
        $scope.m = {
            tableData: null,
            dtColumns: [],
            tableName: "bindingData",
            activeTab: "ViewAllTab",
            op: $stateParams.op,
            id: $stateParams.id,
            DtInstCallback: inst => {
                $scope.m.DtInst = inst;
            },
            RefreshData: () => {
                if ($scope.m.DtInstCallback) {
                    if ($scope.m.DtInst) {
                        $scope.m.DtInst.changeData($scope.m.LoadDataList());
                    } else {
                        $scope.m.LoadDataList();
                    }
                }
            }
        };
        $scope.dl = SiHttpUtil.DownloadFile;

        $scope.getDateOnly = SiUtil.getDateOnly;
        $scope.m.viewForm = SiHttpUtil.InitViewForm($scope.m);
        $scope.tableState.currentTable = $scope.m.tableName;
        $scope.m.InitFileHandler = () => SiHttpUtil.InitJqueryImportCSVChangeHandler($scope, 'file');

        $scope.m.editForm = {
            data: {},
            show: false,
            submitted: false,
            ui: {},
            CancelTab: () => SiHttpUtil.HideTab($scope.m, $scope.m.editForm),
            Delete: () => {
                SiHttpUtil.DeleteDataEntry($scope.m.tableName, $scope.m.currentRowData.id).then(() => {
                    $scope.m.editForm.CancelTab();
                    $scope.m.RefreshData();
                });
            },
            SubmitTab: function () {
                $scope.m.editForm.submitted = true;
                if (!$scope.m.editForm.ui.validate.$valid) {
                    console.error($scope.m.EditForm.ui.validate);
                    return;
                }
                SiHttpUtil.UpdateDataEntry({
                    tableName: $scope.m.tableName,
                    id: $scope.m.editForm.data.id,
                    requesterId: $scope.m.editForm.data.requesterId,
                    requestDate: $scope.m.editForm.data.requestDate.dt,
                    priority: $scope.m.editForm.data.priority,
                    sequenceReviewed: $scope.m.editForm.data.sequenceReviewed,
                    designed: $scope.m.editForm.data.designed,
                    cloned: $scope.m.editForm.data.cloned,
                    maxiprep: $scope.m.editForm.data.maxiprep,
                    verified: $scope.m.editForm.data.verified
                }).then(resp => {
                    if (resp.status === 200) {
                        $scope.m.editForm.CancelTab();
                        $scope.m.RefreshData();
                    }
                });
            }
        };

        $scope.m.CreateForm = {
            data: {},
            ui: {},
            submitted: false,
            initTab: () => {
                $scope.m.dp.initDp('CreateForm', 'requestDate', true);
                SiHttpUtil.FetchIdNameMapping('plasmids').then(resp => {
                    $scope.m.PlasmidList = resp;
                    $scope.m.PlasmidDisplayData = SiHttpUtil.GetDependencyDisplayItemList($scope.m.PlasmidList);
                });
            },
            ResetTab: function () {
                SiHttpUtil.ResetForm($scope.m.CreateForm);
                $scope.m.dp.initDp('CreateForm', 'requestDate', true);
                $scope.m.activeTab = "ViewAllTab";
            },
            SubmitTab: function () {
                $scope.m.CreateForm.submitted = true;
                if (!$scope.m.CreateForm.ui.validate.$valid) {
                    console.error($scope.m.CreateForm.ui.validate);
                    return;
                }
                const RequestEntry = {
                    tableName: $scope.m.tableName,
                    plasmidId: $scope.m.CreateForm.data.plasmidId,
                    requesterId: $scope.m.CreateForm.data.requesterId,
                    requestDate: $scope.m.CreateForm.data.requestDate.dt,
                    priority: $scope.m.CreateForm.data.priority
                };
                SiHttpUtil.CreateTableEntry(RequestEntry).then(function (resp) {
                    if (resp.status === 200) {
                        $scope.m.CreateForm.ResetTab();
                        $scope.m.RefreshData();
                    }
                });
            }
        };

        $scope.m.UploadForm = {
            data: {
                BindingData: []
            },
            ui: {},
            submitted: false,
            initTab: () => {
                SiHttpUtil.FetchIdNameMapping('proteinPurification').then(resp => {
                    $scope.m.PurificationDisplayData = SiHttpUtil.GetDependencyDisplayItemList(resp);
                });
                SiHttpUtil.FetchIdNameMapping('transfection').then(resp => {
                    $scope.m.TransfectionDisplayData = SiHttpUtil.GetDependencyDisplayItemList(resp);
                });
            },
            ResetTab: function () {
                SiHttpUtil.ResetForm($scope.m.UploadForm);
                $scope.m.UploadForm.data.BindingData = [];
                $scope.m.activeTab = "ViewAllTab";
            },
            removeEntry: index => {
                $scope.m.UploadForm.data.BindingData.splice(index, 1);
            },
            parseCSV: function () {
                var formData = new FormData();
                $scope.m.ShowImportBtn = false;
                formData.append('file', document.getElementById('file').files[0]);
                formData.append('option', $scope.m.UploadForm.option);
                SiHttpUtil.POSTRequest(SiHttpUtil.helperAPIUrl + "parseBindingData/", formData).then(function (resp) {
                    SiHttpUtil.NotifyOk("Please review data changes");
                    for (let i = 0; i < resp.length; i++) {
                        const curr = resp[i];
                        $scope.m.UploadForm.data.BindingData.push({
                            purificationId: parseInt(curr.purificationId),
                            transfectionId: parseInt(curr.transfectionId),
                            type: $scope.m.UploadForm.option == 'Loading' ? 'Affinity' : 'Avidity',
                            sensorType: curr.sensorType,
                            sensorId: curr.sensorId,
                            loadingSensorId: curr.loadingSensorId,
                            concentration: parseFloat(curr.concentration),
                            response: parseFloat(curr.response),
                            kd: parseFloat(curr.kd),
                            kdError: parseFloat(curr.kdError),
                            kon: parseFloat(curr.kon),
                            konError: parseFloat(curr.konError),
                            kdis: parseFloat(curr.kdis),
                            kdisError: parseFloat(curr.kdisError),
                            rMax: parseFloat(curr.rMax),
                            rMaxError: parseFloat(curr.rMaxError),
                            kobs: parseFloat(curr.kobs),
                            req: parseFloat(curr.req),
                            fullX2: parseFloat(curr.fullX2),
                            fullR2: parseFloat(curr.fullR2),
                            fittingType: curr.fittingType,
                            modelType: curr.modelType,
                            instrumentType: curr.instrumentType,
                            associationStart: curr.associationStart,
                            associationEnd: curr.associationEnd,
                            disassociationStart: curr.disassociationStart,
                            disassociationEnd: curr.disassociationEnd,
                            startDate: new Date(curr.startDate)
                        });
                    }
                }, function (err) {
                    SiHttpUtil.NotifyOperationErr("CSV Parse Error: " + err);
                    $scope.m.ShowImportBtn = true;
                });
            },
            SubmitTab: function () {
                $scope.m.UploadForm.submitted = true;
                if (!$scope.m.UploadForm.ui.validate.$valid) {
                    console.error($scope.m.UploadForm.ui.validate);
                    return;
                }
                SiHttpUtil.UploadFile($scope.m.tableName, 'file').then(resp => {
                    const bindingData = $scope.m.UploadForm.data.BindingData.map(o => {
                        o.references = angular.toJson([resp.data]);return o;
                    });
                    const RequestEntry = {
                        tableName: $scope.m.tableName,
                        list: bindingData
                    };
                    SiHttpUtil.CreateTableEntries(RequestEntry).then(function (resp) {
                        if (resp.status === 200) {
                            $scope.m.UploadForm.ResetTab();
                            $scope.m.RefreshData();
                        }
                    });
                }, err => {
                    console.error(err);
                    return;
                });
            }
        };

        SiHttpUtil.InitRowClick($scope);

        $scope.m.ValidateCreateInput = (FieldName, Type) => SiHttpUtil.ValidateInput($scope.m.CreateForm.ui.validate, $scope.m.CreateForm.submitted, FieldName, Type);
        $scope.m.ValidateEditInput = (FieldName, Type) => SiHttpUtil.ValidateInput($scope.m.editForm.ui.validate, $scope.m.editForm.submitted, FieldName, Type);

        $scope.m.LoadDataList = function () {
            return SiHttpUtil.FetchTableEntries($scope.m.tableName).then(function (resp) {
                return new Promise(function (resolve, reject) {
                    $scope.m.tableData = resp.records;
                    if (resp.enums) {
                        var enumList = JSON.parse(resp.enums);
                        $scope.sectionNames = angular.copy(enumList.ENUM_packageSectionName);
                    }
                    if ($scope.m.tableData && $scope.m.tableData.length > 0) {
                        if ($scope.m.dtColumns.length === 0) {
                            SiHttpUtil.initDtColumns($scope.m.dtColumns, $scope.m.tableData, colName => SiHttpUtil.omitColumnForTable($scope.m.tableName, colName), colName => SiHttpUtil.dbColumnTranslator($scope.m.tableName, colName), colName => SiHttpUtil.hideColumnForTable($scope.m.tableName, colName), SiHttpUtil.tableOrder($scope.m.tableName));
                        }

                        $scope.m.dtColDefs = [DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'purification')).withOption('type', 'natural'), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'realResponse')).renderWith(SiUtil.ColDisplayers.CheckDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'lowResponse')).renderWith(SiUtil.ColDisplayers.CheckDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'kd')).renderWith(SiUtil.ColDisplayers.ExponentialDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'kon')).renderWith(SiUtil.ColDisplayers.ExponentialDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'kdis')).renderWith(SiUtil.ColDisplayers.ExponentialDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'startDate')).renderWith(SiUtil.ColDisplayers.ShortDateDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'createdBy')).renderWith(SiUtil.ColDisplayers.GetHashConvertDisplayer($scope.UserHash)), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'updatedAt')).renderWith(SiUtil.ColDisplayers.ShortDateDisplayer)];

                        $scope.m.dtOptions = SiHttpUtil.initDtOptions($scope.m.dtColumns, $scope.m.tableData, $scope.m.rowCallback, function () {
                            resolve($scope.m.tableData);
                            $scope.m.dataReady = true;
                            if ($scope.m.op === "view" && $scope.m.id) {
                                const records = $scope.m.tableData;
                                for (let i = 0; i < records.length; i++) {
                                    if (records[i].id == $scope.m.id) {
                                        $scope.m.currentRowData = records[i];
                                        break;
                                    }
                                }
                                $scope.m.viewDetail();
                            }
                            if ($scope.op === "create") {
                                $scope.m.activeTab = "CreateTab";
                            }
                        }).withOption('order', [['1', 'desc']]);
                    } else {
                        resolve($scope.m.tableData);
                    }
                });
            });
        };

        $scope.m.viewDetail = function () {
            if ($scope.m.currentRowData) {
                $scope.m.viewForm.show = true;
                $scope.m.viewForm.data = angular.copy($scope.m.currentRowData);
                $scope.m.viewForm.data.createdAt = SiUtil.getDateOnly($scope.m.viewForm.data.createdAt);
                $scope.m.viewForm.data.startDate = SiUtil.getDateTime($scope.m.viewForm.data.startDate);
                $scope.m.viewForm.data.updatedAt = SiUtil.getDateOnly($scope.m.viewForm.data.updatedAt);
                $scope.m.viewForm.data.referenceArray = angular.fromJson($scope.m.viewForm.data.references);
                $scope.m.activeTab = "DetailTab";
            }
        };

        $scope.m.editDetail = function () {
            if ($scope.m.currentRowData) {
                $scope.m.editForm.data = angular.copy($scope.m.currentRowData);
                $scope.m.editForm.data.requestDate = {
                    dt: $scope.m.editForm.data.requestDate ? new Date($scope.m.editForm.data.requestDate) : null
                };
                $scope.m.editForm.show = true;
                $scope.m.activeTab = "EditTab";
            }
        };
        $scope.m.dp = SiUtil.dp.bind($scope.m)();
        $scope.m.LoadDataList();
    }
})();

// Octet Analysis Request
(function () {
    'use strict';

    angular.module('app.research').controller('KineticRequestsController', KineticRequestsController);

    KineticRequestsController.$inject = ['$scope', 'SiHttpUtil', 'DTColumnDefBuilder', 'SiUtil', '$stateParams'];

    function KineticRequestsController($scope, SiHttpUtil, DTColumnDefBuilder, SiUtil, $stateParams) {
        // Main model.
        $scope.m = {
            tableData: null,
            dtColumns: [],
            tableName: "kineticRequest",
            activeTab: "ViewAllTab",
            op: $stateParams.op,
            id: $stateParams.id,
            statusFilter: {
                includeSubmitted: true,
                includeCompleted: false
            },
            DtInstCallback: inst => {
                $scope.m.DtInst = inst;
            },
            RefreshData: () => {
                if ($scope.m.DtInstCallback) {
                    if ($scope.m.DtInst) {
                        $scope.m.DtInst.changeData($scope.m.LoadDataList());
                    } else {
                        $scope.m.LoadDataList();
                    }
                }
            }
        };

        $scope.m.getQuery = () => {
            var query = {
                expProgress: {
                    $or: {}
                }
            };
            if ($scope.m.statusFilter.includeSubmitted) {
                query.expProgress.$or.$ne = "Done";
            }
            if ($scope.m.statusFilter.includeCompleted) {
                query.expProgress.$or.$eq = "Done";
            }
            $scope.m.query = query;
        };
        $scope.m.onStatusChange = function () {
            $scope.m.getQuery();
            $scope.m.RefreshData();
        };

        $scope.getDateOnly = SiUtil.getDateOnly;
        $scope.m.viewForm = SiHttpUtil.InitViewForm($scope.m);
        $scope.tableState.currentTable = $scope.m.tableName;

        $scope.m.editForm = {
            data: {},
            show: false,
            submitted: false,
            ui: {},
            assign: () => {
                $scope.m.editForm.data.assignedTo = SiHttpUtil.GetUserId();
            },
            CancelTab: () => SiHttpUtil.HideTab($scope.m, $scope.m.editForm),
            Delete: () => {
                SiHttpUtil.DeleteDataEntry($scope.m.tableName, $scope.m.currentRowData.id).then(() => {
                    $scope.m.editForm.CancelTab();
                    $scope.m.RefreshData();
                });
            },
            SubmitTab: function () {
                $scope.m.editForm.submitted = true;
                if (!$scope.m.editForm.ui.validate.$valid) {
                    console.error($scope.m.editForm.ui.validate);
                    return;
                }
                const toCreate = {
                    tableName: $scope.m.tableName,
                    id: $scope.m.editForm.data.id,
                    type: $scope.m.editForm.data.type,
                    fullKinetics: $scope.m.editForm.data.fullKinetics,
                    otherSample: $scope.m.editForm.data.otherSample,
                    epitopeBinning: $scope.m.editForm.data.epitopeBinning,
                    quantitation: $scope.m.editForm.data.quantitation,
                    taskNotes: $scope.m.editForm.data.taskNotes,
                    methodDevProgress: $scope.m.editForm.data.methodDevProgress,
                    expProgress: $scope.m.editForm.data.expProgress,
                    expType: $scope.m.editForm.data.expType,
                    assignedTo: $scope.m.editForm.data.assignedTo,
                    timeline: $scope.m.editForm.data.timeline,
                    updatedAt: $scope.m.editForm.data.updatedAt
                };
                if ($scope.m.editForm.data.approved) {
                    toCreate.approvalDate = new Date();
                    toCreate.approvedBy = SiHttpUtil.GetUserId();
                }
                SiHttpUtil.UpdateDataEntry(toCreate).then(resp => {
                    if (resp.status == 200) {
                        $scope.m.editForm.CancelTab();
                        $scope.m.RefreshData();
                        $scope.m.resetSelection();
                    }
                });
            }
        };
        $scope.m.CreateForm = {
            data: {
                purificationsToAdd: [],
                transfectionsToAdd: [],
                cellLinesToAdd: [],
                bioreactorsToAdd: [],
                transfectionsToAdd: [],
                testAntigens: []
            },
            ui: {},
            submitted: false,
            ResetTab: function (createAnother) {
                SiHttpUtil.ResetForm($scope.m.CreateForm);
                $scope.m.CreateForm.data.purificationsToAdd = [], $scope.m.CreateForm.data.transfectionsToAdd = [], $scope.m.CreateForm.data.cellLinesToAdd = [], $scope.m.CreateForm.data.bioreactorsToAdd = [], $scope.m.CreateForm.data.testAntigens = [];
                if (!createAnother) {
                    $scope.m.activeTab = "ViewAllTab";
                }
                $scope.m.dp.initDp('CreateForm', 'approvalDate', false);
            },
            initTab: () => {
                SiHttpUtil.FetchIdNameMapping("proteinPurification").then(resp => {
                    $scope.m.PurificationDisplayData = SiHttpUtil.GetDependencyDisplayItemList(resp);
                });
                SiHttpUtil.FetchIdNameMapping("transfection").then(resp => {
                    $scope.m.TransfectionDisplayData = SiHttpUtil.GetDependencyDisplayItemList(resp);
                });
                SiHttpUtil.FetchIdNameMapping("cellLinePurification").then(resp => {
                    $scope.m.CellLineDisplayData = SiHttpUtil.GetDependencyDisplayItemList(resp);
                });
                SiHttpUtil.FetchIdNameMapping("bioreactorPurification").then(resp => {
                    $scope.m.BioreactorDisplayData = SiHttpUtil.GetDependencyDisplayItemList(resp);
                });
                SiHttpUtil.FetchIdNameMapping('antigenReagent').then(resp => {
                    $scope.m.AntigenDisplayData = SiHttpUtil.GetDependencyDisplayItemList(resp);
                });
            },
            addEntry: (list, id) => {
                if (list.indexOf(id) != -1) {
                    SiHttpUtil.NotifyOperationErr("item already added");
                    return;
                }
                list.push(id);
            },
            removeEntry: (list, index) => {
                list.splice(index, 1);
            },
            SubmitTab: function () {
                $scope.m.CreateForm.submitted = true;
                if (!$scope.m.CreateForm.ui.validate.$valid) {
                    console.error($scope.m.CreateForm.ui.validate);
                    return;
                }
                if (!$scope.m.CreateForm.data.testAntigens.length && !$scope.m.CreateForm.data.taskNotes) {
                    SiHttpUtil.NotifyOperationErr("Must add at least one test antigen or add notes");
                    return;
                }
                if (!$scope.m.CreateForm.data.purificationsToAdd.length && !$scope.m.CreateForm.data.transfectionsToAdd.length && !$scope.m.CreateForm.data.cellLinesToAdd.length && !$scope.m.CreateForm.data.bioreactorsToAdd.length && !$scope.m.CreateForm.data.otherSample) {
                    SiHttpUtil.NotifyOperationErr("Must add at least one test antibody");
                    return;
                }
                const toCreate = {
                    tableName: $scope.m.tableName,
                    purificationsToAdd: $scope.m.CreateForm.data.purificationsToAdd,
                    transfectionsToAdd: $scope.m.CreateForm.data.transfectionsToAdd,
                    cellLinesToAdd: $scope.m.CreateForm.data.cellLinesToAdd,
                    bioreactorsToAdd: $scope.m.CreateForm.data.bioreactorsToAdd,
                    otherSample: $scope.m.CreateForm.data.otherSample,
                    type: $scope.m.CreateForm.data.type || "Both",
                    fullKinetics: $scope.m.CreateForm.data.fullKinetics,
                    quantitation: $scope.m.CreateForm.data.quantitation,
                    epitopeBinning: $scope.m.CreateForm.data.epitopeBinning,
                    testAntigens: $scope.m.CreateForm.data.testAntigens,
                    taskNotes: $scope.m.CreateForm.data.taskNotes,
                    methodDevProgress: "N/A",
                    expProgress: "Submitted"
                };

                SiHttpUtil.CreateTableEntry(toCreate).then(function (resp) {
                    if (resp.status == 200) {
                        $scope.m.CreateForm.ResetTab($scope.m.CreateForm.data.another);
                        $scope.m.RefreshData();
                    }
                });
            }
        };

        $scope.m.antigenList = {
            data: {},
            loadData: () => {
                SiHttpUtil.FetchTableEntries('antigenReagent').then(resp => {
                    $scope.m.antigenList.tableData = resp.records;
                });
                SiHttpUtil.FetchIdNameMapping('protein').then(resp => {
                    $scope.m.antigenList.proteins = resp;
                });
            },
            removeEntry: id => {
                SiHttpUtil.DeleteDataEntry('antigenReagent', id).then(resp => {
                    $scope.m.antigenList.loadData();
                });
            },
            addEntry: () => {
                const toAdd = {
                    tableName: 'antigenReagent',
                    name: $scope.m.antigenList.data.name,
                    proteinId: $scope.m.antigenList.data.proteinId,
                    vendor: $scope.m.antigenList.data.vendor,
                    catalogId: $scope.m.antigenList.data.catalogId
                };
                SiHttpUtil.CreateTableEntry(toAdd).then(() => {
                    $scope.m.antigenList.loadData();
                    $scope.m.antigenList.data = {};
                });
            },
            undelete: entry => {
                const toUpdate = {
                    tableName: 'antigenReagent',
                    id: entry.id,
                    isDeleted: false
                };
                SiHttpUtil.UpdateDataEntry(toUpdate).then(() => {
                    $scope.m.antigenList.loadData();
                });
            }
        };

        SiHttpUtil.InitRowClick($scope);

        $scope.m.ValidateCreateInput = (FieldName, Type) => SiHttpUtil.ValidateInput($scope.m.CreateForm.ui.validate, $scope.m.CreateForm.submitted, FieldName, Type);
        $scope.m.ValidateEditInput = (FieldName, Type) => SiHttpUtil.ValidateInput($scope.m.editForm.ui.validate, $scope.m.editForm.submitted, FieldName, Type);

        $scope.m.LoadDataList = function () {
            return SiHttpUtil.SearchByColumn($scope.m.tableName, $scope.m.query).then(function (resp) {
                return new Promise(function (resolve, reject) {
                    $scope.m.tableData = resp;
                    // if (resp.enums) {
                    //     var enumList = JSON.parse(resp.enums);
                    // }
                    if ($scope.m.tableData && $scope.m.tableData.length > 0) {
                        if ($scope.m.dtColumns.length === 0) {
                            SiHttpUtil.initDtColumns($scope.m.dtColumns, $scope.m.tableData, colName => SiHttpUtil.omitColumnForTable($scope.m.tableName, colName), colName => SiHttpUtil.dbColumnTranslator($scope.m.tableName, colName), colName => SiHttpUtil.hideColumnForTable($scope.m.tableName, colName), SiHttpUtil.tableOrder($scope.m.tableName));
                        }

                        $scope.m.dtColDefs = [DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'fullKinetics')).renderWith(SiUtil.ColDisplayers.CheckDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'quantitation')).renderWith(SiUtil.ColDisplayers.CheckDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'epitopeBinning')).renderWith(SiUtil.ColDisplayers.CheckDisplayer), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'assignedTo')).renderWith(SiUtil.ColDisplayers.GetHashConvertDisplayer($scope.UserHash)), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'createdBy')).renderWith(SiUtil.ColDisplayers.GetHashConvertDisplayer($scope.UserHash)), DTColumnDefBuilder.newColumnDef(SiHttpUtil.dtColNameToIdx($scope.m.dtColumns, 'updatedAt')).renderWith(SiUtil.ColDisplayers.ShortDateDisplayer)];

                        $scope.m.dtOptions = SiHttpUtil.initDtOptions($scope.m.dtColumns, $scope.m.tableData, $scope.m.rowCallback, function () {
                            resolve($scope.m.tableData);
                            $scope.m.dataReady = true;
                            if ($scope.m.op === "view" && $scope.m.id) {
                                const records = $scope.m.tableData;
                                for (let i = 0; i < records.length; i++) {
                                    if (records[i].id == $scope.m.id) {
                                        $scope.m.currentRowData = records[i];
                                        break;
                                    }
                                }
                                $scope.m.viewDetail();
                            }
                            if ($scope.op === "create") {
                                $scope.m.activeTab = "CreateTab";
                            }
                        });
                    } else {
                        resolve($scope.m.tableData);
                    }
                });
            });
        };

        // Copy model to views.
        $scope.m.viewDetail = function () {
            if ($scope.m.currentRowData) {
                SiHttpUtil.FetchOneEntry($scope.m.tableName, $scope.m.currentRowData.id).then(resp => {
                    $scope.m.viewForm.Antigens = resp.AntigenReagents;
                    $scope.m.viewForm.ProteinPurifications = resp.ProteinPurifications;
                    $scope.m.viewForm.Transfections = resp.Transfections;
                    $scope.m.viewForm.BioreactorPurifications = resp.BioreactorPurifications;
                    $scope.m.viewForm.CLPurifications = resp.CellLinePurifications;
                    $scope.m.viewForm.BioreactorPurifications = resp.BioreactorPurifications.map(purification => {
                        purification.proteins = _.uniqBy(purification.Bioreactors.map(reactor => {
                            return reactor.CLDHarvest.experiment.StableCellLine.Protein;
                        }), 'id');
                        return purification;
                    });
                });
                $scope.m.viewForm.data = angular.copy($scope.m.currentRowData);
                $scope.m.viewForm.data.approvalDate = SiUtil.getDateOnly($scope.m.currentRowData.approvalDate);
                $scope.m.viewForm.data.createdAt = SiUtil.getDateOnly($scope.m.currentRowData.createdAt);
                $scope.m.viewForm.data.updatedAt = SiUtil.getDateOnly($scope.m.currentRowData.updatedAt);
                $scope.m.viewForm.show = true;
                $scope.m.activeTab = "DetailTab";
            }
        };

        $scope.m.editDetail = function () {
            if ($scope.m.currentRowData) {
                SiHttpUtil.FetchOneEntry($scope.m.tableName, $scope.m.currentRowData.id).then(resp => {
                    $scope.m.editForm.Antigens = resp.AntigenReagents;
                    $scope.m.editForm.ProteinPurifications = resp.ProteinPurifications;
                    $scope.m.editForm.Transfections = resp.Transfections;
                });
                $scope.m.editForm.data = angular.copy($scope.m.currentRowData);
                $scope.m.editForm.data.approvalDate = {
                    dt: $scope.m.currentRowData.approvalDate == null ? null : new Date($scope.m.currentRowData.approvalDate)
                };
                $scope.m.editForm.show = true;
                $scope.m.activeTab = "EditTab";
            }
        };

        $scope.m.dp = SiUtil.dp.bind($scope.m)();

        $scope.m.loadAll = function () {
            $scope.m.getQuery();
            $scope.m.dp.initDp('CreateForm', 'approvalDate', true);
            $scope.m.LoadDataList();
        };

        $scope.m.loadAll();
    }
})();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(14)))

/***/ }),

/***/ 23:
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ 24:
/***/ (function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ 3:
/***/ (function(module, exports) {

module.exports = jQuery;

/***/ }),

/***/ 333:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__app_js_app_js__ = __webpack_require__(223);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__app_js_app_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__app_js_app_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__app_js_other_js__ = __webpack_require__(224);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__app_js_other_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__app_js_other_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__app_js_research__ = __webpack_require__(225);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__app_js_research___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__app_js_research__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__app_js_accounting_js__ = __webpack_require__(222);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__app_js_accounting_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__app_js_accounting_js__);
// Angular Controllers





/***/ })

/******/ });
//# sourceMappingURL=app.a5f8567edaf23b0cb98f.js.map